
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `WorkLike` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model WorkLike
 * 
 */
export type WorkLikeModel = runtime.Types.Result.DefaultSelection<Prisma.$WorkLikePayload>

export type AggregateWorkLike = {
  _count: WorkLikeCountAggregateOutputType | null
  _avg: WorkLikeAvgAggregateOutputType | null
  _sum: WorkLikeSumAggregateOutputType | null
  _min: WorkLikeMinAggregateOutputType | null
  _max: WorkLikeMaxAggregateOutputType | null
}

export type WorkLikeAvgAggregateOutputType = {
  id: number | null
  workId: number | null
  likerId: number | null
}

export type WorkLikeSumAggregateOutputType = {
  id: bigint | null
  workId: bigint | null
  likerId: bigint | null
}

export type WorkLikeMinAggregateOutputType = {
  id: bigint | null
  createdAt: Date | null
  updatedAt: Date | null
  workId: bigint | null
  likerId: bigint | null
}

export type WorkLikeMaxAggregateOutputType = {
  id: bigint | null
  createdAt: Date | null
  updatedAt: Date | null
  workId: bigint | null
  likerId: bigint | null
}

export type WorkLikeCountAggregateOutputType = {
  id: number
  createdAt: number
  updatedAt: number
  workId: number
  likerId: number
  _all: number
}


export type WorkLikeAvgAggregateInputType = {
  id?: true
  workId?: true
  likerId?: true
}

export type WorkLikeSumAggregateInputType = {
  id?: true
  workId?: true
  likerId?: true
}

export type WorkLikeMinAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  workId?: true
  likerId?: true
}

export type WorkLikeMaxAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  workId?: true
  likerId?: true
}

export type WorkLikeCountAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  workId?: true
  likerId?: true
  _all?: true
}

export type WorkLikeAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which WorkLike to aggregate.
   */
  where?: Prisma.WorkLikeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WorkLikes to fetch.
   */
  orderBy?: Prisma.WorkLikeOrderByWithRelationInput | Prisma.WorkLikeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.WorkLikeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WorkLikes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WorkLikes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned WorkLikes
  **/
  _count?: true | WorkLikeCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: WorkLikeAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: WorkLikeSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: WorkLikeMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: WorkLikeMaxAggregateInputType
}

export type GetWorkLikeAggregateType<T extends WorkLikeAggregateArgs> = {
      [P in keyof T & keyof AggregateWorkLike]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateWorkLike[P]>
    : Prisma.GetScalarType<T[P], AggregateWorkLike[P]>
}




export type WorkLikeGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.WorkLikeWhereInput
  orderBy?: Prisma.WorkLikeOrderByWithAggregationInput | Prisma.WorkLikeOrderByWithAggregationInput[]
  by: Prisma.WorkLikeScalarFieldEnum[] | Prisma.WorkLikeScalarFieldEnum
  having?: Prisma.WorkLikeScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: WorkLikeCountAggregateInputType | true
  _avg?: WorkLikeAvgAggregateInputType
  _sum?: WorkLikeSumAggregateInputType
  _min?: WorkLikeMinAggregateInputType
  _max?: WorkLikeMaxAggregateInputType
}

export type WorkLikeGroupByOutputType = {
  id: bigint
  createdAt: Date
  updatedAt: Date
  workId: bigint
  likerId: bigint
  _count: WorkLikeCountAggregateOutputType | null
  _avg: WorkLikeAvgAggregateOutputType | null
  _sum: WorkLikeSumAggregateOutputType | null
  _min: WorkLikeMinAggregateOutputType | null
  _max: WorkLikeMaxAggregateOutputType | null
}

type GetWorkLikeGroupByPayload<T extends WorkLikeGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<WorkLikeGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof WorkLikeGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], WorkLikeGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], WorkLikeGroupByOutputType[P]>
      }
    >
  >



export type WorkLikeWhereInput = {
  AND?: Prisma.WorkLikeWhereInput | Prisma.WorkLikeWhereInput[]
  OR?: Prisma.WorkLikeWhereInput[]
  NOT?: Prisma.WorkLikeWhereInput | Prisma.WorkLikeWhereInput[]
  id?: Prisma.BigIntFilter<"WorkLike"> | bigint | number
  createdAt?: Prisma.DateTimeFilter<"WorkLike"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"WorkLike"> | Date | string
  workId?: Prisma.BigIntFilter<"WorkLike"> | bigint | number
  likerId?: Prisma.BigIntFilter<"WorkLike"> | bigint | number
  work?: Prisma.XOR<Prisma.WorkScalarRelationFilter, Prisma.WorkWhereInput>
  liker?: Prisma.XOR<Prisma.ProfileScalarRelationFilter, Prisma.ProfileWhereInput>
}

export type WorkLikeOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  workId?: Prisma.SortOrder
  likerId?: Prisma.SortOrder
  work?: Prisma.WorkOrderByWithRelationInput
  liker?: Prisma.ProfileOrderByWithRelationInput
}

export type WorkLikeWhereUniqueInput = Prisma.AtLeast<{
  id?: bigint | number
  AND?: Prisma.WorkLikeWhereInput | Prisma.WorkLikeWhereInput[]
  OR?: Prisma.WorkLikeWhereInput[]
  NOT?: Prisma.WorkLikeWhereInput | Prisma.WorkLikeWhereInput[]
  createdAt?: Prisma.DateTimeFilter<"WorkLike"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"WorkLike"> | Date | string
  workId?: Prisma.BigIntFilter<"WorkLike"> | bigint | number
  likerId?: Prisma.BigIntFilter<"WorkLike"> | bigint | number
  work?: Prisma.XOR<Prisma.WorkScalarRelationFilter, Prisma.WorkWhereInput>
  liker?: Prisma.XOR<Prisma.ProfileScalarRelationFilter, Prisma.ProfileWhereInput>
}, "id">

export type WorkLikeOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  workId?: Prisma.SortOrder
  likerId?: Prisma.SortOrder
  _count?: Prisma.WorkLikeCountOrderByAggregateInput
  _avg?: Prisma.WorkLikeAvgOrderByAggregateInput
  _max?: Prisma.WorkLikeMaxOrderByAggregateInput
  _min?: Prisma.WorkLikeMinOrderByAggregateInput
  _sum?: Prisma.WorkLikeSumOrderByAggregateInput
}

export type WorkLikeScalarWhereWithAggregatesInput = {
  AND?: Prisma.WorkLikeScalarWhereWithAggregatesInput | Prisma.WorkLikeScalarWhereWithAggregatesInput[]
  OR?: Prisma.WorkLikeScalarWhereWithAggregatesInput[]
  NOT?: Prisma.WorkLikeScalarWhereWithAggregatesInput | Prisma.WorkLikeScalarWhereWithAggregatesInput[]
  id?: Prisma.BigIntWithAggregatesFilter<"WorkLike"> | bigint | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"WorkLike"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"WorkLike"> | Date | string
  workId?: Prisma.BigIntWithAggregatesFilter<"WorkLike"> | bigint | number
  likerId?: Prisma.BigIntWithAggregatesFilter<"WorkLike"> | bigint | number
}

export type WorkLikeCreateInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  work: Prisma.WorkCreateNestedOneWithoutWorkLikesInput
  liker: Prisma.ProfileCreateNestedOneWithoutWorkLikesInput
}

export type WorkLikeUncheckedCreateInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  workId: bigint | number
  likerId: bigint | number
}

export type WorkLikeUpdateInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  work?: Prisma.WorkUpdateOneRequiredWithoutWorkLikesNestedInput
  liker?: Prisma.ProfileUpdateOneRequiredWithoutWorkLikesNestedInput
}

export type WorkLikeUncheckedUpdateInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  workId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  likerId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
}

export type WorkLikeCreateManyInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  workId: bigint | number
  likerId: bigint | number
}

export type WorkLikeUpdateManyMutationInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WorkLikeUncheckedUpdateManyInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  workId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  likerId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
}

export type WorkLikeListRelationFilter = {
  every?: Prisma.WorkLikeWhereInput
  some?: Prisma.WorkLikeWhereInput
  none?: Prisma.WorkLikeWhereInput
}

export type WorkLikeOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type WorkLikeCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  workId?: Prisma.SortOrder
  likerId?: Prisma.SortOrder
}

export type WorkLikeAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  workId?: Prisma.SortOrder
  likerId?: Prisma.SortOrder
}

export type WorkLikeMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  workId?: Prisma.SortOrder
  likerId?: Prisma.SortOrder
}

export type WorkLikeMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  workId?: Prisma.SortOrder
  likerId?: Prisma.SortOrder
}

export type WorkLikeSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  workId?: Prisma.SortOrder
  likerId?: Prisma.SortOrder
}

export type WorkLikeCreateNestedManyWithoutWorkInput = {
  create?: Prisma.XOR<Prisma.WorkLikeCreateWithoutWorkInput, Prisma.WorkLikeUncheckedCreateWithoutWorkInput> | Prisma.WorkLikeCreateWithoutWorkInput[] | Prisma.WorkLikeUncheckedCreateWithoutWorkInput[]
  connectOrCreate?: Prisma.WorkLikeCreateOrConnectWithoutWorkInput | Prisma.WorkLikeCreateOrConnectWithoutWorkInput[]
  createMany?: Prisma.WorkLikeCreateManyWorkInputEnvelope
  connect?: Prisma.WorkLikeWhereUniqueInput | Prisma.WorkLikeWhereUniqueInput[]
}

export type WorkLikeUncheckedCreateNestedManyWithoutWorkInput = {
  create?: Prisma.XOR<Prisma.WorkLikeCreateWithoutWorkInput, Prisma.WorkLikeUncheckedCreateWithoutWorkInput> | Prisma.WorkLikeCreateWithoutWorkInput[] | Prisma.WorkLikeUncheckedCreateWithoutWorkInput[]
  connectOrCreate?: Prisma.WorkLikeCreateOrConnectWithoutWorkInput | Prisma.WorkLikeCreateOrConnectWithoutWorkInput[]
  createMany?: Prisma.WorkLikeCreateManyWorkInputEnvelope
  connect?: Prisma.WorkLikeWhereUniqueInput | Prisma.WorkLikeWhereUniqueInput[]
}

export type WorkLikeUpdateManyWithoutWorkNestedInput = {
  create?: Prisma.XOR<Prisma.WorkLikeCreateWithoutWorkInput, Prisma.WorkLikeUncheckedCreateWithoutWorkInput> | Prisma.WorkLikeCreateWithoutWorkInput[] | Prisma.WorkLikeUncheckedCreateWithoutWorkInput[]
  connectOrCreate?: Prisma.WorkLikeCreateOrConnectWithoutWorkInput | Prisma.WorkLikeCreateOrConnectWithoutWorkInput[]
  upsert?: Prisma.WorkLikeUpsertWithWhereUniqueWithoutWorkInput | Prisma.WorkLikeUpsertWithWhereUniqueWithoutWorkInput[]
  createMany?: Prisma.WorkLikeCreateManyWorkInputEnvelope
  set?: Prisma.WorkLikeWhereUniqueInput | Prisma.WorkLikeWhereUniqueInput[]
  disconnect?: Prisma.WorkLikeWhereUniqueInput | Prisma.WorkLikeWhereUniqueInput[]
  delete?: Prisma.WorkLikeWhereUniqueInput | Prisma.WorkLikeWhereUniqueInput[]
  connect?: Prisma.WorkLikeWhereUniqueInput | Prisma.WorkLikeWhereUniqueInput[]
  update?: Prisma.WorkLikeUpdateWithWhereUniqueWithoutWorkInput | Prisma.WorkLikeUpdateWithWhereUniqueWithoutWorkInput[]
  updateMany?: Prisma.WorkLikeUpdateManyWithWhereWithoutWorkInput | Prisma.WorkLikeUpdateManyWithWhereWithoutWorkInput[]
  deleteMany?: Prisma.WorkLikeScalarWhereInput | Prisma.WorkLikeScalarWhereInput[]
}

export type WorkLikeUncheckedUpdateManyWithoutWorkNestedInput = {
  create?: Prisma.XOR<Prisma.WorkLikeCreateWithoutWorkInput, Prisma.WorkLikeUncheckedCreateWithoutWorkInput> | Prisma.WorkLikeCreateWithoutWorkInput[] | Prisma.WorkLikeUncheckedCreateWithoutWorkInput[]
  connectOrCreate?: Prisma.WorkLikeCreateOrConnectWithoutWorkInput | Prisma.WorkLikeCreateOrConnectWithoutWorkInput[]
  upsert?: Prisma.WorkLikeUpsertWithWhereUniqueWithoutWorkInput | Prisma.WorkLikeUpsertWithWhereUniqueWithoutWorkInput[]
  createMany?: Prisma.WorkLikeCreateManyWorkInputEnvelope
  set?: Prisma.WorkLikeWhereUniqueInput | Prisma.WorkLikeWhereUniqueInput[]
  disconnect?: Prisma.WorkLikeWhereUniqueInput | Prisma.WorkLikeWhereUniqueInput[]
  delete?: Prisma.WorkLikeWhereUniqueInput | Prisma.WorkLikeWhereUniqueInput[]
  connect?: Prisma.WorkLikeWhereUniqueInput | Prisma.WorkLikeWhereUniqueInput[]
  update?: Prisma.WorkLikeUpdateWithWhereUniqueWithoutWorkInput | Prisma.WorkLikeUpdateWithWhereUniqueWithoutWorkInput[]
  updateMany?: Prisma.WorkLikeUpdateManyWithWhereWithoutWorkInput | Prisma.WorkLikeUpdateManyWithWhereWithoutWorkInput[]
  deleteMany?: Prisma.WorkLikeScalarWhereInput | Prisma.WorkLikeScalarWhereInput[]
}

export type WorkLikeCreateNestedManyWithoutLikerInput = {
  create?: Prisma.XOR<Prisma.WorkLikeCreateWithoutLikerInput, Prisma.WorkLikeUncheckedCreateWithoutLikerInput> | Prisma.WorkLikeCreateWithoutLikerInput[] | Prisma.WorkLikeUncheckedCreateWithoutLikerInput[]
  connectOrCreate?: Prisma.WorkLikeCreateOrConnectWithoutLikerInput | Prisma.WorkLikeCreateOrConnectWithoutLikerInput[]
  createMany?: Prisma.WorkLikeCreateManyLikerInputEnvelope
  connect?: Prisma.WorkLikeWhereUniqueInput | Prisma.WorkLikeWhereUniqueInput[]
}

export type WorkLikeUncheckedCreateNestedManyWithoutLikerInput = {
  create?: Prisma.XOR<Prisma.WorkLikeCreateWithoutLikerInput, Prisma.WorkLikeUncheckedCreateWithoutLikerInput> | Prisma.WorkLikeCreateWithoutLikerInput[] | Prisma.WorkLikeUncheckedCreateWithoutLikerInput[]
  connectOrCreate?: Prisma.WorkLikeCreateOrConnectWithoutLikerInput | Prisma.WorkLikeCreateOrConnectWithoutLikerInput[]
  createMany?: Prisma.WorkLikeCreateManyLikerInputEnvelope
  connect?: Prisma.WorkLikeWhereUniqueInput | Prisma.WorkLikeWhereUniqueInput[]
}

export type WorkLikeUpdateManyWithoutLikerNestedInput = {
  create?: Prisma.XOR<Prisma.WorkLikeCreateWithoutLikerInput, Prisma.WorkLikeUncheckedCreateWithoutLikerInput> | Prisma.WorkLikeCreateWithoutLikerInput[] | Prisma.WorkLikeUncheckedCreateWithoutLikerInput[]
  connectOrCreate?: Prisma.WorkLikeCreateOrConnectWithoutLikerInput | Prisma.WorkLikeCreateOrConnectWithoutLikerInput[]
  upsert?: Prisma.WorkLikeUpsertWithWhereUniqueWithoutLikerInput | Prisma.WorkLikeUpsertWithWhereUniqueWithoutLikerInput[]
  createMany?: Prisma.WorkLikeCreateManyLikerInputEnvelope
  set?: Prisma.WorkLikeWhereUniqueInput | Prisma.WorkLikeWhereUniqueInput[]
  disconnect?: Prisma.WorkLikeWhereUniqueInput | Prisma.WorkLikeWhereUniqueInput[]
  delete?: Prisma.WorkLikeWhereUniqueInput | Prisma.WorkLikeWhereUniqueInput[]
  connect?: Prisma.WorkLikeWhereUniqueInput | Prisma.WorkLikeWhereUniqueInput[]
  update?: Prisma.WorkLikeUpdateWithWhereUniqueWithoutLikerInput | Prisma.WorkLikeUpdateWithWhereUniqueWithoutLikerInput[]
  updateMany?: Prisma.WorkLikeUpdateManyWithWhereWithoutLikerInput | Prisma.WorkLikeUpdateManyWithWhereWithoutLikerInput[]
  deleteMany?: Prisma.WorkLikeScalarWhereInput | Prisma.WorkLikeScalarWhereInput[]
}

export type WorkLikeUncheckedUpdateManyWithoutLikerNestedInput = {
  create?: Prisma.XOR<Prisma.WorkLikeCreateWithoutLikerInput, Prisma.WorkLikeUncheckedCreateWithoutLikerInput> | Prisma.WorkLikeCreateWithoutLikerInput[] | Prisma.WorkLikeUncheckedCreateWithoutLikerInput[]
  connectOrCreate?: Prisma.WorkLikeCreateOrConnectWithoutLikerInput | Prisma.WorkLikeCreateOrConnectWithoutLikerInput[]
  upsert?: Prisma.WorkLikeUpsertWithWhereUniqueWithoutLikerInput | Prisma.WorkLikeUpsertWithWhereUniqueWithoutLikerInput[]
  createMany?: Prisma.WorkLikeCreateManyLikerInputEnvelope
  set?: Prisma.WorkLikeWhereUniqueInput | Prisma.WorkLikeWhereUniqueInput[]
  disconnect?: Prisma.WorkLikeWhereUniqueInput | Prisma.WorkLikeWhereUniqueInput[]
  delete?: Prisma.WorkLikeWhereUniqueInput | Prisma.WorkLikeWhereUniqueInput[]
  connect?: Prisma.WorkLikeWhereUniqueInput | Prisma.WorkLikeWhereUniqueInput[]
  update?: Prisma.WorkLikeUpdateWithWhereUniqueWithoutLikerInput | Prisma.WorkLikeUpdateWithWhereUniqueWithoutLikerInput[]
  updateMany?: Prisma.WorkLikeUpdateManyWithWhereWithoutLikerInput | Prisma.WorkLikeUpdateManyWithWhereWithoutLikerInput[]
  deleteMany?: Prisma.WorkLikeScalarWhereInput | Prisma.WorkLikeScalarWhereInput[]
}

export type WorkLikeCreateWithoutWorkInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  liker: Prisma.ProfileCreateNestedOneWithoutWorkLikesInput
}

export type WorkLikeUncheckedCreateWithoutWorkInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  likerId: bigint | number
}

export type WorkLikeCreateOrConnectWithoutWorkInput = {
  where: Prisma.WorkLikeWhereUniqueInput
  create: Prisma.XOR<Prisma.WorkLikeCreateWithoutWorkInput, Prisma.WorkLikeUncheckedCreateWithoutWorkInput>
}

export type WorkLikeCreateManyWorkInputEnvelope = {
  data: Prisma.WorkLikeCreateManyWorkInput | Prisma.WorkLikeCreateManyWorkInput[]
  skipDuplicates?: boolean
}

export type WorkLikeUpsertWithWhereUniqueWithoutWorkInput = {
  where: Prisma.WorkLikeWhereUniqueInput
  update: Prisma.XOR<Prisma.WorkLikeUpdateWithoutWorkInput, Prisma.WorkLikeUncheckedUpdateWithoutWorkInput>
  create: Prisma.XOR<Prisma.WorkLikeCreateWithoutWorkInput, Prisma.WorkLikeUncheckedCreateWithoutWorkInput>
}

export type WorkLikeUpdateWithWhereUniqueWithoutWorkInput = {
  where: Prisma.WorkLikeWhereUniqueInput
  data: Prisma.XOR<Prisma.WorkLikeUpdateWithoutWorkInput, Prisma.WorkLikeUncheckedUpdateWithoutWorkInput>
}

export type WorkLikeUpdateManyWithWhereWithoutWorkInput = {
  where: Prisma.WorkLikeScalarWhereInput
  data: Prisma.XOR<Prisma.WorkLikeUpdateManyMutationInput, Prisma.WorkLikeUncheckedUpdateManyWithoutWorkInput>
}

export type WorkLikeScalarWhereInput = {
  AND?: Prisma.WorkLikeScalarWhereInput | Prisma.WorkLikeScalarWhereInput[]
  OR?: Prisma.WorkLikeScalarWhereInput[]
  NOT?: Prisma.WorkLikeScalarWhereInput | Prisma.WorkLikeScalarWhereInput[]
  id?: Prisma.BigIntFilter<"WorkLike"> | bigint | number
  createdAt?: Prisma.DateTimeFilter<"WorkLike"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"WorkLike"> | Date | string
  workId?: Prisma.BigIntFilter<"WorkLike"> | bigint | number
  likerId?: Prisma.BigIntFilter<"WorkLike"> | bigint | number
}

export type WorkLikeCreateWithoutLikerInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  work: Prisma.WorkCreateNestedOneWithoutWorkLikesInput
}

export type WorkLikeUncheckedCreateWithoutLikerInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  workId: bigint | number
}

export type WorkLikeCreateOrConnectWithoutLikerInput = {
  where: Prisma.WorkLikeWhereUniqueInput
  create: Prisma.XOR<Prisma.WorkLikeCreateWithoutLikerInput, Prisma.WorkLikeUncheckedCreateWithoutLikerInput>
}

export type WorkLikeCreateManyLikerInputEnvelope = {
  data: Prisma.WorkLikeCreateManyLikerInput | Prisma.WorkLikeCreateManyLikerInput[]
  skipDuplicates?: boolean
}

export type WorkLikeUpsertWithWhereUniqueWithoutLikerInput = {
  where: Prisma.WorkLikeWhereUniqueInput
  update: Prisma.XOR<Prisma.WorkLikeUpdateWithoutLikerInput, Prisma.WorkLikeUncheckedUpdateWithoutLikerInput>
  create: Prisma.XOR<Prisma.WorkLikeCreateWithoutLikerInput, Prisma.WorkLikeUncheckedCreateWithoutLikerInput>
}

export type WorkLikeUpdateWithWhereUniqueWithoutLikerInput = {
  where: Prisma.WorkLikeWhereUniqueInput
  data: Prisma.XOR<Prisma.WorkLikeUpdateWithoutLikerInput, Prisma.WorkLikeUncheckedUpdateWithoutLikerInput>
}

export type WorkLikeUpdateManyWithWhereWithoutLikerInput = {
  where: Prisma.WorkLikeScalarWhereInput
  data: Prisma.XOR<Prisma.WorkLikeUpdateManyMutationInput, Prisma.WorkLikeUncheckedUpdateManyWithoutLikerInput>
}

export type WorkLikeCreateManyWorkInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  likerId: bigint | number
}

export type WorkLikeUpdateWithoutWorkInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  liker?: Prisma.ProfileUpdateOneRequiredWithoutWorkLikesNestedInput
}

export type WorkLikeUncheckedUpdateWithoutWorkInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  likerId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
}

export type WorkLikeUncheckedUpdateManyWithoutWorkInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  likerId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
}

export type WorkLikeCreateManyLikerInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  workId: bigint | number
}

export type WorkLikeUpdateWithoutLikerInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  work?: Prisma.WorkUpdateOneRequiredWithoutWorkLikesNestedInput
}

export type WorkLikeUncheckedUpdateWithoutLikerInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  workId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
}

export type WorkLikeUncheckedUpdateManyWithoutLikerInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  workId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
}



export type WorkLikeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  workId?: boolean
  likerId?: boolean
  work?: boolean | Prisma.WorkDefaultArgs<ExtArgs>
  liker?: boolean | Prisma.ProfileDefaultArgs<ExtArgs>
}, ExtArgs["result"]["workLike"]>

export type WorkLikeSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  workId?: boolean
  likerId?: boolean
  work?: boolean | Prisma.WorkDefaultArgs<ExtArgs>
  liker?: boolean | Prisma.ProfileDefaultArgs<ExtArgs>
}, ExtArgs["result"]["workLike"]>

export type WorkLikeSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  workId?: boolean
  likerId?: boolean
  work?: boolean | Prisma.WorkDefaultArgs<ExtArgs>
  liker?: boolean | Prisma.ProfileDefaultArgs<ExtArgs>
}, ExtArgs["result"]["workLike"]>

export type WorkLikeSelectScalar = {
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  workId?: boolean
  likerId?: boolean
}

export type WorkLikeOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "workId" | "likerId", ExtArgs["result"]["workLike"]>
export type WorkLikeInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  work?: boolean | Prisma.WorkDefaultArgs<ExtArgs>
  liker?: boolean | Prisma.ProfileDefaultArgs<ExtArgs>
}
export type WorkLikeIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  work?: boolean | Prisma.WorkDefaultArgs<ExtArgs>
  liker?: boolean | Prisma.ProfileDefaultArgs<ExtArgs>
}
export type WorkLikeIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  work?: boolean | Prisma.WorkDefaultArgs<ExtArgs>
  liker?: boolean | Prisma.ProfileDefaultArgs<ExtArgs>
}

export type $WorkLikePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "WorkLike"
  objects: {
    work: Prisma.$WorkPayload<ExtArgs>
    liker: Prisma.$ProfilePayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: bigint
    createdAt: Date
    updatedAt: Date
    workId: bigint
    likerId: bigint
  }, ExtArgs["result"]["workLike"]>
  composites: {}
}

export type WorkLikeGetPayload<S extends boolean | null | undefined | WorkLikeDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$WorkLikePayload, S>

export type WorkLikeCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<WorkLikeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: WorkLikeCountAggregateInputType | true
  }

export interface WorkLikeDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkLike'], meta: { name: 'WorkLike' } }
  /**
   * Find zero or one WorkLike that matches the filter.
   * @param {WorkLikeFindUniqueArgs} args - Arguments to find a WorkLike
   * @example
   * // Get one WorkLike
   * const workLike = await prisma.workLike.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends WorkLikeFindUniqueArgs>(args: Prisma.SelectSubset<T, WorkLikeFindUniqueArgs<ExtArgs>>): Prisma.Prisma__WorkLikeClient<runtime.Types.Result.GetResult<Prisma.$WorkLikePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one WorkLike that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {WorkLikeFindUniqueOrThrowArgs} args - Arguments to find a WorkLike
   * @example
   * // Get one WorkLike
   * const workLike = await prisma.workLike.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends WorkLikeFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, WorkLikeFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__WorkLikeClient<runtime.Types.Result.GetResult<Prisma.$WorkLikePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first WorkLike that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkLikeFindFirstArgs} args - Arguments to find a WorkLike
   * @example
   * // Get one WorkLike
   * const workLike = await prisma.workLike.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends WorkLikeFindFirstArgs>(args?: Prisma.SelectSubset<T, WorkLikeFindFirstArgs<ExtArgs>>): Prisma.Prisma__WorkLikeClient<runtime.Types.Result.GetResult<Prisma.$WorkLikePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first WorkLike that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkLikeFindFirstOrThrowArgs} args - Arguments to find a WorkLike
   * @example
   * // Get one WorkLike
   * const workLike = await prisma.workLike.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends WorkLikeFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, WorkLikeFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__WorkLikeClient<runtime.Types.Result.GetResult<Prisma.$WorkLikePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more WorkLikes that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkLikeFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all WorkLikes
   * const workLikes = await prisma.workLike.findMany()
   * 
   * // Get first 10 WorkLikes
   * const workLikes = await prisma.workLike.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const workLikeWithIdOnly = await prisma.workLike.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends WorkLikeFindManyArgs>(args?: Prisma.SelectSubset<T, WorkLikeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WorkLikePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a WorkLike.
   * @param {WorkLikeCreateArgs} args - Arguments to create a WorkLike.
   * @example
   * // Create one WorkLike
   * const WorkLike = await prisma.workLike.create({
   *   data: {
   *     // ... data to create a WorkLike
   *   }
   * })
   * 
   */
  create<T extends WorkLikeCreateArgs>(args: Prisma.SelectSubset<T, WorkLikeCreateArgs<ExtArgs>>): Prisma.Prisma__WorkLikeClient<runtime.Types.Result.GetResult<Prisma.$WorkLikePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many WorkLikes.
   * @param {WorkLikeCreateManyArgs} args - Arguments to create many WorkLikes.
   * @example
   * // Create many WorkLikes
   * const workLike = await prisma.workLike.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends WorkLikeCreateManyArgs>(args?: Prisma.SelectSubset<T, WorkLikeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many WorkLikes and returns the data saved in the database.
   * @param {WorkLikeCreateManyAndReturnArgs} args - Arguments to create many WorkLikes.
   * @example
   * // Create many WorkLikes
   * const workLike = await prisma.workLike.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many WorkLikes and only return the `id`
   * const workLikeWithIdOnly = await prisma.workLike.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends WorkLikeCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, WorkLikeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WorkLikePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a WorkLike.
   * @param {WorkLikeDeleteArgs} args - Arguments to delete one WorkLike.
   * @example
   * // Delete one WorkLike
   * const WorkLike = await prisma.workLike.delete({
   *   where: {
   *     // ... filter to delete one WorkLike
   *   }
   * })
   * 
   */
  delete<T extends WorkLikeDeleteArgs>(args: Prisma.SelectSubset<T, WorkLikeDeleteArgs<ExtArgs>>): Prisma.Prisma__WorkLikeClient<runtime.Types.Result.GetResult<Prisma.$WorkLikePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one WorkLike.
   * @param {WorkLikeUpdateArgs} args - Arguments to update one WorkLike.
   * @example
   * // Update one WorkLike
   * const workLike = await prisma.workLike.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends WorkLikeUpdateArgs>(args: Prisma.SelectSubset<T, WorkLikeUpdateArgs<ExtArgs>>): Prisma.Prisma__WorkLikeClient<runtime.Types.Result.GetResult<Prisma.$WorkLikePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more WorkLikes.
   * @param {WorkLikeDeleteManyArgs} args - Arguments to filter WorkLikes to delete.
   * @example
   * // Delete a few WorkLikes
   * const { count } = await prisma.workLike.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends WorkLikeDeleteManyArgs>(args?: Prisma.SelectSubset<T, WorkLikeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more WorkLikes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkLikeUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many WorkLikes
   * const workLike = await prisma.workLike.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends WorkLikeUpdateManyArgs>(args: Prisma.SelectSubset<T, WorkLikeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more WorkLikes and returns the data updated in the database.
   * @param {WorkLikeUpdateManyAndReturnArgs} args - Arguments to update many WorkLikes.
   * @example
   * // Update many WorkLikes
   * const workLike = await prisma.workLike.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more WorkLikes and only return the `id`
   * const workLikeWithIdOnly = await prisma.workLike.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends WorkLikeUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, WorkLikeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WorkLikePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one WorkLike.
   * @param {WorkLikeUpsertArgs} args - Arguments to update or create a WorkLike.
   * @example
   * // Update or create a WorkLike
   * const workLike = await prisma.workLike.upsert({
   *   create: {
   *     // ... data to create a WorkLike
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the WorkLike we want to update
   *   }
   * })
   */
  upsert<T extends WorkLikeUpsertArgs>(args: Prisma.SelectSubset<T, WorkLikeUpsertArgs<ExtArgs>>): Prisma.Prisma__WorkLikeClient<runtime.Types.Result.GetResult<Prisma.$WorkLikePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of WorkLikes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkLikeCountArgs} args - Arguments to filter WorkLikes to count.
   * @example
   * // Count the number of WorkLikes
   * const count = await prisma.workLike.count({
   *   where: {
   *     // ... the filter for the WorkLikes we want to count
   *   }
   * })
  **/
  count<T extends WorkLikeCountArgs>(
    args?: Prisma.Subset<T, WorkLikeCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], WorkLikeCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a WorkLike.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkLikeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends WorkLikeAggregateArgs>(args: Prisma.Subset<T, WorkLikeAggregateArgs>): Prisma.PrismaPromise<GetWorkLikeAggregateType<T>>

  /**
   * Group by WorkLike.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkLikeGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends WorkLikeGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: WorkLikeGroupByArgs['orderBy'] }
      : { orderBy?: WorkLikeGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, WorkLikeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkLikeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the WorkLike model
 */
readonly fields: WorkLikeFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for WorkLike.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__WorkLikeClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  work<T extends Prisma.WorkDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.WorkDefaultArgs<ExtArgs>>): Prisma.Prisma__WorkClient<runtime.Types.Result.GetResult<Prisma.$WorkPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  liker<T extends Prisma.ProfileDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProfileDefaultArgs<ExtArgs>>): Prisma.Prisma__ProfileClient<runtime.Types.Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the WorkLike model
 */
export interface WorkLikeFieldRefs {
  readonly id: Prisma.FieldRef<"WorkLike", 'BigInt'>
  readonly createdAt: Prisma.FieldRef<"WorkLike", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"WorkLike", 'DateTime'>
  readonly workId: Prisma.FieldRef<"WorkLike", 'BigInt'>
  readonly likerId: Prisma.FieldRef<"WorkLike", 'BigInt'>
}
    

// Custom InputTypes
/**
 * WorkLike findUnique
 */
export type WorkLikeFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkLike
   */
  select?: Prisma.WorkLikeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkLike
   */
  omit?: Prisma.WorkLikeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkLikeInclude<ExtArgs> | null
  /**
   * Filter, which WorkLike to fetch.
   */
  where: Prisma.WorkLikeWhereUniqueInput
}

/**
 * WorkLike findUniqueOrThrow
 */
export type WorkLikeFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkLike
   */
  select?: Prisma.WorkLikeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkLike
   */
  omit?: Prisma.WorkLikeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkLikeInclude<ExtArgs> | null
  /**
   * Filter, which WorkLike to fetch.
   */
  where: Prisma.WorkLikeWhereUniqueInput
}

/**
 * WorkLike findFirst
 */
export type WorkLikeFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkLike
   */
  select?: Prisma.WorkLikeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkLike
   */
  omit?: Prisma.WorkLikeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkLikeInclude<ExtArgs> | null
  /**
   * Filter, which WorkLike to fetch.
   */
  where?: Prisma.WorkLikeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WorkLikes to fetch.
   */
  orderBy?: Prisma.WorkLikeOrderByWithRelationInput | Prisma.WorkLikeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for WorkLikes.
   */
  cursor?: Prisma.WorkLikeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WorkLikes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WorkLikes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of WorkLikes.
   */
  distinct?: Prisma.WorkLikeScalarFieldEnum | Prisma.WorkLikeScalarFieldEnum[]
}

/**
 * WorkLike findFirstOrThrow
 */
export type WorkLikeFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkLike
   */
  select?: Prisma.WorkLikeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkLike
   */
  omit?: Prisma.WorkLikeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkLikeInclude<ExtArgs> | null
  /**
   * Filter, which WorkLike to fetch.
   */
  where?: Prisma.WorkLikeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WorkLikes to fetch.
   */
  orderBy?: Prisma.WorkLikeOrderByWithRelationInput | Prisma.WorkLikeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for WorkLikes.
   */
  cursor?: Prisma.WorkLikeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WorkLikes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WorkLikes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of WorkLikes.
   */
  distinct?: Prisma.WorkLikeScalarFieldEnum | Prisma.WorkLikeScalarFieldEnum[]
}

/**
 * WorkLike findMany
 */
export type WorkLikeFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkLike
   */
  select?: Prisma.WorkLikeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkLike
   */
  omit?: Prisma.WorkLikeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkLikeInclude<ExtArgs> | null
  /**
   * Filter, which WorkLikes to fetch.
   */
  where?: Prisma.WorkLikeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WorkLikes to fetch.
   */
  orderBy?: Prisma.WorkLikeOrderByWithRelationInput | Prisma.WorkLikeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing WorkLikes.
   */
  cursor?: Prisma.WorkLikeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WorkLikes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WorkLikes.
   */
  skip?: number
  distinct?: Prisma.WorkLikeScalarFieldEnum | Prisma.WorkLikeScalarFieldEnum[]
}

/**
 * WorkLike create
 */
export type WorkLikeCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkLike
   */
  select?: Prisma.WorkLikeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkLike
   */
  omit?: Prisma.WorkLikeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkLikeInclude<ExtArgs> | null
  /**
   * The data needed to create a WorkLike.
   */
  data: Prisma.XOR<Prisma.WorkLikeCreateInput, Prisma.WorkLikeUncheckedCreateInput>
}

/**
 * WorkLike createMany
 */
export type WorkLikeCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many WorkLikes.
   */
  data: Prisma.WorkLikeCreateManyInput | Prisma.WorkLikeCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * WorkLike createManyAndReturn
 */
export type WorkLikeCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkLike
   */
  select?: Prisma.WorkLikeSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the WorkLike
   */
  omit?: Prisma.WorkLikeOmit<ExtArgs> | null
  /**
   * The data used to create many WorkLikes.
   */
  data: Prisma.WorkLikeCreateManyInput | Prisma.WorkLikeCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkLikeIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * WorkLike update
 */
export type WorkLikeUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkLike
   */
  select?: Prisma.WorkLikeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkLike
   */
  omit?: Prisma.WorkLikeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkLikeInclude<ExtArgs> | null
  /**
   * The data needed to update a WorkLike.
   */
  data: Prisma.XOR<Prisma.WorkLikeUpdateInput, Prisma.WorkLikeUncheckedUpdateInput>
  /**
   * Choose, which WorkLike to update.
   */
  where: Prisma.WorkLikeWhereUniqueInput
}

/**
 * WorkLike updateMany
 */
export type WorkLikeUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update WorkLikes.
   */
  data: Prisma.XOR<Prisma.WorkLikeUpdateManyMutationInput, Prisma.WorkLikeUncheckedUpdateManyInput>
  /**
   * Filter which WorkLikes to update
   */
  where?: Prisma.WorkLikeWhereInput
  /**
   * Limit how many WorkLikes to update.
   */
  limit?: number
}

/**
 * WorkLike updateManyAndReturn
 */
export type WorkLikeUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkLike
   */
  select?: Prisma.WorkLikeSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the WorkLike
   */
  omit?: Prisma.WorkLikeOmit<ExtArgs> | null
  /**
   * The data used to update WorkLikes.
   */
  data: Prisma.XOR<Prisma.WorkLikeUpdateManyMutationInput, Prisma.WorkLikeUncheckedUpdateManyInput>
  /**
   * Filter which WorkLikes to update
   */
  where?: Prisma.WorkLikeWhereInput
  /**
   * Limit how many WorkLikes to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkLikeIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * WorkLike upsert
 */
export type WorkLikeUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkLike
   */
  select?: Prisma.WorkLikeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkLike
   */
  omit?: Prisma.WorkLikeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkLikeInclude<ExtArgs> | null
  /**
   * The filter to search for the WorkLike to update in case it exists.
   */
  where: Prisma.WorkLikeWhereUniqueInput
  /**
   * In case the WorkLike found by the `where` argument doesn't exist, create a new WorkLike with this data.
   */
  create: Prisma.XOR<Prisma.WorkLikeCreateInput, Prisma.WorkLikeUncheckedCreateInput>
  /**
   * In case the WorkLike was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.WorkLikeUpdateInput, Prisma.WorkLikeUncheckedUpdateInput>
}

/**
 * WorkLike delete
 */
export type WorkLikeDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkLike
   */
  select?: Prisma.WorkLikeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkLike
   */
  omit?: Prisma.WorkLikeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkLikeInclude<ExtArgs> | null
  /**
   * Filter which WorkLike to delete.
   */
  where: Prisma.WorkLikeWhereUniqueInput
}

/**
 * WorkLike deleteMany
 */
export type WorkLikeDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which WorkLikes to delete
   */
  where?: Prisma.WorkLikeWhereInput
  /**
   * Limit how many WorkLikes to delete.
   */
  limit?: number
}

/**
 * WorkLike without action
 */
export type WorkLikeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkLike
   */
  select?: Prisma.WorkLikeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkLike
   */
  omit?: Prisma.WorkLikeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkLikeInclude<ExtArgs> | null
}
