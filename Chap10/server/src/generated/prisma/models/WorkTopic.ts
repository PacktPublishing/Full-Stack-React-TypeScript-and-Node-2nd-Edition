
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `WorkTopic` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model WorkTopic
 * 
 */
export type WorkTopicModel = runtime.Types.Result.DefaultSelection<Prisma.$WorkTopicPayload>

export type AggregateWorkTopic = {
  _count: WorkTopicCountAggregateOutputType | null
  _avg: WorkTopicAvgAggregateOutputType | null
  _sum: WorkTopicSumAggregateOutputType | null
  _min: WorkTopicMinAggregateOutputType | null
  _max: WorkTopicMaxAggregateOutputType | null
}

export type WorkTopicAvgAggregateOutputType = {
  id: number | null
  workId: number | null
  topicId: number | null
}

export type WorkTopicSumAggregateOutputType = {
  id: bigint | null
  workId: bigint | null
  topicId: bigint | null
}

export type WorkTopicMinAggregateOutputType = {
  id: bigint | null
  createdAt: Date | null
  updatedAt: Date | null
  workId: bigint | null
  topicId: bigint | null
}

export type WorkTopicMaxAggregateOutputType = {
  id: bigint | null
  createdAt: Date | null
  updatedAt: Date | null
  workId: bigint | null
  topicId: bigint | null
}

export type WorkTopicCountAggregateOutputType = {
  id: number
  createdAt: number
  updatedAt: number
  workId: number
  topicId: number
  _all: number
}


export type WorkTopicAvgAggregateInputType = {
  id?: true
  workId?: true
  topicId?: true
}

export type WorkTopicSumAggregateInputType = {
  id?: true
  workId?: true
  topicId?: true
}

export type WorkTopicMinAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  workId?: true
  topicId?: true
}

export type WorkTopicMaxAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  workId?: true
  topicId?: true
}

export type WorkTopicCountAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  workId?: true
  topicId?: true
  _all?: true
}

export type WorkTopicAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which WorkTopic to aggregate.
   */
  where?: Prisma.WorkTopicWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WorkTopics to fetch.
   */
  orderBy?: Prisma.WorkTopicOrderByWithRelationInput | Prisma.WorkTopicOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.WorkTopicWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WorkTopics from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WorkTopics.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned WorkTopics
  **/
  _count?: true | WorkTopicCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: WorkTopicAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: WorkTopicSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: WorkTopicMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: WorkTopicMaxAggregateInputType
}

export type GetWorkTopicAggregateType<T extends WorkTopicAggregateArgs> = {
      [P in keyof T & keyof AggregateWorkTopic]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateWorkTopic[P]>
    : Prisma.GetScalarType<T[P], AggregateWorkTopic[P]>
}




export type WorkTopicGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.WorkTopicWhereInput
  orderBy?: Prisma.WorkTopicOrderByWithAggregationInput | Prisma.WorkTopicOrderByWithAggregationInput[]
  by: Prisma.WorkTopicScalarFieldEnum[] | Prisma.WorkTopicScalarFieldEnum
  having?: Prisma.WorkTopicScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: WorkTopicCountAggregateInputType | true
  _avg?: WorkTopicAvgAggregateInputType
  _sum?: WorkTopicSumAggregateInputType
  _min?: WorkTopicMinAggregateInputType
  _max?: WorkTopicMaxAggregateInputType
}

export type WorkTopicGroupByOutputType = {
  id: bigint
  createdAt: Date
  updatedAt: Date
  workId: bigint
  topicId: bigint
  _count: WorkTopicCountAggregateOutputType | null
  _avg: WorkTopicAvgAggregateOutputType | null
  _sum: WorkTopicSumAggregateOutputType | null
  _min: WorkTopicMinAggregateOutputType | null
  _max: WorkTopicMaxAggregateOutputType | null
}

type GetWorkTopicGroupByPayload<T extends WorkTopicGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<WorkTopicGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof WorkTopicGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], WorkTopicGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], WorkTopicGroupByOutputType[P]>
      }
    >
  >



export type WorkTopicWhereInput = {
  AND?: Prisma.WorkTopicWhereInput | Prisma.WorkTopicWhereInput[]
  OR?: Prisma.WorkTopicWhereInput[]
  NOT?: Prisma.WorkTopicWhereInput | Prisma.WorkTopicWhereInput[]
  id?: Prisma.BigIntFilter<"WorkTopic"> | bigint | number
  createdAt?: Prisma.DateTimeFilter<"WorkTopic"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"WorkTopic"> | Date | string
  workId?: Prisma.BigIntFilter<"WorkTopic"> | bigint | number
  topicId?: Prisma.BigIntFilter<"WorkTopic"> | bigint | number
  work?: Prisma.XOR<Prisma.WorkScalarRelationFilter, Prisma.WorkWhereInput>
  topic?: Prisma.XOR<Prisma.TopicScalarRelationFilter, Prisma.TopicWhereInput>
}

export type WorkTopicOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  workId?: Prisma.SortOrder
  topicId?: Prisma.SortOrder
  work?: Prisma.WorkOrderByWithRelationInput
  topic?: Prisma.TopicOrderByWithRelationInput
}

export type WorkTopicWhereUniqueInput = Prisma.AtLeast<{
  id?: bigint | number
  AND?: Prisma.WorkTopicWhereInput | Prisma.WorkTopicWhereInput[]
  OR?: Prisma.WorkTopicWhereInput[]
  NOT?: Prisma.WorkTopicWhereInput | Prisma.WorkTopicWhereInput[]
  createdAt?: Prisma.DateTimeFilter<"WorkTopic"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"WorkTopic"> | Date | string
  workId?: Prisma.BigIntFilter<"WorkTopic"> | bigint | number
  topicId?: Prisma.BigIntFilter<"WorkTopic"> | bigint | number
  work?: Prisma.XOR<Prisma.WorkScalarRelationFilter, Prisma.WorkWhereInput>
  topic?: Prisma.XOR<Prisma.TopicScalarRelationFilter, Prisma.TopicWhereInput>
}, "id">

export type WorkTopicOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  workId?: Prisma.SortOrder
  topicId?: Prisma.SortOrder
  _count?: Prisma.WorkTopicCountOrderByAggregateInput
  _avg?: Prisma.WorkTopicAvgOrderByAggregateInput
  _max?: Prisma.WorkTopicMaxOrderByAggregateInput
  _min?: Prisma.WorkTopicMinOrderByAggregateInput
  _sum?: Prisma.WorkTopicSumOrderByAggregateInput
}

export type WorkTopicScalarWhereWithAggregatesInput = {
  AND?: Prisma.WorkTopicScalarWhereWithAggregatesInput | Prisma.WorkTopicScalarWhereWithAggregatesInput[]
  OR?: Prisma.WorkTopicScalarWhereWithAggregatesInput[]
  NOT?: Prisma.WorkTopicScalarWhereWithAggregatesInput | Prisma.WorkTopicScalarWhereWithAggregatesInput[]
  id?: Prisma.BigIntWithAggregatesFilter<"WorkTopic"> | bigint | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"WorkTopic"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"WorkTopic"> | Date | string
  workId?: Prisma.BigIntWithAggregatesFilter<"WorkTopic"> | bigint | number
  topicId?: Prisma.BigIntWithAggregatesFilter<"WorkTopic"> | bigint | number
}

export type WorkTopicCreateInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  work: Prisma.WorkCreateNestedOneWithoutWorkTopicsInput
  topic: Prisma.TopicCreateNestedOneWithoutWorkTopicsInput
}

export type WorkTopicUncheckedCreateInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  workId: bigint | number
  topicId: bigint | number
}

export type WorkTopicUpdateInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  work?: Prisma.WorkUpdateOneRequiredWithoutWorkTopicsNestedInput
  topic?: Prisma.TopicUpdateOneRequiredWithoutWorkTopicsNestedInput
}

export type WorkTopicUncheckedUpdateInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  workId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  topicId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
}

export type WorkTopicCreateManyInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  workId: bigint | number
  topicId: bigint | number
}

export type WorkTopicUpdateManyMutationInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WorkTopicUncheckedUpdateManyInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  workId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  topicId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
}

export type WorkTopicListRelationFilter = {
  every?: Prisma.WorkTopicWhereInput
  some?: Prisma.WorkTopicWhereInput
  none?: Prisma.WorkTopicWhereInput
}

export type WorkTopicOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type WorkTopicCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  workId?: Prisma.SortOrder
  topicId?: Prisma.SortOrder
}

export type WorkTopicAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  workId?: Prisma.SortOrder
  topicId?: Prisma.SortOrder
}

export type WorkTopicMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  workId?: Prisma.SortOrder
  topicId?: Prisma.SortOrder
}

export type WorkTopicMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  workId?: Prisma.SortOrder
  topicId?: Prisma.SortOrder
}

export type WorkTopicSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  workId?: Prisma.SortOrder
  topicId?: Prisma.SortOrder
}

export type WorkTopicCreateNestedManyWithoutWorkInput = {
  create?: Prisma.XOR<Prisma.WorkTopicCreateWithoutWorkInput, Prisma.WorkTopicUncheckedCreateWithoutWorkInput> | Prisma.WorkTopicCreateWithoutWorkInput[] | Prisma.WorkTopicUncheckedCreateWithoutWorkInput[]
  connectOrCreate?: Prisma.WorkTopicCreateOrConnectWithoutWorkInput | Prisma.WorkTopicCreateOrConnectWithoutWorkInput[]
  createMany?: Prisma.WorkTopicCreateManyWorkInputEnvelope
  connect?: Prisma.WorkTopicWhereUniqueInput | Prisma.WorkTopicWhereUniqueInput[]
}

export type WorkTopicUncheckedCreateNestedManyWithoutWorkInput = {
  create?: Prisma.XOR<Prisma.WorkTopicCreateWithoutWorkInput, Prisma.WorkTopicUncheckedCreateWithoutWorkInput> | Prisma.WorkTopicCreateWithoutWorkInput[] | Prisma.WorkTopicUncheckedCreateWithoutWorkInput[]
  connectOrCreate?: Prisma.WorkTopicCreateOrConnectWithoutWorkInput | Prisma.WorkTopicCreateOrConnectWithoutWorkInput[]
  createMany?: Prisma.WorkTopicCreateManyWorkInputEnvelope
  connect?: Prisma.WorkTopicWhereUniqueInput | Prisma.WorkTopicWhereUniqueInput[]
}

export type WorkTopicUpdateManyWithoutWorkNestedInput = {
  create?: Prisma.XOR<Prisma.WorkTopicCreateWithoutWorkInput, Prisma.WorkTopicUncheckedCreateWithoutWorkInput> | Prisma.WorkTopicCreateWithoutWorkInput[] | Prisma.WorkTopicUncheckedCreateWithoutWorkInput[]
  connectOrCreate?: Prisma.WorkTopicCreateOrConnectWithoutWorkInput | Prisma.WorkTopicCreateOrConnectWithoutWorkInput[]
  upsert?: Prisma.WorkTopicUpsertWithWhereUniqueWithoutWorkInput | Prisma.WorkTopicUpsertWithWhereUniqueWithoutWorkInput[]
  createMany?: Prisma.WorkTopicCreateManyWorkInputEnvelope
  set?: Prisma.WorkTopicWhereUniqueInput | Prisma.WorkTopicWhereUniqueInput[]
  disconnect?: Prisma.WorkTopicWhereUniqueInput | Prisma.WorkTopicWhereUniqueInput[]
  delete?: Prisma.WorkTopicWhereUniqueInput | Prisma.WorkTopicWhereUniqueInput[]
  connect?: Prisma.WorkTopicWhereUniqueInput | Prisma.WorkTopicWhereUniqueInput[]
  update?: Prisma.WorkTopicUpdateWithWhereUniqueWithoutWorkInput | Prisma.WorkTopicUpdateWithWhereUniqueWithoutWorkInput[]
  updateMany?: Prisma.WorkTopicUpdateManyWithWhereWithoutWorkInput | Prisma.WorkTopicUpdateManyWithWhereWithoutWorkInput[]
  deleteMany?: Prisma.WorkTopicScalarWhereInput | Prisma.WorkTopicScalarWhereInput[]
}

export type WorkTopicUncheckedUpdateManyWithoutWorkNestedInput = {
  create?: Prisma.XOR<Prisma.WorkTopicCreateWithoutWorkInput, Prisma.WorkTopicUncheckedCreateWithoutWorkInput> | Prisma.WorkTopicCreateWithoutWorkInput[] | Prisma.WorkTopicUncheckedCreateWithoutWorkInput[]
  connectOrCreate?: Prisma.WorkTopicCreateOrConnectWithoutWorkInput | Prisma.WorkTopicCreateOrConnectWithoutWorkInput[]
  upsert?: Prisma.WorkTopicUpsertWithWhereUniqueWithoutWorkInput | Prisma.WorkTopicUpsertWithWhereUniqueWithoutWorkInput[]
  createMany?: Prisma.WorkTopicCreateManyWorkInputEnvelope
  set?: Prisma.WorkTopicWhereUniqueInput | Prisma.WorkTopicWhereUniqueInput[]
  disconnect?: Prisma.WorkTopicWhereUniqueInput | Prisma.WorkTopicWhereUniqueInput[]
  delete?: Prisma.WorkTopicWhereUniqueInput | Prisma.WorkTopicWhereUniqueInput[]
  connect?: Prisma.WorkTopicWhereUniqueInput | Prisma.WorkTopicWhereUniqueInput[]
  update?: Prisma.WorkTopicUpdateWithWhereUniqueWithoutWorkInput | Prisma.WorkTopicUpdateWithWhereUniqueWithoutWorkInput[]
  updateMany?: Prisma.WorkTopicUpdateManyWithWhereWithoutWorkInput | Prisma.WorkTopicUpdateManyWithWhereWithoutWorkInput[]
  deleteMany?: Prisma.WorkTopicScalarWhereInput | Prisma.WorkTopicScalarWhereInput[]
}

export type WorkTopicCreateNestedManyWithoutTopicInput = {
  create?: Prisma.XOR<Prisma.WorkTopicCreateWithoutTopicInput, Prisma.WorkTopicUncheckedCreateWithoutTopicInput> | Prisma.WorkTopicCreateWithoutTopicInput[] | Prisma.WorkTopicUncheckedCreateWithoutTopicInput[]
  connectOrCreate?: Prisma.WorkTopicCreateOrConnectWithoutTopicInput | Prisma.WorkTopicCreateOrConnectWithoutTopicInput[]
  createMany?: Prisma.WorkTopicCreateManyTopicInputEnvelope
  connect?: Prisma.WorkTopicWhereUniqueInput | Prisma.WorkTopicWhereUniqueInput[]
}

export type WorkTopicUncheckedCreateNestedManyWithoutTopicInput = {
  create?: Prisma.XOR<Prisma.WorkTopicCreateWithoutTopicInput, Prisma.WorkTopicUncheckedCreateWithoutTopicInput> | Prisma.WorkTopicCreateWithoutTopicInput[] | Prisma.WorkTopicUncheckedCreateWithoutTopicInput[]
  connectOrCreate?: Prisma.WorkTopicCreateOrConnectWithoutTopicInput | Prisma.WorkTopicCreateOrConnectWithoutTopicInput[]
  createMany?: Prisma.WorkTopicCreateManyTopicInputEnvelope
  connect?: Prisma.WorkTopicWhereUniqueInput | Prisma.WorkTopicWhereUniqueInput[]
}

export type WorkTopicUpdateManyWithoutTopicNestedInput = {
  create?: Prisma.XOR<Prisma.WorkTopicCreateWithoutTopicInput, Prisma.WorkTopicUncheckedCreateWithoutTopicInput> | Prisma.WorkTopicCreateWithoutTopicInput[] | Prisma.WorkTopicUncheckedCreateWithoutTopicInput[]
  connectOrCreate?: Prisma.WorkTopicCreateOrConnectWithoutTopicInput | Prisma.WorkTopicCreateOrConnectWithoutTopicInput[]
  upsert?: Prisma.WorkTopicUpsertWithWhereUniqueWithoutTopicInput | Prisma.WorkTopicUpsertWithWhereUniqueWithoutTopicInput[]
  createMany?: Prisma.WorkTopicCreateManyTopicInputEnvelope
  set?: Prisma.WorkTopicWhereUniqueInput | Prisma.WorkTopicWhereUniqueInput[]
  disconnect?: Prisma.WorkTopicWhereUniqueInput | Prisma.WorkTopicWhereUniqueInput[]
  delete?: Prisma.WorkTopicWhereUniqueInput | Prisma.WorkTopicWhereUniqueInput[]
  connect?: Prisma.WorkTopicWhereUniqueInput | Prisma.WorkTopicWhereUniqueInput[]
  update?: Prisma.WorkTopicUpdateWithWhereUniqueWithoutTopicInput | Prisma.WorkTopicUpdateWithWhereUniqueWithoutTopicInput[]
  updateMany?: Prisma.WorkTopicUpdateManyWithWhereWithoutTopicInput | Prisma.WorkTopicUpdateManyWithWhereWithoutTopicInput[]
  deleteMany?: Prisma.WorkTopicScalarWhereInput | Prisma.WorkTopicScalarWhereInput[]
}

export type WorkTopicUncheckedUpdateManyWithoutTopicNestedInput = {
  create?: Prisma.XOR<Prisma.WorkTopicCreateWithoutTopicInput, Prisma.WorkTopicUncheckedCreateWithoutTopicInput> | Prisma.WorkTopicCreateWithoutTopicInput[] | Prisma.WorkTopicUncheckedCreateWithoutTopicInput[]
  connectOrCreate?: Prisma.WorkTopicCreateOrConnectWithoutTopicInput | Prisma.WorkTopicCreateOrConnectWithoutTopicInput[]
  upsert?: Prisma.WorkTopicUpsertWithWhereUniqueWithoutTopicInput | Prisma.WorkTopicUpsertWithWhereUniqueWithoutTopicInput[]
  createMany?: Prisma.WorkTopicCreateManyTopicInputEnvelope
  set?: Prisma.WorkTopicWhereUniqueInput | Prisma.WorkTopicWhereUniqueInput[]
  disconnect?: Prisma.WorkTopicWhereUniqueInput | Prisma.WorkTopicWhereUniqueInput[]
  delete?: Prisma.WorkTopicWhereUniqueInput | Prisma.WorkTopicWhereUniqueInput[]
  connect?: Prisma.WorkTopicWhereUniqueInput | Prisma.WorkTopicWhereUniqueInput[]
  update?: Prisma.WorkTopicUpdateWithWhereUniqueWithoutTopicInput | Prisma.WorkTopicUpdateWithWhereUniqueWithoutTopicInput[]
  updateMany?: Prisma.WorkTopicUpdateManyWithWhereWithoutTopicInput | Prisma.WorkTopicUpdateManyWithWhereWithoutTopicInput[]
  deleteMany?: Prisma.WorkTopicScalarWhereInput | Prisma.WorkTopicScalarWhereInput[]
}

export type WorkTopicCreateWithoutWorkInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  topic: Prisma.TopicCreateNestedOneWithoutWorkTopicsInput
}

export type WorkTopicUncheckedCreateWithoutWorkInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  topicId: bigint | number
}

export type WorkTopicCreateOrConnectWithoutWorkInput = {
  where: Prisma.WorkTopicWhereUniqueInput
  create: Prisma.XOR<Prisma.WorkTopicCreateWithoutWorkInput, Prisma.WorkTopicUncheckedCreateWithoutWorkInput>
}

export type WorkTopicCreateManyWorkInputEnvelope = {
  data: Prisma.WorkTopicCreateManyWorkInput | Prisma.WorkTopicCreateManyWorkInput[]
  skipDuplicates?: boolean
}

export type WorkTopicUpsertWithWhereUniqueWithoutWorkInput = {
  where: Prisma.WorkTopicWhereUniqueInput
  update: Prisma.XOR<Prisma.WorkTopicUpdateWithoutWorkInput, Prisma.WorkTopicUncheckedUpdateWithoutWorkInput>
  create: Prisma.XOR<Prisma.WorkTopicCreateWithoutWorkInput, Prisma.WorkTopicUncheckedCreateWithoutWorkInput>
}

export type WorkTopicUpdateWithWhereUniqueWithoutWorkInput = {
  where: Prisma.WorkTopicWhereUniqueInput
  data: Prisma.XOR<Prisma.WorkTopicUpdateWithoutWorkInput, Prisma.WorkTopicUncheckedUpdateWithoutWorkInput>
}

export type WorkTopicUpdateManyWithWhereWithoutWorkInput = {
  where: Prisma.WorkTopicScalarWhereInput
  data: Prisma.XOR<Prisma.WorkTopicUpdateManyMutationInput, Prisma.WorkTopicUncheckedUpdateManyWithoutWorkInput>
}

export type WorkTopicScalarWhereInput = {
  AND?: Prisma.WorkTopicScalarWhereInput | Prisma.WorkTopicScalarWhereInput[]
  OR?: Prisma.WorkTopicScalarWhereInput[]
  NOT?: Prisma.WorkTopicScalarWhereInput | Prisma.WorkTopicScalarWhereInput[]
  id?: Prisma.BigIntFilter<"WorkTopic"> | bigint | number
  createdAt?: Prisma.DateTimeFilter<"WorkTopic"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"WorkTopic"> | Date | string
  workId?: Prisma.BigIntFilter<"WorkTopic"> | bigint | number
  topicId?: Prisma.BigIntFilter<"WorkTopic"> | bigint | number
}

export type WorkTopicCreateWithoutTopicInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  work: Prisma.WorkCreateNestedOneWithoutWorkTopicsInput
}

export type WorkTopicUncheckedCreateWithoutTopicInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  workId: bigint | number
}

export type WorkTopicCreateOrConnectWithoutTopicInput = {
  where: Prisma.WorkTopicWhereUniqueInput
  create: Prisma.XOR<Prisma.WorkTopicCreateWithoutTopicInput, Prisma.WorkTopicUncheckedCreateWithoutTopicInput>
}

export type WorkTopicCreateManyTopicInputEnvelope = {
  data: Prisma.WorkTopicCreateManyTopicInput | Prisma.WorkTopicCreateManyTopicInput[]
  skipDuplicates?: boolean
}

export type WorkTopicUpsertWithWhereUniqueWithoutTopicInput = {
  where: Prisma.WorkTopicWhereUniqueInput
  update: Prisma.XOR<Prisma.WorkTopicUpdateWithoutTopicInput, Prisma.WorkTopicUncheckedUpdateWithoutTopicInput>
  create: Prisma.XOR<Prisma.WorkTopicCreateWithoutTopicInput, Prisma.WorkTopicUncheckedCreateWithoutTopicInput>
}

export type WorkTopicUpdateWithWhereUniqueWithoutTopicInput = {
  where: Prisma.WorkTopicWhereUniqueInput
  data: Prisma.XOR<Prisma.WorkTopicUpdateWithoutTopicInput, Prisma.WorkTopicUncheckedUpdateWithoutTopicInput>
}

export type WorkTopicUpdateManyWithWhereWithoutTopicInput = {
  where: Prisma.WorkTopicScalarWhereInput
  data: Prisma.XOR<Prisma.WorkTopicUpdateManyMutationInput, Prisma.WorkTopicUncheckedUpdateManyWithoutTopicInput>
}

export type WorkTopicCreateManyWorkInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  topicId: bigint | number
}

export type WorkTopicUpdateWithoutWorkInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  topic?: Prisma.TopicUpdateOneRequiredWithoutWorkTopicsNestedInput
}

export type WorkTopicUncheckedUpdateWithoutWorkInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  topicId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
}

export type WorkTopicUncheckedUpdateManyWithoutWorkInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  topicId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
}

export type WorkTopicCreateManyTopicInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  workId: bigint | number
}

export type WorkTopicUpdateWithoutTopicInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  work?: Prisma.WorkUpdateOneRequiredWithoutWorkTopicsNestedInput
}

export type WorkTopicUncheckedUpdateWithoutTopicInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  workId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
}

export type WorkTopicUncheckedUpdateManyWithoutTopicInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  workId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
}



export type WorkTopicSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  workId?: boolean
  topicId?: boolean
  work?: boolean | Prisma.WorkDefaultArgs<ExtArgs>
  topic?: boolean | Prisma.TopicDefaultArgs<ExtArgs>
}, ExtArgs["result"]["workTopic"]>

export type WorkTopicSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  workId?: boolean
  topicId?: boolean
  work?: boolean | Prisma.WorkDefaultArgs<ExtArgs>
  topic?: boolean | Prisma.TopicDefaultArgs<ExtArgs>
}, ExtArgs["result"]["workTopic"]>

export type WorkTopicSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  workId?: boolean
  topicId?: boolean
  work?: boolean | Prisma.WorkDefaultArgs<ExtArgs>
  topic?: boolean | Prisma.TopicDefaultArgs<ExtArgs>
}, ExtArgs["result"]["workTopic"]>

export type WorkTopicSelectScalar = {
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  workId?: boolean
  topicId?: boolean
}

export type WorkTopicOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "workId" | "topicId", ExtArgs["result"]["workTopic"]>
export type WorkTopicInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  work?: boolean | Prisma.WorkDefaultArgs<ExtArgs>
  topic?: boolean | Prisma.TopicDefaultArgs<ExtArgs>
}
export type WorkTopicIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  work?: boolean | Prisma.WorkDefaultArgs<ExtArgs>
  topic?: boolean | Prisma.TopicDefaultArgs<ExtArgs>
}
export type WorkTopicIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  work?: boolean | Prisma.WorkDefaultArgs<ExtArgs>
  topic?: boolean | Prisma.TopicDefaultArgs<ExtArgs>
}

export type $WorkTopicPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "WorkTopic"
  objects: {
    work: Prisma.$WorkPayload<ExtArgs>
    topic: Prisma.$TopicPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: bigint
    createdAt: Date
    updatedAt: Date
    workId: bigint
    topicId: bigint
  }, ExtArgs["result"]["workTopic"]>
  composites: {}
}

export type WorkTopicGetPayload<S extends boolean | null | undefined | WorkTopicDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$WorkTopicPayload, S>

export type WorkTopicCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<WorkTopicFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: WorkTopicCountAggregateInputType | true
  }

export interface WorkTopicDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkTopic'], meta: { name: 'WorkTopic' } }
  /**
   * Find zero or one WorkTopic that matches the filter.
   * @param {WorkTopicFindUniqueArgs} args - Arguments to find a WorkTopic
   * @example
   * // Get one WorkTopic
   * const workTopic = await prisma.workTopic.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends WorkTopicFindUniqueArgs>(args: Prisma.SelectSubset<T, WorkTopicFindUniqueArgs<ExtArgs>>): Prisma.Prisma__WorkTopicClient<runtime.Types.Result.GetResult<Prisma.$WorkTopicPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one WorkTopic that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {WorkTopicFindUniqueOrThrowArgs} args - Arguments to find a WorkTopic
   * @example
   * // Get one WorkTopic
   * const workTopic = await prisma.workTopic.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends WorkTopicFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, WorkTopicFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__WorkTopicClient<runtime.Types.Result.GetResult<Prisma.$WorkTopicPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first WorkTopic that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkTopicFindFirstArgs} args - Arguments to find a WorkTopic
   * @example
   * // Get one WorkTopic
   * const workTopic = await prisma.workTopic.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends WorkTopicFindFirstArgs>(args?: Prisma.SelectSubset<T, WorkTopicFindFirstArgs<ExtArgs>>): Prisma.Prisma__WorkTopicClient<runtime.Types.Result.GetResult<Prisma.$WorkTopicPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first WorkTopic that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkTopicFindFirstOrThrowArgs} args - Arguments to find a WorkTopic
   * @example
   * // Get one WorkTopic
   * const workTopic = await prisma.workTopic.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends WorkTopicFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, WorkTopicFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__WorkTopicClient<runtime.Types.Result.GetResult<Prisma.$WorkTopicPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more WorkTopics that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkTopicFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all WorkTopics
   * const workTopics = await prisma.workTopic.findMany()
   * 
   * // Get first 10 WorkTopics
   * const workTopics = await prisma.workTopic.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const workTopicWithIdOnly = await prisma.workTopic.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends WorkTopicFindManyArgs>(args?: Prisma.SelectSubset<T, WorkTopicFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WorkTopicPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a WorkTopic.
   * @param {WorkTopicCreateArgs} args - Arguments to create a WorkTopic.
   * @example
   * // Create one WorkTopic
   * const WorkTopic = await prisma.workTopic.create({
   *   data: {
   *     // ... data to create a WorkTopic
   *   }
   * })
   * 
   */
  create<T extends WorkTopicCreateArgs>(args: Prisma.SelectSubset<T, WorkTopicCreateArgs<ExtArgs>>): Prisma.Prisma__WorkTopicClient<runtime.Types.Result.GetResult<Prisma.$WorkTopicPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many WorkTopics.
   * @param {WorkTopicCreateManyArgs} args - Arguments to create many WorkTopics.
   * @example
   * // Create many WorkTopics
   * const workTopic = await prisma.workTopic.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends WorkTopicCreateManyArgs>(args?: Prisma.SelectSubset<T, WorkTopicCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many WorkTopics and returns the data saved in the database.
   * @param {WorkTopicCreateManyAndReturnArgs} args - Arguments to create many WorkTopics.
   * @example
   * // Create many WorkTopics
   * const workTopic = await prisma.workTopic.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many WorkTopics and only return the `id`
   * const workTopicWithIdOnly = await prisma.workTopic.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends WorkTopicCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, WorkTopicCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WorkTopicPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a WorkTopic.
   * @param {WorkTopicDeleteArgs} args - Arguments to delete one WorkTopic.
   * @example
   * // Delete one WorkTopic
   * const WorkTopic = await prisma.workTopic.delete({
   *   where: {
   *     // ... filter to delete one WorkTopic
   *   }
   * })
   * 
   */
  delete<T extends WorkTopicDeleteArgs>(args: Prisma.SelectSubset<T, WorkTopicDeleteArgs<ExtArgs>>): Prisma.Prisma__WorkTopicClient<runtime.Types.Result.GetResult<Prisma.$WorkTopicPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one WorkTopic.
   * @param {WorkTopicUpdateArgs} args - Arguments to update one WorkTopic.
   * @example
   * // Update one WorkTopic
   * const workTopic = await prisma.workTopic.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends WorkTopicUpdateArgs>(args: Prisma.SelectSubset<T, WorkTopicUpdateArgs<ExtArgs>>): Prisma.Prisma__WorkTopicClient<runtime.Types.Result.GetResult<Prisma.$WorkTopicPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more WorkTopics.
   * @param {WorkTopicDeleteManyArgs} args - Arguments to filter WorkTopics to delete.
   * @example
   * // Delete a few WorkTopics
   * const { count } = await prisma.workTopic.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends WorkTopicDeleteManyArgs>(args?: Prisma.SelectSubset<T, WorkTopicDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more WorkTopics.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkTopicUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many WorkTopics
   * const workTopic = await prisma.workTopic.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends WorkTopicUpdateManyArgs>(args: Prisma.SelectSubset<T, WorkTopicUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more WorkTopics and returns the data updated in the database.
   * @param {WorkTopicUpdateManyAndReturnArgs} args - Arguments to update many WorkTopics.
   * @example
   * // Update many WorkTopics
   * const workTopic = await prisma.workTopic.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more WorkTopics and only return the `id`
   * const workTopicWithIdOnly = await prisma.workTopic.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends WorkTopicUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, WorkTopicUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WorkTopicPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one WorkTopic.
   * @param {WorkTopicUpsertArgs} args - Arguments to update or create a WorkTopic.
   * @example
   * // Update or create a WorkTopic
   * const workTopic = await prisma.workTopic.upsert({
   *   create: {
   *     // ... data to create a WorkTopic
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the WorkTopic we want to update
   *   }
   * })
   */
  upsert<T extends WorkTopicUpsertArgs>(args: Prisma.SelectSubset<T, WorkTopicUpsertArgs<ExtArgs>>): Prisma.Prisma__WorkTopicClient<runtime.Types.Result.GetResult<Prisma.$WorkTopicPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of WorkTopics.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkTopicCountArgs} args - Arguments to filter WorkTopics to count.
   * @example
   * // Count the number of WorkTopics
   * const count = await prisma.workTopic.count({
   *   where: {
   *     // ... the filter for the WorkTopics we want to count
   *   }
   * })
  **/
  count<T extends WorkTopicCountArgs>(
    args?: Prisma.Subset<T, WorkTopicCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], WorkTopicCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a WorkTopic.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkTopicAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends WorkTopicAggregateArgs>(args: Prisma.Subset<T, WorkTopicAggregateArgs>): Prisma.PrismaPromise<GetWorkTopicAggregateType<T>>

  /**
   * Group by WorkTopic.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkTopicGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends WorkTopicGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: WorkTopicGroupByArgs['orderBy'] }
      : { orderBy?: WorkTopicGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, WorkTopicGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkTopicGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the WorkTopic model
 */
readonly fields: WorkTopicFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for WorkTopic.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__WorkTopicClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  work<T extends Prisma.WorkDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.WorkDefaultArgs<ExtArgs>>): Prisma.Prisma__WorkClient<runtime.Types.Result.GetResult<Prisma.$WorkPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  topic<T extends Prisma.TopicDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TopicDefaultArgs<ExtArgs>>): Prisma.Prisma__TopicClient<runtime.Types.Result.GetResult<Prisma.$TopicPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the WorkTopic model
 */
export interface WorkTopicFieldRefs {
  readonly id: Prisma.FieldRef<"WorkTopic", 'BigInt'>
  readonly createdAt: Prisma.FieldRef<"WorkTopic", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"WorkTopic", 'DateTime'>
  readonly workId: Prisma.FieldRef<"WorkTopic", 'BigInt'>
  readonly topicId: Prisma.FieldRef<"WorkTopic", 'BigInt'>
}
    

// Custom InputTypes
/**
 * WorkTopic findUnique
 */
export type WorkTopicFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkTopic
   */
  select?: Prisma.WorkTopicSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkTopic
   */
  omit?: Prisma.WorkTopicOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkTopicInclude<ExtArgs> | null
  /**
   * Filter, which WorkTopic to fetch.
   */
  where: Prisma.WorkTopicWhereUniqueInput
}

/**
 * WorkTopic findUniqueOrThrow
 */
export type WorkTopicFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkTopic
   */
  select?: Prisma.WorkTopicSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkTopic
   */
  omit?: Prisma.WorkTopicOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkTopicInclude<ExtArgs> | null
  /**
   * Filter, which WorkTopic to fetch.
   */
  where: Prisma.WorkTopicWhereUniqueInput
}

/**
 * WorkTopic findFirst
 */
export type WorkTopicFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkTopic
   */
  select?: Prisma.WorkTopicSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkTopic
   */
  omit?: Prisma.WorkTopicOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkTopicInclude<ExtArgs> | null
  /**
   * Filter, which WorkTopic to fetch.
   */
  where?: Prisma.WorkTopicWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WorkTopics to fetch.
   */
  orderBy?: Prisma.WorkTopicOrderByWithRelationInput | Prisma.WorkTopicOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for WorkTopics.
   */
  cursor?: Prisma.WorkTopicWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WorkTopics from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WorkTopics.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of WorkTopics.
   */
  distinct?: Prisma.WorkTopicScalarFieldEnum | Prisma.WorkTopicScalarFieldEnum[]
}

/**
 * WorkTopic findFirstOrThrow
 */
export type WorkTopicFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkTopic
   */
  select?: Prisma.WorkTopicSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkTopic
   */
  omit?: Prisma.WorkTopicOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkTopicInclude<ExtArgs> | null
  /**
   * Filter, which WorkTopic to fetch.
   */
  where?: Prisma.WorkTopicWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WorkTopics to fetch.
   */
  orderBy?: Prisma.WorkTopicOrderByWithRelationInput | Prisma.WorkTopicOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for WorkTopics.
   */
  cursor?: Prisma.WorkTopicWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WorkTopics from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WorkTopics.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of WorkTopics.
   */
  distinct?: Prisma.WorkTopicScalarFieldEnum | Prisma.WorkTopicScalarFieldEnum[]
}

/**
 * WorkTopic findMany
 */
export type WorkTopicFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkTopic
   */
  select?: Prisma.WorkTopicSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkTopic
   */
  omit?: Prisma.WorkTopicOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkTopicInclude<ExtArgs> | null
  /**
   * Filter, which WorkTopics to fetch.
   */
  where?: Prisma.WorkTopicWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WorkTopics to fetch.
   */
  orderBy?: Prisma.WorkTopicOrderByWithRelationInput | Prisma.WorkTopicOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing WorkTopics.
   */
  cursor?: Prisma.WorkTopicWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WorkTopics from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WorkTopics.
   */
  skip?: number
  distinct?: Prisma.WorkTopicScalarFieldEnum | Prisma.WorkTopicScalarFieldEnum[]
}

/**
 * WorkTopic create
 */
export type WorkTopicCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkTopic
   */
  select?: Prisma.WorkTopicSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkTopic
   */
  omit?: Prisma.WorkTopicOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkTopicInclude<ExtArgs> | null
  /**
   * The data needed to create a WorkTopic.
   */
  data: Prisma.XOR<Prisma.WorkTopicCreateInput, Prisma.WorkTopicUncheckedCreateInput>
}

/**
 * WorkTopic createMany
 */
export type WorkTopicCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many WorkTopics.
   */
  data: Prisma.WorkTopicCreateManyInput | Prisma.WorkTopicCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * WorkTopic createManyAndReturn
 */
export type WorkTopicCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkTopic
   */
  select?: Prisma.WorkTopicSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the WorkTopic
   */
  omit?: Prisma.WorkTopicOmit<ExtArgs> | null
  /**
   * The data used to create many WorkTopics.
   */
  data: Prisma.WorkTopicCreateManyInput | Prisma.WorkTopicCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkTopicIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * WorkTopic update
 */
export type WorkTopicUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkTopic
   */
  select?: Prisma.WorkTopicSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkTopic
   */
  omit?: Prisma.WorkTopicOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkTopicInclude<ExtArgs> | null
  /**
   * The data needed to update a WorkTopic.
   */
  data: Prisma.XOR<Prisma.WorkTopicUpdateInput, Prisma.WorkTopicUncheckedUpdateInput>
  /**
   * Choose, which WorkTopic to update.
   */
  where: Prisma.WorkTopicWhereUniqueInput
}

/**
 * WorkTopic updateMany
 */
export type WorkTopicUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update WorkTopics.
   */
  data: Prisma.XOR<Prisma.WorkTopicUpdateManyMutationInput, Prisma.WorkTopicUncheckedUpdateManyInput>
  /**
   * Filter which WorkTopics to update
   */
  where?: Prisma.WorkTopicWhereInput
  /**
   * Limit how many WorkTopics to update.
   */
  limit?: number
}

/**
 * WorkTopic updateManyAndReturn
 */
export type WorkTopicUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkTopic
   */
  select?: Prisma.WorkTopicSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the WorkTopic
   */
  omit?: Prisma.WorkTopicOmit<ExtArgs> | null
  /**
   * The data used to update WorkTopics.
   */
  data: Prisma.XOR<Prisma.WorkTopicUpdateManyMutationInput, Prisma.WorkTopicUncheckedUpdateManyInput>
  /**
   * Filter which WorkTopics to update
   */
  where?: Prisma.WorkTopicWhereInput
  /**
   * Limit how many WorkTopics to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkTopicIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * WorkTopic upsert
 */
export type WorkTopicUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkTopic
   */
  select?: Prisma.WorkTopicSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkTopic
   */
  omit?: Prisma.WorkTopicOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkTopicInclude<ExtArgs> | null
  /**
   * The filter to search for the WorkTopic to update in case it exists.
   */
  where: Prisma.WorkTopicWhereUniqueInput
  /**
   * In case the WorkTopic found by the `where` argument doesn't exist, create a new WorkTopic with this data.
   */
  create: Prisma.XOR<Prisma.WorkTopicCreateInput, Prisma.WorkTopicUncheckedCreateInput>
  /**
   * In case the WorkTopic was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.WorkTopicUpdateInput, Prisma.WorkTopicUncheckedUpdateInput>
}

/**
 * WorkTopic delete
 */
export type WorkTopicDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkTopic
   */
  select?: Prisma.WorkTopicSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkTopic
   */
  omit?: Prisma.WorkTopicOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkTopicInclude<ExtArgs> | null
  /**
   * Filter which WorkTopic to delete.
   */
  where: Prisma.WorkTopicWhereUniqueInput
}

/**
 * WorkTopic deleteMany
 */
export type WorkTopicDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which WorkTopics to delete
   */
  where?: Prisma.WorkTopicWhereInput
  /**
   * Limit how many WorkTopics to delete.
   */
  limit?: number
}

/**
 * WorkTopic without action
 */
export type WorkTopicDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkTopic
   */
  select?: Prisma.WorkTopicSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkTopic
   */
  omit?: Prisma.WorkTopicOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkTopicInclude<ExtArgs> | null
}
