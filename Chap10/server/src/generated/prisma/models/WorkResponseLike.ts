
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `WorkResponseLike` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model WorkResponseLike
 * 
 */
export type WorkResponseLikeModel = runtime.Types.Result.DefaultSelection<Prisma.$WorkResponseLikePayload>

export type AggregateWorkResponseLike = {
  _count: WorkResponseLikeCountAggregateOutputType | null
  _avg: WorkResponseLikeAvgAggregateOutputType | null
  _sum: WorkResponseLikeSumAggregateOutputType | null
  _min: WorkResponseLikeMinAggregateOutputType | null
  _max: WorkResponseLikeMaxAggregateOutputType | null
}

export type WorkResponseLikeAvgAggregateOutputType = {
  id: number | null
  workResponseId: number | null
  likerId: number | null
}

export type WorkResponseLikeSumAggregateOutputType = {
  id: bigint | null
  workResponseId: bigint | null
  likerId: bigint | null
}

export type WorkResponseLikeMinAggregateOutputType = {
  id: bigint | null
  createdAt: Date | null
  updatedAt: Date | null
  workResponseId: bigint | null
  likerId: bigint | null
}

export type WorkResponseLikeMaxAggregateOutputType = {
  id: bigint | null
  createdAt: Date | null
  updatedAt: Date | null
  workResponseId: bigint | null
  likerId: bigint | null
}

export type WorkResponseLikeCountAggregateOutputType = {
  id: number
  createdAt: number
  updatedAt: number
  workResponseId: number
  likerId: number
  _all: number
}


export type WorkResponseLikeAvgAggregateInputType = {
  id?: true
  workResponseId?: true
  likerId?: true
}

export type WorkResponseLikeSumAggregateInputType = {
  id?: true
  workResponseId?: true
  likerId?: true
}

export type WorkResponseLikeMinAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  workResponseId?: true
  likerId?: true
}

export type WorkResponseLikeMaxAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  workResponseId?: true
  likerId?: true
}

export type WorkResponseLikeCountAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  workResponseId?: true
  likerId?: true
  _all?: true
}

export type WorkResponseLikeAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which WorkResponseLike to aggregate.
   */
  where?: Prisma.WorkResponseLikeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WorkResponseLikes to fetch.
   */
  orderBy?: Prisma.WorkResponseLikeOrderByWithRelationInput | Prisma.WorkResponseLikeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.WorkResponseLikeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WorkResponseLikes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WorkResponseLikes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned WorkResponseLikes
  **/
  _count?: true | WorkResponseLikeCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: WorkResponseLikeAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: WorkResponseLikeSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: WorkResponseLikeMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: WorkResponseLikeMaxAggregateInputType
}

export type GetWorkResponseLikeAggregateType<T extends WorkResponseLikeAggregateArgs> = {
      [P in keyof T & keyof AggregateWorkResponseLike]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateWorkResponseLike[P]>
    : Prisma.GetScalarType<T[P], AggregateWorkResponseLike[P]>
}




export type WorkResponseLikeGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.WorkResponseLikeWhereInput
  orderBy?: Prisma.WorkResponseLikeOrderByWithAggregationInput | Prisma.WorkResponseLikeOrderByWithAggregationInput[]
  by: Prisma.WorkResponseLikeScalarFieldEnum[] | Prisma.WorkResponseLikeScalarFieldEnum
  having?: Prisma.WorkResponseLikeScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: WorkResponseLikeCountAggregateInputType | true
  _avg?: WorkResponseLikeAvgAggregateInputType
  _sum?: WorkResponseLikeSumAggregateInputType
  _min?: WorkResponseLikeMinAggregateInputType
  _max?: WorkResponseLikeMaxAggregateInputType
}

export type WorkResponseLikeGroupByOutputType = {
  id: bigint
  createdAt: Date
  updatedAt: Date
  workResponseId: bigint
  likerId: bigint
  _count: WorkResponseLikeCountAggregateOutputType | null
  _avg: WorkResponseLikeAvgAggregateOutputType | null
  _sum: WorkResponseLikeSumAggregateOutputType | null
  _min: WorkResponseLikeMinAggregateOutputType | null
  _max: WorkResponseLikeMaxAggregateOutputType | null
}

type GetWorkResponseLikeGroupByPayload<T extends WorkResponseLikeGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<WorkResponseLikeGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof WorkResponseLikeGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], WorkResponseLikeGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], WorkResponseLikeGroupByOutputType[P]>
      }
    >
  >



export type WorkResponseLikeWhereInput = {
  AND?: Prisma.WorkResponseLikeWhereInput | Prisma.WorkResponseLikeWhereInput[]
  OR?: Prisma.WorkResponseLikeWhereInput[]
  NOT?: Prisma.WorkResponseLikeWhereInput | Prisma.WorkResponseLikeWhereInput[]
  id?: Prisma.BigIntFilter<"WorkResponseLike"> | bigint | number
  createdAt?: Prisma.DateTimeFilter<"WorkResponseLike"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"WorkResponseLike"> | Date | string
  workResponseId?: Prisma.BigIntFilter<"WorkResponseLike"> | bigint | number
  likerId?: Prisma.BigIntFilter<"WorkResponseLike"> | bigint | number
  workResponse?: Prisma.XOR<Prisma.WorkResponseScalarRelationFilter, Prisma.WorkResponseWhereInput>
  liker?: Prisma.XOR<Prisma.ProfileScalarRelationFilter, Prisma.ProfileWhereInput>
}

export type WorkResponseLikeOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  workResponseId?: Prisma.SortOrder
  likerId?: Prisma.SortOrder
  workResponse?: Prisma.WorkResponseOrderByWithRelationInput
  liker?: Prisma.ProfileOrderByWithRelationInput
}

export type WorkResponseLikeWhereUniqueInput = Prisma.AtLeast<{
  id?: bigint | number
  AND?: Prisma.WorkResponseLikeWhereInput | Prisma.WorkResponseLikeWhereInput[]
  OR?: Prisma.WorkResponseLikeWhereInput[]
  NOT?: Prisma.WorkResponseLikeWhereInput | Prisma.WorkResponseLikeWhereInput[]
  createdAt?: Prisma.DateTimeFilter<"WorkResponseLike"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"WorkResponseLike"> | Date | string
  workResponseId?: Prisma.BigIntFilter<"WorkResponseLike"> | bigint | number
  likerId?: Prisma.BigIntFilter<"WorkResponseLike"> | bigint | number
  workResponse?: Prisma.XOR<Prisma.WorkResponseScalarRelationFilter, Prisma.WorkResponseWhereInput>
  liker?: Prisma.XOR<Prisma.ProfileScalarRelationFilter, Prisma.ProfileWhereInput>
}, "id">

export type WorkResponseLikeOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  workResponseId?: Prisma.SortOrder
  likerId?: Prisma.SortOrder
  _count?: Prisma.WorkResponseLikeCountOrderByAggregateInput
  _avg?: Prisma.WorkResponseLikeAvgOrderByAggregateInput
  _max?: Prisma.WorkResponseLikeMaxOrderByAggregateInput
  _min?: Prisma.WorkResponseLikeMinOrderByAggregateInput
  _sum?: Prisma.WorkResponseLikeSumOrderByAggregateInput
}

export type WorkResponseLikeScalarWhereWithAggregatesInput = {
  AND?: Prisma.WorkResponseLikeScalarWhereWithAggregatesInput | Prisma.WorkResponseLikeScalarWhereWithAggregatesInput[]
  OR?: Prisma.WorkResponseLikeScalarWhereWithAggregatesInput[]
  NOT?: Prisma.WorkResponseLikeScalarWhereWithAggregatesInput | Prisma.WorkResponseLikeScalarWhereWithAggregatesInput[]
  id?: Prisma.BigIntWithAggregatesFilter<"WorkResponseLike"> | bigint | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"WorkResponseLike"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"WorkResponseLike"> | Date | string
  workResponseId?: Prisma.BigIntWithAggregatesFilter<"WorkResponseLike"> | bigint | number
  likerId?: Prisma.BigIntWithAggregatesFilter<"WorkResponseLike"> | bigint | number
}

export type WorkResponseLikeCreateInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  workResponse: Prisma.WorkResponseCreateNestedOneWithoutWorkResponseLikesInput
  liker: Prisma.ProfileCreateNestedOneWithoutWorkResponseLikesInput
}

export type WorkResponseLikeUncheckedCreateInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  workResponseId: bigint | number
  likerId: bigint | number
}

export type WorkResponseLikeUpdateInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  workResponse?: Prisma.WorkResponseUpdateOneRequiredWithoutWorkResponseLikesNestedInput
  liker?: Prisma.ProfileUpdateOneRequiredWithoutWorkResponseLikesNestedInput
}

export type WorkResponseLikeUncheckedUpdateInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  workResponseId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  likerId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
}

export type WorkResponseLikeCreateManyInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  workResponseId: bigint | number
  likerId: bigint | number
}

export type WorkResponseLikeUpdateManyMutationInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type WorkResponseLikeUncheckedUpdateManyInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  workResponseId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  likerId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
}

export type WorkResponseLikeListRelationFilter = {
  every?: Prisma.WorkResponseLikeWhereInput
  some?: Prisma.WorkResponseLikeWhereInput
  none?: Prisma.WorkResponseLikeWhereInput
}

export type WorkResponseLikeOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type WorkResponseLikeCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  workResponseId?: Prisma.SortOrder
  likerId?: Prisma.SortOrder
}

export type WorkResponseLikeAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  workResponseId?: Prisma.SortOrder
  likerId?: Prisma.SortOrder
}

export type WorkResponseLikeMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  workResponseId?: Prisma.SortOrder
  likerId?: Prisma.SortOrder
}

export type WorkResponseLikeMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  workResponseId?: Prisma.SortOrder
  likerId?: Prisma.SortOrder
}

export type WorkResponseLikeSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  workResponseId?: Prisma.SortOrder
  likerId?: Prisma.SortOrder
}

export type WorkResponseLikeCreateNestedManyWithoutLikerInput = {
  create?: Prisma.XOR<Prisma.WorkResponseLikeCreateWithoutLikerInput, Prisma.WorkResponseLikeUncheckedCreateWithoutLikerInput> | Prisma.WorkResponseLikeCreateWithoutLikerInput[] | Prisma.WorkResponseLikeUncheckedCreateWithoutLikerInput[]
  connectOrCreate?: Prisma.WorkResponseLikeCreateOrConnectWithoutLikerInput | Prisma.WorkResponseLikeCreateOrConnectWithoutLikerInput[]
  createMany?: Prisma.WorkResponseLikeCreateManyLikerInputEnvelope
  connect?: Prisma.WorkResponseLikeWhereUniqueInput | Prisma.WorkResponseLikeWhereUniqueInput[]
}

export type WorkResponseLikeUncheckedCreateNestedManyWithoutLikerInput = {
  create?: Prisma.XOR<Prisma.WorkResponseLikeCreateWithoutLikerInput, Prisma.WorkResponseLikeUncheckedCreateWithoutLikerInput> | Prisma.WorkResponseLikeCreateWithoutLikerInput[] | Prisma.WorkResponseLikeUncheckedCreateWithoutLikerInput[]
  connectOrCreate?: Prisma.WorkResponseLikeCreateOrConnectWithoutLikerInput | Prisma.WorkResponseLikeCreateOrConnectWithoutLikerInput[]
  createMany?: Prisma.WorkResponseLikeCreateManyLikerInputEnvelope
  connect?: Prisma.WorkResponseLikeWhereUniqueInput | Prisma.WorkResponseLikeWhereUniqueInput[]
}

export type WorkResponseLikeUpdateManyWithoutLikerNestedInput = {
  create?: Prisma.XOR<Prisma.WorkResponseLikeCreateWithoutLikerInput, Prisma.WorkResponseLikeUncheckedCreateWithoutLikerInput> | Prisma.WorkResponseLikeCreateWithoutLikerInput[] | Prisma.WorkResponseLikeUncheckedCreateWithoutLikerInput[]
  connectOrCreate?: Prisma.WorkResponseLikeCreateOrConnectWithoutLikerInput | Prisma.WorkResponseLikeCreateOrConnectWithoutLikerInput[]
  upsert?: Prisma.WorkResponseLikeUpsertWithWhereUniqueWithoutLikerInput | Prisma.WorkResponseLikeUpsertWithWhereUniqueWithoutLikerInput[]
  createMany?: Prisma.WorkResponseLikeCreateManyLikerInputEnvelope
  set?: Prisma.WorkResponseLikeWhereUniqueInput | Prisma.WorkResponseLikeWhereUniqueInput[]
  disconnect?: Prisma.WorkResponseLikeWhereUniqueInput | Prisma.WorkResponseLikeWhereUniqueInput[]
  delete?: Prisma.WorkResponseLikeWhereUniqueInput | Prisma.WorkResponseLikeWhereUniqueInput[]
  connect?: Prisma.WorkResponseLikeWhereUniqueInput | Prisma.WorkResponseLikeWhereUniqueInput[]
  update?: Prisma.WorkResponseLikeUpdateWithWhereUniqueWithoutLikerInput | Prisma.WorkResponseLikeUpdateWithWhereUniqueWithoutLikerInput[]
  updateMany?: Prisma.WorkResponseLikeUpdateManyWithWhereWithoutLikerInput | Prisma.WorkResponseLikeUpdateManyWithWhereWithoutLikerInput[]
  deleteMany?: Prisma.WorkResponseLikeScalarWhereInput | Prisma.WorkResponseLikeScalarWhereInput[]
}

export type WorkResponseLikeUncheckedUpdateManyWithoutLikerNestedInput = {
  create?: Prisma.XOR<Prisma.WorkResponseLikeCreateWithoutLikerInput, Prisma.WorkResponseLikeUncheckedCreateWithoutLikerInput> | Prisma.WorkResponseLikeCreateWithoutLikerInput[] | Prisma.WorkResponseLikeUncheckedCreateWithoutLikerInput[]
  connectOrCreate?: Prisma.WorkResponseLikeCreateOrConnectWithoutLikerInput | Prisma.WorkResponseLikeCreateOrConnectWithoutLikerInput[]
  upsert?: Prisma.WorkResponseLikeUpsertWithWhereUniqueWithoutLikerInput | Prisma.WorkResponseLikeUpsertWithWhereUniqueWithoutLikerInput[]
  createMany?: Prisma.WorkResponseLikeCreateManyLikerInputEnvelope
  set?: Prisma.WorkResponseLikeWhereUniqueInput | Prisma.WorkResponseLikeWhereUniqueInput[]
  disconnect?: Prisma.WorkResponseLikeWhereUniqueInput | Prisma.WorkResponseLikeWhereUniqueInput[]
  delete?: Prisma.WorkResponseLikeWhereUniqueInput | Prisma.WorkResponseLikeWhereUniqueInput[]
  connect?: Prisma.WorkResponseLikeWhereUniqueInput | Prisma.WorkResponseLikeWhereUniqueInput[]
  update?: Prisma.WorkResponseLikeUpdateWithWhereUniqueWithoutLikerInput | Prisma.WorkResponseLikeUpdateWithWhereUniqueWithoutLikerInput[]
  updateMany?: Prisma.WorkResponseLikeUpdateManyWithWhereWithoutLikerInput | Prisma.WorkResponseLikeUpdateManyWithWhereWithoutLikerInput[]
  deleteMany?: Prisma.WorkResponseLikeScalarWhereInput | Prisma.WorkResponseLikeScalarWhereInput[]
}

export type WorkResponseLikeCreateNestedManyWithoutWorkResponseInput = {
  create?: Prisma.XOR<Prisma.WorkResponseLikeCreateWithoutWorkResponseInput, Prisma.WorkResponseLikeUncheckedCreateWithoutWorkResponseInput> | Prisma.WorkResponseLikeCreateWithoutWorkResponseInput[] | Prisma.WorkResponseLikeUncheckedCreateWithoutWorkResponseInput[]
  connectOrCreate?: Prisma.WorkResponseLikeCreateOrConnectWithoutWorkResponseInput | Prisma.WorkResponseLikeCreateOrConnectWithoutWorkResponseInput[]
  createMany?: Prisma.WorkResponseLikeCreateManyWorkResponseInputEnvelope
  connect?: Prisma.WorkResponseLikeWhereUniqueInput | Prisma.WorkResponseLikeWhereUniqueInput[]
}

export type WorkResponseLikeUncheckedCreateNestedManyWithoutWorkResponseInput = {
  create?: Prisma.XOR<Prisma.WorkResponseLikeCreateWithoutWorkResponseInput, Prisma.WorkResponseLikeUncheckedCreateWithoutWorkResponseInput> | Prisma.WorkResponseLikeCreateWithoutWorkResponseInput[] | Prisma.WorkResponseLikeUncheckedCreateWithoutWorkResponseInput[]
  connectOrCreate?: Prisma.WorkResponseLikeCreateOrConnectWithoutWorkResponseInput | Prisma.WorkResponseLikeCreateOrConnectWithoutWorkResponseInput[]
  createMany?: Prisma.WorkResponseLikeCreateManyWorkResponseInputEnvelope
  connect?: Prisma.WorkResponseLikeWhereUniqueInput | Prisma.WorkResponseLikeWhereUniqueInput[]
}

export type WorkResponseLikeUpdateManyWithoutWorkResponseNestedInput = {
  create?: Prisma.XOR<Prisma.WorkResponseLikeCreateWithoutWorkResponseInput, Prisma.WorkResponseLikeUncheckedCreateWithoutWorkResponseInput> | Prisma.WorkResponseLikeCreateWithoutWorkResponseInput[] | Prisma.WorkResponseLikeUncheckedCreateWithoutWorkResponseInput[]
  connectOrCreate?: Prisma.WorkResponseLikeCreateOrConnectWithoutWorkResponseInput | Prisma.WorkResponseLikeCreateOrConnectWithoutWorkResponseInput[]
  upsert?: Prisma.WorkResponseLikeUpsertWithWhereUniqueWithoutWorkResponseInput | Prisma.WorkResponseLikeUpsertWithWhereUniqueWithoutWorkResponseInput[]
  createMany?: Prisma.WorkResponseLikeCreateManyWorkResponseInputEnvelope
  set?: Prisma.WorkResponseLikeWhereUniqueInput | Prisma.WorkResponseLikeWhereUniqueInput[]
  disconnect?: Prisma.WorkResponseLikeWhereUniqueInput | Prisma.WorkResponseLikeWhereUniqueInput[]
  delete?: Prisma.WorkResponseLikeWhereUniqueInput | Prisma.WorkResponseLikeWhereUniqueInput[]
  connect?: Prisma.WorkResponseLikeWhereUniqueInput | Prisma.WorkResponseLikeWhereUniqueInput[]
  update?: Prisma.WorkResponseLikeUpdateWithWhereUniqueWithoutWorkResponseInput | Prisma.WorkResponseLikeUpdateWithWhereUniqueWithoutWorkResponseInput[]
  updateMany?: Prisma.WorkResponseLikeUpdateManyWithWhereWithoutWorkResponseInput | Prisma.WorkResponseLikeUpdateManyWithWhereWithoutWorkResponseInput[]
  deleteMany?: Prisma.WorkResponseLikeScalarWhereInput | Prisma.WorkResponseLikeScalarWhereInput[]
}

export type WorkResponseLikeUncheckedUpdateManyWithoutWorkResponseNestedInput = {
  create?: Prisma.XOR<Prisma.WorkResponseLikeCreateWithoutWorkResponseInput, Prisma.WorkResponseLikeUncheckedCreateWithoutWorkResponseInput> | Prisma.WorkResponseLikeCreateWithoutWorkResponseInput[] | Prisma.WorkResponseLikeUncheckedCreateWithoutWorkResponseInput[]
  connectOrCreate?: Prisma.WorkResponseLikeCreateOrConnectWithoutWorkResponseInput | Prisma.WorkResponseLikeCreateOrConnectWithoutWorkResponseInput[]
  upsert?: Prisma.WorkResponseLikeUpsertWithWhereUniqueWithoutWorkResponseInput | Prisma.WorkResponseLikeUpsertWithWhereUniqueWithoutWorkResponseInput[]
  createMany?: Prisma.WorkResponseLikeCreateManyWorkResponseInputEnvelope
  set?: Prisma.WorkResponseLikeWhereUniqueInput | Prisma.WorkResponseLikeWhereUniqueInput[]
  disconnect?: Prisma.WorkResponseLikeWhereUniqueInput | Prisma.WorkResponseLikeWhereUniqueInput[]
  delete?: Prisma.WorkResponseLikeWhereUniqueInput | Prisma.WorkResponseLikeWhereUniqueInput[]
  connect?: Prisma.WorkResponseLikeWhereUniqueInput | Prisma.WorkResponseLikeWhereUniqueInput[]
  update?: Prisma.WorkResponseLikeUpdateWithWhereUniqueWithoutWorkResponseInput | Prisma.WorkResponseLikeUpdateWithWhereUniqueWithoutWorkResponseInput[]
  updateMany?: Prisma.WorkResponseLikeUpdateManyWithWhereWithoutWorkResponseInput | Prisma.WorkResponseLikeUpdateManyWithWhereWithoutWorkResponseInput[]
  deleteMany?: Prisma.WorkResponseLikeScalarWhereInput | Prisma.WorkResponseLikeScalarWhereInput[]
}

export type WorkResponseLikeCreateWithoutLikerInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  workResponse: Prisma.WorkResponseCreateNestedOneWithoutWorkResponseLikesInput
}

export type WorkResponseLikeUncheckedCreateWithoutLikerInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  workResponseId: bigint | number
}

export type WorkResponseLikeCreateOrConnectWithoutLikerInput = {
  where: Prisma.WorkResponseLikeWhereUniqueInput
  create: Prisma.XOR<Prisma.WorkResponseLikeCreateWithoutLikerInput, Prisma.WorkResponseLikeUncheckedCreateWithoutLikerInput>
}

export type WorkResponseLikeCreateManyLikerInputEnvelope = {
  data: Prisma.WorkResponseLikeCreateManyLikerInput | Prisma.WorkResponseLikeCreateManyLikerInput[]
  skipDuplicates?: boolean
}

export type WorkResponseLikeUpsertWithWhereUniqueWithoutLikerInput = {
  where: Prisma.WorkResponseLikeWhereUniqueInput
  update: Prisma.XOR<Prisma.WorkResponseLikeUpdateWithoutLikerInput, Prisma.WorkResponseLikeUncheckedUpdateWithoutLikerInput>
  create: Prisma.XOR<Prisma.WorkResponseLikeCreateWithoutLikerInput, Prisma.WorkResponseLikeUncheckedCreateWithoutLikerInput>
}

export type WorkResponseLikeUpdateWithWhereUniqueWithoutLikerInput = {
  where: Prisma.WorkResponseLikeWhereUniqueInput
  data: Prisma.XOR<Prisma.WorkResponseLikeUpdateWithoutLikerInput, Prisma.WorkResponseLikeUncheckedUpdateWithoutLikerInput>
}

export type WorkResponseLikeUpdateManyWithWhereWithoutLikerInput = {
  where: Prisma.WorkResponseLikeScalarWhereInput
  data: Prisma.XOR<Prisma.WorkResponseLikeUpdateManyMutationInput, Prisma.WorkResponseLikeUncheckedUpdateManyWithoutLikerInput>
}

export type WorkResponseLikeScalarWhereInput = {
  AND?: Prisma.WorkResponseLikeScalarWhereInput | Prisma.WorkResponseLikeScalarWhereInput[]
  OR?: Prisma.WorkResponseLikeScalarWhereInput[]
  NOT?: Prisma.WorkResponseLikeScalarWhereInput | Prisma.WorkResponseLikeScalarWhereInput[]
  id?: Prisma.BigIntFilter<"WorkResponseLike"> | bigint | number
  createdAt?: Prisma.DateTimeFilter<"WorkResponseLike"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"WorkResponseLike"> | Date | string
  workResponseId?: Prisma.BigIntFilter<"WorkResponseLike"> | bigint | number
  likerId?: Prisma.BigIntFilter<"WorkResponseLike"> | bigint | number
}

export type WorkResponseLikeCreateWithoutWorkResponseInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  liker: Prisma.ProfileCreateNestedOneWithoutWorkResponseLikesInput
}

export type WorkResponseLikeUncheckedCreateWithoutWorkResponseInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  likerId: bigint | number
}

export type WorkResponseLikeCreateOrConnectWithoutWorkResponseInput = {
  where: Prisma.WorkResponseLikeWhereUniqueInput
  create: Prisma.XOR<Prisma.WorkResponseLikeCreateWithoutWorkResponseInput, Prisma.WorkResponseLikeUncheckedCreateWithoutWorkResponseInput>
}

export type WorkResponseLikeCreateManyWorkResponseInputEnvelope = {
  data: Prisma.WorkResponseLikeCreateManyWorkResponseInput | Prisma.WorkResponseLikeCreateManyWorkResponseInput[]
  skipDuplicates?: boolean
}

export type WorkResponseLikeUpsertWithWhereUniqueWithoutWorkResponseInput = {
  where: Prisma.WorkResponseLikeWhereUniqueInput
  update: Prisma.XOR<Prisma.WorkResponseLikeUpdateWithoutWorkResponseInput, Prisma.WorkResponseLikeUncheckedUpdateWithoutWorkResponseInput>
  create: Prisma.XOR<Prisma.WorkResponseLikeCreateWithoutWorkResponseInput, Prisma.WorkResponseLikeUncheckedCreateWithoutWorkResponseInput>
}

export type WorkResponseLikeUpdateWithWhereUniqueWithoutWorkResponseInput = {
  where: Prisma.WorkResponseLikeWhereUniqueInput
  data: Prisma.XOR<Prisma.WorkResponseLikeUpdateWithoutWorkResponseInput, Prisma.WorkResponseLikeUncheckedUpdateWithoutWorkResponseInput>
}

export type WorkResponseLikeUpdateManyWithWhereWithoutWorkResponseInput = {
  where: Prisma.WorkResponseLikeScalarWhereInput
  data: Prisma.XOR<Prisma.WorkResponseLikeUpdateManyMutationInput, Prisma.WorkResponseLikeUncheckedUpdateManyWithoutWorkResponseInput>
}

export type WorkResponseLikeCreateManyLikerInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  workResponseId: bigint | number
}

export type WorkResponseLikeUpdateWithoutLikerInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  workResponse?: Prisma.WorkResponseUpdateOneRequiredWithoutWorkResponseLikesNestedInput
}

export type WorkResponseLikeUncheckedUpdateWithoutLikerInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  workResponseId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
}

export type WorkResponseLikeUncheckedUpdateManyWithoutLikerInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  workResponseId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
}

export type WorkResponseLikeCreateManyWorkResponseInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  likerId: bigint | number
}

export type WorkResponseLikeUpdateWithoutWorkResponseInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  liker?: Prisma.ProfileUpdateOneRequiredWithoutWorkResponseLikesNestedInput
}

export type WorkResponseLikeUncheckedUpdateWithoutWorkResponseInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  likerId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
}

export type WorkResponseLikeUncheckedUpdateManyWithoutWorkResponseInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  likerId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
}



export type WorkResponseLikeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  workResponseId?: boolean
  likerId?: boolean
  workResponse?: boolean | Prisma.WorkResponseDefaultArgs<ExtArgs>
  liker?: boolean | Prisma.ProfileDefaultArgs<ExtArgs>
}, ExtArgs["result"]["workResponseLike"]>

export type WorkResponseLikeSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  workResponseId?: boolean
  likerId?: boolean
  workResponse?: boolean | Prisma.WorkResponseDefaultArgs<ExtArgs>
  liker?: boolean | Prisma.ProfileDefaultArgs<ExtArgs>
}, ExtArgs["result"]["workResponseLike"]>

export type WorkResponseLikeSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  workResponseId?: boolean
  likerId?: boolean
  workResponse?: boolean | Prisma.WorkResponseDefaultArgs<ExtArgs>
  liker?: boolean | Prisma.ProfileDefaultArgs<ExtArgs>
}, ExtArgs["result"]["workResponseLike"]>

export type WorkResponseLikeSelectScalar = {
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  workResponseId?: boolean
  likerId?: boolean
}

export type WorkResponseLikeOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "workResponseId" | "likerId", ExtArgs["result"]["workResponseLike"]>
export type WorkResponseLikeInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  workResponse?: boolean | Prisma.WorkResponseDefaultArgs<ExtArgs>
  liker?: boolean | Prisma.ProfileDefaultArgs<ExtArgs>
}
export type WorkResponseLikeIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  workResponse?: boolean | Prisma.WorkResponseDefaultArgs<ExtArgs>
  liker?: boolean | Prisma.ProfileDefaultArgs<ExtArgs>
}
export type WorkResponseLikeIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  workResponse?: boolean | Prisma.WorkResponseDefaultArgs<ExtArgs>
  liker?: boolean | Prisma.ProfileDefaultArgs<ExtArgs>
}

export type $WorkResponseLikePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "WorkResponseLike"
  objects: {
    workResponse: Prisma.$WorkResponsePayload<ExtArgs>
    liker: Prisma.$ProfilePayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: bigint
    createdAt: Date
    updatedAt: Date
    workResponseId: bigint
    likerId: bigint
  }, ExtArgs["result"]["workResponseLike"]>
  composites: {}
}

export type WorkResponseLikeGetPayload<S extends boolean | null | undefined | WorkResponseLikeDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$WorkResponseLikePayload, S>

export type WorkResponseLikeCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<WorkResponseLikeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: WorkResponseLikeCountAggregateInputType | true
  }

export interface WorkResponseLikeDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkResponseLike'], meta: { name: 'WorkResponseLike' } }
  /**
   * Find zero or one WorkResponseLike that matches the filter.
   * @param {WorkResponseLikeFindUniqueArgs} args - Arguments to find a WorkResponseLike
   * @example
   * // Get one WorkResponseLike
   * const workResponseLike = await prisma.workResponseLike.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends WorkResponseLikeFindUniqueArgs>(args: Prisma.SelectSubset<T, WorkResponseLikeFindUniqueArgs<ExtArgs>>): Prisma.Prisma__WorkResponseLikeClient<runtime.Types.Result.GetResult<Prisma.$WorkResponseLikePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one WorkResponseLike that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {WorkResponseLikeFindUniqueOrThrowArgs} args - Arguments to find a WorkResponseLike
   * @example
   * // Get one WorkResponseLike
   * const workResponseLike = await prisma.workResponseLike.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends WorkResponseLikeFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, WorkResponseLikeFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__WorkResponseLikeClient<runtime.Types.Result.GetResult<Prisma.$WorkResponseLikePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first WorkResponseLike that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkResponseLikeFindFirstArgs} args - Arguments to find a WorkResponseLike
   * @example
   * // Get one WorkResponseLike
   * const workResponseLike = await prisma.workResponseLike.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends WorkResponseLikeFindFirstArgs>(args?: Prisma.SelectSubset<T, WorkResponseLikeFindFirstArgs<ExtArgs>>): Prisma.Prisma__WorkResponseLikeClient<runtime.Types.Result.GetResult<Prisma.$WorkResponseLikePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first WorkResponseLike that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkResponseLikeFindFirstOrThrowArgs} args - Arguments to find a WorkResponseLike
   * @example
   * // Get one WorkResponseLike
   * const workResponseLike = await prisma.workResponseLike.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends WorkResponseLikeFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, WorkResponseLikeFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__WorkResponseLikeClient<runtime.Types.Result.GetResult<Prisma.$WorkResponseLikePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more WorkResponseLikes that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkResponseLikeFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all WorkResponseLikes
   * const workResponseLikes = await prisma.workResponseLike.findMany()
   * 
   * // Get first 10 WorkResponseLikes
   * const workResponseLikes = await prisma.workResponseLike.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const workResponseLikeWithIdOnly = await prisma.workResponseLike.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends WorkResponseLikeFindManyArgs>(args?: Prisma.SelectSubset<T, WorkResponseLikeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WorkResponseLikePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a WorkResponseLike.
   * @param {WorkResponseLikeCreateArgs} args - Arguments to create a WorkResponseLike.
   * @example
   * // Create one WorkResponseLike
   * const WorkResponseLike = await prisma.workResponseLike.create({
   *   data: {
   *     // ... data to create a WorkResponseLike
   *   }
   * })
   * 
   */
  create<T extends WorkResponseLikeCreateArgs>(args: Prisma.SelectSubset<T, WorkResponseLikeCreateArgs<ExtArgs>>): Prisma.Prisma__WorkResponseLikeClient<runtime.Types.Result.GetResult<Prisma.$WorkResponseLikePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many WorkResponseLikes.
   * @param {WorkResponseLikeCreateManyArgs} args - Arguments to create many WorkResponseLikes.
   * @example
   * // Create many WorkResponseLikes
   * const workResponseLike = await prisma.workResponseLike.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends WorkResponseLikeCreateManyArgs>(args?: Prisma.SelectSubset<T, WorkResponseLikeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many WorkResponseLikes and returns the data saved in the database.
   * @param {WorkResponseLikeCreateManyAndReturnArgs} args - Arguments to create many WorkResponseLikes.
   * @example
   * // Create many WorkResponseLikes
   * const workResponseLike = await prisma.workResponseLike.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many WorkResponseLikes and only return the `id`
   * const workResponseLikeWithIdOnly = await prisma.workResponseLike.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends WorkResponseLikeCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, WorkResponseLikeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WorkResponseLikePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a WorkResponseLike.
   * @param {WorkResponseLikeDeleteArgs} args - Arguments to delete one WorkResponseLike.
   * @example
   * // Delete one WorkResponseLike
   * const WorkResponseLike = await prisma.workResponseLike.delete({
   *   where: {
   *     // ... filter to delete one WorkResponseLike
   *   }
   * })
   * 
   */
  delete<T extends WorkResponseLikeDeleteArgs>(args: Prisma.SelectSubset<T, WorkResponseLikeDeleteArgs<ExtArgs>>): Prisma.Prisma__WorkResponseLikeClient<runtime.Types.Result.GetResult<Prisma.$WorkResponseLikePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one WorkResponseLike.
   * @param {WorkResponseLikeUpdateArgs} args - Arguments to update one WorkResponseLike.
   * @example
   * // Update one WorkResponseLike
   * const workResponseLike = await prisma.workResponseLike.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends WorkResponseLikeUpdateArgs>(args: Prisma.SelectSubset<T, WorkResponseLikeUpdateArgs<ExtArgs>>): Prisma.Prisma__WorkResponseLikeClient<runtime.Types.Result.GetResult<Prisma.$WorkResponseLikePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more WorkResponseLikes.
   * @param {WorkResponseLikeDeleteManyArgs} args - Arguments to filter WorkResponseLikes to delete.
   * @example
   * // Delete a few WorkResponseLikes
   * const { count } = await prisma.workResponseLike.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends WorkResponseLikeDeleteManyArgs>(args?: Prisma.SelectSubset<T, WorkResponseLikeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more WorkResponseLikes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkResponseLikeUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many WorkResponseLikes
   * const workResponseLike = await prisma.workResponseLike.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends WorkResponseLikeUpdateManyArgs>(args: Prisma.SelectSubset<T, WorkResponseLikeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more WorkResponseLikes and returns the data updated in the database.
   * @param {WorkResponseLikeUpdateManyAndReturnArgs} args - Arguments to update many WorkResponseLikes.
   * @example
   * // Update many WorkResponseLikes
   * const workResponseLike = await prisma.workResponseLike.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more WorkResponseLikes and only return the `id`
   * const workResponseLikeWithIdOnly = await prisma.workResponseLike.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends WorkResponseLikeUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, WorkResponseLikeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WorkResponseLikePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one WorkResponseLike.
   * @param {WorkResponseLikeUpsertArgs} args - Arguments to update or create a WorkResponseLike.
   * @example
   * // Update or create a WorkResponseLike
   * const workResponseLike = await prisma.workResponseLike.upsert({
   *   create: {
   *     // ... data to create a WorkResponseLike
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the WorkResponseLike we want to update
   *   }
   * })
   */
  upsert<T extends WorkResponseLikeUpsertArgs>(args: Prisma.SelectSubset<T, WorkResponseLikeUpsertArgs<ExtArgs>>): Prisma.Prisma__WorkResponseLikeClient<runtime.Types.Result.GetResult<Prisma.$WorkResponseLikePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of WorkResponseLikes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkResponseLikeCountArgs} args - Arguments to filter WorkResponseLikes to count.
   * @example
   * // Count the number of WorkResponseLikes
   * const count = await prisma.workResponseLike.count({
   *   where: {
   *     // ... the filter for the WorkResponseLikes we want to count
   *   }
   * })
  **/
  count<T extends WorkResponseLikeCountArgs>(
    args?: Prisma.Subset<T, WorkResponseLikeCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], WorkResponseLikeCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a WorkResponseLike.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkResponseLikeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends WorkResponseLikeAggregateArgs>(args: Prisma.Subset<T, WorkResponseLikeAggregateArgs>): Prisma.PrismaPromise<GetWorkResponseLikeAggregateType<T>>

  /**
   * Group by WorkResponseLike.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkResponseLikeGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends WorkResponseLikeGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: WorkResponseLikeGroupByArgs['orderBy'] }
      : { orderBy?: WorkResponseLikeGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, WorkResponseLikeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkResponseLikeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the WorkResponseLike model
 */
readonly fields: WorkResponseLikeFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for WorkResponseLike.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__WorkResponseLikeClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  workResponse<T extends Prisma.WorkResponseDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.WorkResponseDefaultArgs<ExtArgs>>): Prisma.Prisma__WorkResponseClient<runtime.Types.Result.GetResult<Prisma.$WorkResponsePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  liker<T extends Prisma.ProfileDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProfileDefaultArgs<ExtArgs>>): Prisma.Prisma__ProfileClient<runtime.Types.Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the WorkResponseLike model
 */
export interface WorkResponseLikeFieldRefs {
  readonly id: Prisma.FieldRef<"WorkResponseLike", 'BigInt'>
  readonly createdAt: Prisma.FieldRef<"WorkResponseLike", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"WorkResponseLike", 'DateTime'>
  readonly workResponseId: Prisma.FieldRef<"WorkResponseLike", 'BigInt'>
  readonly likerId: Prisma.FieldRef<"WorkResponseLike", 'BigInt'>
}
    

// Custom InputTypes
/**
 * WorkResponseLike findUnique
 */
export type WorkResponseLikeFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkResponseLike
   */
  select?: Prisma.WorkResponseLikeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkResponseLike
   */
  omit?: Prisma.WorkResponseLikeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkResponseLikeInclude<ExtArgs> | null
  /**
   * Filter, which WorkResponseLike to fetch.
   */
  where: Prisma.WorkResponseLikeWhereUniqueInput
}

/**
 * WorkResponseLike findUniqueOrThrow
 */
export type WorkResponseLikeFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkResponseLike
   */
  select?: Prisma.WorkResponseLikeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkResponseLike
   */
  omit?: Prisma.WorkResponseLikeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkResponseLikeInclude<ExtArgs> | null
  /**
   * Filter, which WorkResponseLike to fetch.
   */
  where: Prisma.WorkResponseLikeWhereUniqueInput
}

/**
 * WorkResponseLike findFirst
 */
export type WorkResponseLikeFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkResponseLike
   */
  select?: Prisma.WorkResponseLikeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkResponseLike
   */
  omit?: Prisma.WorkResponseLikeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkResponseLikeInclude<ExtArgs> | null
  /**
   * Filter, which WorkResponseLike to fetch.
   */
  where?: Prisma.WorkResponseLikeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WorkResponseLikes to fetch.
   */
  orderBy?: Prisma.WorkResponseLikeOrderByWithRelationInput | Prisma.WorkResponseLikeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for WorkResponseLikes.
   */
  cursor?: Prisma.WorkResponseLikeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WorkResponseLikes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WorkResponseLikes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of WorkResponseLikes.
   */
  distinct?: Prisma.WorkResponseLikeScalarFieldEnum | Prisma.WorkResponseLikeScalarFieldEnum[]
}

/**
 * WorkResponseLike findFirstOrThrow
 */
export type WorkResponseLikeFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkResponseLike
   */
  select?: Prisma.WorkResponseLikeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkResponseLike
   */
  omit?: Prisma.WorkResponseLikeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkResponseLikeInclude<ExtArgs> | null
  /**
   * Filter, which WorkResponseLike to fetch.
   */
  where?: Prisma.WorkResponseLikeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WorkResponseLikes to fetch.
   */
  orderBy?: Prisma.WorkResponseLikeOrderByWithRelationInput | Prisma.WorkResponseLikeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for WorkResponseLikes.
   */
  cursor?: Prisma.WorkResponseLikeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WorkResponseLikes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WorkResponseLikes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of WorkResponseLikes.
   */
  distinct?: Prisma.WorkResponseLikeScalarFieldEnum | Prisma.WorkResponseLikeScalarFieldEnum[]
}

/**
 * WorkResponseLike findMany
 */
export type WorkResponseLikeFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkResponseLike
   */
  select?: Prisma.WorkResponseLikeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkResponseLike
   */
  omit?: Prisma.WorkResponseLikeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkResponseLikeInclude<ExtArgs> | null
  /**
   * Filter, which WorkResponseLikes to fetch.
   */
  where?: Prisma.WorkResponseLikeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WorkResponseLikes to fetch.
   */
  orderBy?: Prisma.WorkResponseLikeOrderByWithRelationInput | Prisma.WorkResponseLikeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing WorkResponseLikes.
   */
  cursor?: Prisma.WorkResponseLikeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WorkResponseLikes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WorkResponseLikes.
   */
  skip?: number
  distinct?: Prisma.WorkResponseLikeScalarFieldEnum | Prisma.WorkResponseLikeScalarFieldEnum[]
}

/**
 * WorkResponseLike create
 */
export type WorkResponseLikeCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkResponseLike
   */
  select?: Prisma.WorkResponseLikeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkResponseLike
   */
  omit?: Prisma.WorkResponseLikeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkResponseLikeInclude<ExtArgs> | null
  /**
   * The data needed to create a WorkResponseLike.
   */
  data: Prisma.XOR<Prisma.WorkResponseLikeCreateInput, Prisma.WorkResponseLikeUncheckedCreateInput>
}

/**
 * WorkResponseLike createMany
 */
export type WorkResponseLikeCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many WorkResponseLikes.
   */
  data: Prisma.WorkResponseLikeCreateManyInput | Prisma.WorkResponseLikeCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * WorkResponseLike createManyAndReturn
 */
export type WorkResponseLikeCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkResponseLike
   */
  select?: Prisma.WorkResponseLikeSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the WorkResponseLike
   */
  omit?: Prisma.WorkResponseLikeOmit<ExtArgs> | null
  /**
   * The data used to create many WorkResponseLikes.
   */
  data: Prisma.WorkResponseLikeCreateManyInput | Prisma.WorkResponseLikeCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkResponseLikeIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * WorkResponseLike update
 */
export type WorkResponseLikeUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkResponseLike
   */
  select?: Prisma.WorkResponseLikeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkResponseLike
   */
  omit?: Prisma.WorkResponseLikeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkResponseLikeInclude<ExtArgs> | null
  /**
   * The data needed to update a WorkResponseLike.
   */
  data: Prisma.XOR<Prisma.WorkResponseLikeUpdateInput, Prisma.WorkResponseLikeUncheckedUpdateInput>
  /**
   * Choose, which WorkResponseLike to update.
   */
  where: Prisma.WorkResponseLikeWhereUniqueInput
}

/**
 * WorkResponseLike updateMany
 */
export type WorkResponseLikeUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update WorkResponseLikes.
   */
  data: Prisma.XOR<Prisma.WorkResponseLikeUpdateManyMutationInput, Prisma.WorkResponseLikeUncheckedUpdateManyInput>
  /**
   * Filter which WorkResponseLikes to update
   */
  where?: Prisma.WorkResponseLikeWhereInput
  /**
   * Limit how many WorkResponseLikes to update.
   */
  limit?: number
}

/**
 * WorkResponseLike updateManyAndReturn
 */
export type WorkResponseLikeUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkResponseLike
   */
  select?: Prisma.WorkResponseLikeSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the WorkResponseLike
   */
  omit?: Prisma.WorkResponseLikeOmit<ExtArgs> | null
  /**
   * The data used to update WorkResponseLikes.
   */
  data: Prisma.XOR<Prisma.WorkResponseLikeUpdateManyMutationInput, Prisma.WorkResponseLikeUncheckedUpdateManyInput>
  /**
   * Filter which WorkResponseLikes to update
   */
  where?: Prisma.WorkResponseLikeWhereInput
  /**
   * Limit how many WorkResponseLikes to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkResponseLikeIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * WorkResponseLike upsert
 */
export type WorkResponseLikeUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkResponseLike
   */
  select?: Prisma.WorkResponseLikeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkResponseLike
   */
  omit?: Prisma.WorkResponseLikeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkResponseLikeInclude<ExtArgs> | null
  /**
   * The filter to search for the WorkResponseLike to update in case it exists.
   */
  where: Prisma.WorkResponseLikeWhereUniqueInput
  /**
   * In case the WorkResponseLike found by the `where` argument doesn't exist, create a new WorkResponseLike with this data.
   */
  create: Prisma.XOR<Prisma.WorkResponseLikeCreateInput, Prisma.WorkResponseLikeUncheckedCreateInput>
  /**
   * In case the WorkResponseLike was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.WorkResponseLikeUpdateInput, Prisma.WorkResponseLikeUncheckedUpdateInput>
}

/**
 * WorkResponseLike delete
 */
export type WorkResponseLikeDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkResponseLike
   */
  select?: Prisma.WorkResponseLikeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkResponseLike
   */
  omit?: Prisma.WorkResponseLikeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkResponseLikeInclude<ExtArgs> | null
  /**
   * Filter which WorkResponseLike to delete.
   */
  where: Prisma.WorkResponseLikeWhereUniqueInput
}

/**
 * WorkResponseLike deleteMany
 */
export type WorkResponseLikeDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which WorkResponseLikes to delete
   */
  where?: Prisma.WorkResponseLikeWhereInput
  /**
   * Limit how many WorkResponseLikes to delete.
   */
  limit?: number
}

/**
 * WorkResponseLike without action
 */
export type WorkResponseLikeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkResponseLike
   */
  select?: Prisma.WorkResponseLikeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkResponseLike
   */
  omit?: Prisma.WorkResponseLikeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkResponseLikeInclude<ExtArgs> | null
}
