
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * WARNING: This is an internal file that is subject to change!
 *
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 *
 * Please import the `PrismaClient` class from the `client.ts` file instead.
 */

import * as runtime from "@prisma/client/runtime/client"
import type * as Prisma from "./prismaNamespace"


const config: runtime.GetPrismaClientConfig = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client"
    },
    "output": {
      "value": "/Users/davidchoi/Work/packt/fsrtn-v2/source-code/Full-Stack-React-TypeScript-and-Node-2nd-Edition/Chap10/server/src/generated/prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "client"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "darwin-arm64",
        "native": true
      }
    ],
    "previewFeatures": [
      "typedSql"
    ],
    "sourceFilePath": "/Users/davidchoi/Work/packt/fsrtn-v2/source-code/Full-Stack-React-TypeScript-and-Node-2nd-Edition/Chap10/server/prisma/schema.prisma",
    "isCustomOutput": true
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.17.1",
  "engineVersion": "272a37d34178c2894197e17273bf937f25acdeac",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\ngenerator client {\n  provider        = \"prisma-client\"\n  output          = \"../src/generated/prisma\"\n  engineType      = \"client\"\n  previewFeatures = [\"typedSql\"]\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel Work {\n  id            BigInt         @id @default(autoincrement()) @db.BigInt\n  createdAt     DateTime       @default(now())\n  updatedAt     DateTime       @updatedAt\n  title         String         @db.VarChar(100)\n  content       String         @db.Text()\n  description   String         @db.VarChar(400)\n  author        Profile        @relation(fields: [authorId], references: [id])\n  authorId      BigInt         @db.BigInt\n  workImages    WorkImage[]    @relation(\"Work\")\n  workTopics    WorkTopic[]    @relation(\"Work\")\n  workLikes     WorkLike[]     @relation(\"LikedWork\")\n  workResponses WorkResponse[] @relation(\"RespondedWork\")\n}\n\nmodel WorkImage {\n  id               BigInt   @id @default(autoincrement()) @db.BigInt\n  createdAt        DateTime @default(now())\n  updatedAt        DateTime @updatedAt\n  imagePlaceholder String   @db.VarChar(50)\n  image            Bytes    @db.ByteA\n  work             Work     @relation(\"Work\", fields: [workId], references: [id])\n  workId           BigInt\n}\n\nmodel Profile {\n  id                  BigInt             @id @default(autoincrement()) @db.BigInt\n  createdAt           DateTime           @default(now())\n  updatedAt           DateTime           @updatedAt\n  userName            String             @unique @db.VarChar(50)\n  password            String             @db.VarChar(128)\n  fullName            String             @db.VarChar(100)\n  description         String?            @db.VarChar(250)\n  socialLinkPrimary   String?            @db.VarChar(250)\n  socialLinkSecondary String?            @db.VarChar(250)\n  avatar              ProfileAvatar?     @relation(fields: [avatarId], references: [id])\n  avatarId            BigInt?            @unique\n  works               Work[]\n  followers           Follow[]           @relation(\"Followed\")\n  following           Follow[]           @relation(\"Follower\")\n  workLikes           WorkLike[]         @relation(\"WorkLiker\")\n  workResponses       WorkResponse[]     @relation(\"Responder\")\n  workResponseLikes   WorkResponseLike[] @relation(\"ResponseLiker\")\n}\n\nmodel ProfileAvatar {\n  id        BigInt   @id @default(autoincrement()) @db.BigInt\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  avatar    Bytes    @db.ByteA\n  profile   Profile?\n}\n\nmodel Follow {\n  id         BigInt   @id @default(autoincrement()) @db.BigInt\n  createdAt  DateTime @default(now())\n  updatedAt  DateTime @updatedAt\n  follower   Profile  @relation(\"Follower\", fields: [followerId], references: [id])\n  followerId BigInt\n  followed   Profile  @relation(\"Followed\", fields: [followedId], references: [id])\n  followedId BigInt\n}\n\nmodel Topic {\n  id         BigInt      @id @default(autoincrement()) @db.BigInt\n  createdAt  DateTime    @default(now())\n  updatedAt  DateTime    @updatedAt\n  name       String\n  workTopics WorkTopic[] @relation(\"Topic\")\n}\n\nmodel WorkTopic {\n  id        BigInt   @id @default(autoincrement()) @db.BigInt\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  work      Work     @relation(\"Work\", fields: [workId], references: [id])\n  workId    BigInt\n  topic     Topic    @relation(\"Topic\", fields: [topicId], references: [id])\n  topicId   BigInt\n}\n\nmodel WorkLike {\n  id        BigInt   @id @default(autoincrement()) @db.BigInt\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  work      Work     @relation(\"LikedWork\", fields: [workId], references: [id])\n  workId    BigInt\n  liker     Profile  @relation(\"WorkLiker\", fields: [likerId], references: [id])\n  likerId   BigInt\n}\n\nmodel WorkResponse {\n  id                BigInt             @id @default(autoincrement()) @db.BigInt\n  createdAt         DateTime           @default(now())\n  updatedAt         DateTime           @updatedAt\n  response          String             @db.Text()\n  responder         Profile            @relation(\"Responder\", fields: [responderId], references: [id])\n  responderId       BigInt\n  work              Work               @relation(\"RespondedWork\", fields: [workId], references: [id])\n  workId            BigInt\n  workResponseLikes WorkResponseLike[] @relation(\"WorkResponse\")\n}\n\nmodel WorkResponseLike {\n  id             BigInt       @id @default(autoincrement()) @db.BigInt\n  createdAt      DateTime     @default(now())\n  updatedAt      DateTime     @updatedAt\n  workResponse   WorkResponse @relation(\"WorkResponse\", fields: [workResponseId], references: [id])\n  workResponseId BigInt\n  liker          Profile      @relation(\"ResponseLiker\", fields: [likerId], references: [id])\n  likerId        BigInt\n}\n",
  "inlineSchemaHash": "b462586e1291c0314c5fb03ddcc310af08901a8e0f5e7bc4f68fbe4e8018a097",
  "copyEngine": true,
  "runtimeDataModel": {
    "models": {},
    "enums": {},
    "types": {}
  },
  "dirname": ""
}

config.runtimeDataModel = JSON.parse("{\"models\":{\"Work\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"BigInt\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"author\",\"kind\":\"object\",\"type\":\"Profile\",\"relationName\":\"ProfileToWork\"},{\"name\":\"authorId\",\"kind\":\"scalar\",\"type\":\"BigInt\"},{\"name\":\"workImages\",\"kind\":\"object\",\"type\":\"WorkImage\",\"relationName\":\"Work\"},{\"name\":\"workTopics\",\"kind\":\"object\",\"type\":\"WorkTopic\",\"relationName\":\"Work\"},{\"name\":\"workLikes\",\"kind\":\"object\",\"type\":\"WorkLike\",\"relationName\":\"LikedWork\"},{\"name\":\"workResponses\",\"kind\":\"object\",\"type\":\"WorkResponse\",\"relationName\":\"RespondedWork\"}],\"dbName\":null},\"WorkImage\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"BigInt\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"imagePlaceholder\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"image\",\"kind\":\"scalar\",\"type\":\"Bytes\"},{\"name\":\"work\",\"kind\":\"object\",\"type\":\"Work\",\"relationName\":\"Work\"},{\"name\":\"workId\",\"kind\":\"scalar\",\"type\":\"BigInt\"}],\"dbName\":null},\"Profile\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"BigInt\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"userName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"fullName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"socialLinkPrimary\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"socialLinkSecondary\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"avatar\",\"kind\":\"object\",\"type\":\"ProfileAvatar\",\"relationName\":\"ProfileToProfileAvatar\"},{\"name\":\"avatarId\",\"kind\":\"scalar\",\"type\":\"BigInt\"},{\"name\":\"works\",\"kind\":\"object\",\"type\":\"Work\",\"relationName\":\"ProfileToWork\"},{\"name\":\"followers\",\"kind\":\"object\",\"type\":\"Follow\",\"relationName\":\"Followed\"},{\"name\":\"following\",\"kind\":\"object\",\"type\":\"Follow\",\"relationName\":\"Follower\"},{\"name\":\"workLikes\",\"kind\":\"object\",\"type\":\"WorkLike\",\"relationName\":\"WorkLiker\"},{\"name\":\"workResponses\",\"kind\":\"object\",\"type\":\"WorkResponse\",\"relationName\":\"Responder\"},{\"name\":\"workResponseLikes\",\"kind\":\"object\",\"type\":\"WorkResponseLike\",\"relationName\":\"ResponseLiker\"}],\"dbName\":null},\"ProfileAvatar\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"BigInt\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"avatar\",\"kind\":\"scalar\",\"type\":\"Bytes\"},{\"name\":\"profile\",\"kind\":\"object\",\"type\":\"Profile\",\"relationName\":\"ProfileToProfileAvatar\"}],\"dbName\":null},\"Follow\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"BigInt\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"follower\",\"kind\":\"object\",\"type\":\"Profile\",\"relationName\":\"Follower\"},{\"name\":\"followerId\",\"kind\":\"scalar\",\"type\":\"BigInt\"},{\"name\":\"followed\",\"kind\":\"object\",\"type\":\"Profile\",\"relationName\":\"Followed\"},{\"name\":\"followedId\",\"kind\":\"scalar\",\"type\":\"BigInt\"}],\"dbName\":null},\"Topic\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"BigInt\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"workTopics\",\"kind\":\"object\",\"type\":\"WorkTopic\",\"relationName\":\"Topic\"}],\"dbName\":null},\"WorkTopic\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"BigInt\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"work\",\"kind\":\"object\",\"type\":\"Work\",\"relationName\":\"Work\"},{\"name\":\"workId\",\"kind\":\"scalar\",\"type\":\"BigInt\"},{\"name\":\"topic\",\"kind\":\"object\",\"type\":\"Topic\",\"relationName\":\"Topic\"},{\"name\":\"topicId\",\"kind\":\"scalar\",\"type\":\"BigInt\"}],\"dbName\":null},\"WorkLike\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"BigInt\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"work\",\"kind\":\"object\",\"type\":\"Work\",\"relationName\":\"LikedWork\"},{\"name\":\"workId\",\"kind\":\"scalar\",\"type\":\"BigInt\"},{\"name\":\"liker\",\"kind\":\"object\",\"type\":\"Profile\",\"relationName\":\"WorkLiker\"},{\"name\":\"likerId\",\"kind\":\"scalar\",\"type\":\"BigInt\"}],\"dbName\":null},\"WorkResponse\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"BigInt\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"response\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"responder\",\"kind\":\"object\",\"type\":\"Profile\",\"relationName\":\"Responder\"},{\"name\":\"responderId\",\"kind\":\"scalar\",\"type\":\"BigInt\"},{\"name\":\"work\",\"kind\":\"object\",\"type\":\"Work\",\"relationName\":\"RespondedWork\"},{\"name\":\"workId\",\"kind\":\"scalar\",\"type\":\"BigInt\"},{\"name\":\"workResponseLikes\",\"kind\":\"object\",\"type\":\"WorkResponseLike\",\"relationName\":\"WorkResponse\"}],\"dbName\":null},\"WorkResponseLike\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"BigInt\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"workResponse\",\"kind\":\"object\",\"type\":\"WorkResponse\",\"relationName\":\"WorkResponse\"},{\"name\":\"workResponseId\",\"kind\":\"scalar\",\"type\":\"BigInt\"},{\"name\":\"liker\",\"kind\":\"object\",\"type\":\"Profile\",\"relationName\":\"ResponseLiker\"},{\"name\":\"likerId\",\"kind\":\"scalar\",\"type\":\"BigInt\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
config.engineWasm = undefined

async function decodeBase64AsWasm(wasmBase64: string): Promise<WebAssembly.Module> {
  const { Buffer } = await import('node:buffer')
  const wasmArray = Buffer.from(wasmBase64, 'base64')
  return new WebAssembly.Module(wasmArray)
}

config.compilerWasm = {
  getRuntime: async () => await import("@prisma/client/runtime/query_compiler_bg.postgresql.mjs"),

  getQueryCompilerWasmModule: async () => {
    const { wasm } = await import("@prisma/client/runtime/query_compiler_bg.postgresql.wasm-base64.mjs")
    return await decodeBase64AsWasm(wasm)
  }
}




export type LogOptions<ClientOptions extends Prisma.PrismaClientOptions> =
  'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never

export interface PrismaClientConstructor {
    /**
   * ## Prisma Client
   * 
   * Type-safe database client for TypeScript
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Works
   * const works = await prisma.work.findMany()
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  new <
    Options extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
    LogOpts extends LogOptions<Options> = LogOptions<Options>,
    OmitOpts extends Prisma.PrismaClientOptions['omit'] = Options extends { omit: infer U } ? U : Prisma.PrismaClientOptions['omit'],
    ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
  >(options?: Prisma.Subset<Options, Prisma.PrismaClientOptions> ): PrismaClient<LogOpts, OmitOpts, ExtArgs>
}

/**
 * ## Prisma Client
 * 
 * Type-safe database client for TypeScript
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Works
 * const works = await prisma.work.findMany()
 * ```
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */

export interface PrismaClient<
  in LogOpts extends Prisma.LogLevel = never,
  in out OmitOpts extends Prisma.PrismaClientOptions['omit'] = Prisma.PrismaClientOptions['omit'],
  in out ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

  $on<V extends LogOpts>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): runtime.Types.Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): runtime.Types.Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Executes a typed SQL query and returns a typed result
   * @example
   * ```
   * import { myQuery } from '@prisma/client/sql'
   * 
   * const result = await prisma.$queryRawTyped(myQuery())
   * ```
   */
  $queryRawTyped<T>(typedSql: runtime.TypedSql<unknown[], T>): Prisma.PrismaPromise<T[]>

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): runtime.Types.Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => runtime.Types.Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): runtime.Types.Utils.JsPromise<R>


  $extends: runtime.Types.Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<OmitOpts>, ExtArgs, runtime.Types.Utils.Call<Prisma.TypeMapCb<OmitOpts>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.work`: Exposes CRUD operations for the **Work** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Works
    * const works = await prisma.work.findMany()
    * ```
    */
  get work(): Prisma.WorkDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.workImage`: Exposes CRUD operations for the **WorkImage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkImages
    * const workImages = await prisma.workImage.findMany()
    * ```
    */
  get workImage(): Prisma.WorkImageDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.profile`: Exposes CRUD operations for the **Profile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Profiles
    * const profiles = await prisma.profile.findMany()
    * ```
    */
  get profile(): Prisma.ProfileDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.profileAvatar`: Exposes CRUD operations for the **ProfileAvatar** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProfileAvatars
    * const profileAvatars = await prisma.profileAvatar.findMany()
    * ```
    */
  get profileAvatar(): Prisma.ProfileAvatarDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.follow`: Exposes CRUD operations for the **Follow** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Follows
    * const follows = await prisma.follow.findMany()
    * ```
    */
  get follow(): Prisma.FollowDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.topic`: Exposes CRUD operations for the **Topic** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Topics
    * const topics = await prisma.topic.findMany()
    * ```
    */
  get topic(): Prisma.TopicDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.workTopic`: Exposes CRUD operations for the **WorkTopic** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkTopics
    * const workTopics = await prisma.workTopic.findMany()
    * ```
    */
  get workTopic(): Prisma.WorkTopicDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.workLike`: Exposes CRUD operations for the **WorkLike** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkLikes
    * const workLikes = await prisma.workLike.findMany()
    * ```
    */
  get workLike(): Prisma.WorkLikeDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.workResponse`: Exposes CRUD operations for the **WorkResponse** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkResponses
    * const workResponses = await prisma.workResponse.findMany()
    * ```
    */
  get workResponse(): Prisma.WorkResponseDelegate<ExtArgs, { omit: OmitOpts }>;

  /**
   * `prisma.workResponseLike`: Exposes CRUD operations for the **WorkResponseLike** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkResponseLikes
    * const workResponseLikes = await prisma.workResponseLike.findMany()
    * ```
    */
  get workResponseLike(): Prisma.WorkResponseLikeDelegate<ExtArgs, { omit: OmitOpts }>;
}

export function getPrismaClientClass(dirname: string): PrismaClientConstructor {
  config.dirname = dirname
  return runtime.getPrismaClient(config) as unknown as PrismaClientConstructor
}
