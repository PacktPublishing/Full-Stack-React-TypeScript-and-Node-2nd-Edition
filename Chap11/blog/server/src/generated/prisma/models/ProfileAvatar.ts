
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `ProfileAvatar` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ProfileAvatar
 * 
 */
export type ProfileAvatarModel = runtime.Types.Result.DefaultSelection<Prisma.$ProfileAvatarPayload>

export type AggregateProfileAvatar = {
  _count: ProfileAvatarCountAggregateOutputType | null
  _avg: ProfileAvatarAvgAggregateOutputType | null
  _sum: ProfileAvatarSumAggregateOutputType | null
  _min: ProfileAvatarMinAggregateOutputType | null
  _max: ProfileAvatarMaxAggregateOutputType | null
}

export type ProfileAvatarAvgAggregateOutputType = {
  id: number | null
}

export type ProfileAvatarSumAggregateOutputType = {
  id: bigint | null
}

export type ProfileAvatarMinAggregateOutputType = {
  id: bigint | null
  createdAt: Date | null
  updatedAt: Date | null
  avatar: runtime.Bytes | null
}

export type ProfileAvatarMaxAggregateOutputType = {
  id: bigint | null
  createdAt: Date | null
  updatedAt: Date | null
  avatar: runtime.Bytes | null
}

export type ProfileAvatarCountAggregateOutputType = {
  id: number
  createdAt: number
  updatedAt: number
  avatar: number
  _all: number
}


export type ProfileAvatarAvgAggregateInputType = {
  id?: true
}

export type ProfileAvatarSumAggregateInputType = {
  id?: true
}

export type ProfileAvatarMinAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  avatar?: true
}

export type ProfileAvatarMaxAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  avatar?: true
}

export type ProfileAvatarCountAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  avatar?: true
  _all?: true
}

export type ProfileAvatarAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProfileAvatar to aggregate.
   */
  where?: Prisma.ProfileAvatarWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProfileAvatars to fetch.
   */
  orderBy?: Prisma.ProfileAvatarOrderByWithRelationInput | Prisma.ProfileAvatarOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ProfileAvatarWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProfileAvatars from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProfileAvatars.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ProfileAvatars
  **/
  _count?: true | ProfileAvatarCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ProfileAvatarAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ProfileAvatarSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ProfileAvatarMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ProfileAvatarMaxAggregateInputType
}

export type GetProfileAvatarAggregateType<T extends ProfileAvatarAggregateArgs> = {
      [P in keyof T & keyof AggregateProfileAvatar]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateProfileAvatar[P]>
    : Prisma.GetScalarType<T[P], AggregateProfileAvatar[P]>
}




export type ProfileAvatarGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProfileAvatarWhereInput
  orderBy?: Prisma.ProfileAvatarOrderByWithAggregationInput | Prisma.ProfileAvatarOrderByWithAggregationInput[]
  by: Prisma.ProfileAvatarScalarFieldEnum[] | Prisma.ProfileAvatarScalarFieldEnum
  having?: Prisma.ProfileAvatarScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ProfileAvatarCountAggregateInputType | true
  _avg?: ProfileAvatarAvgAggregateInputType
  _sum?: ProfileAvatarSumAggregateInputType
  _min?: ProfileAvatarMinAggregateInputType
  _max?: ProfileAvatarMaxAggregateInputType
}

export type ProfileAvatarGroupByOutputType = {
  id: bigint
  createdAt: Date
  updatedAt: Date
  avatar: runtime.Bytes
  _count: ProfileAvatarCountAggregateOutputType | null
  _avg: ProfileAvatarAvgAggregateOutputType | null
  _sum: ProfileAvatarSumAggregateOutputType | null
  _min: ProfileAvatarMinAggregateOutputType | null
  _max: ProfileAvatarMaxAggregateOutputType | null
}

type GetProfileAvatarGroupByPayload<T extends ProfileAvatarGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ProfileAvatarGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ProfileAvatarGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ProfileAvatarGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ProfileAvatarGroupByOutputType[P]>
      }
    >
  >



export type ProfileAvatarWhereInput = {
  AND?: Prisma.ProfileAvatarWhereInput | Prisma.ProfileAvatarWhereInput[]
  OR?: Prisma.ProfileAvatarWhereInput[]
  NOT?: Prisma.ProfileAvatarWhereInput | Prisma.ProfileAvatarWhereInput[]
  id?: Prisma.BigIntFilter<"ProfileAvatar"> | bigint | number
  createdAt?: Prisma.DateTimeFilter<"ProfileAvatar"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ProfileAvatar"> | Date | string
  avatar?: Prisma.BytesFilter<"ProfileAvatar"> | runtime.Bytes
  profile?: Prisma.XOR<Prisma.ProfileNullableScalarRelationFilter, Prisma.ProfileWhereInput> | null
}

export type ProfileAvatarOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  avatar?: Prisma.SortOrder
  profile?: Prisma.ProfileOrderByWithRelationInput
}

export type ProfileAvatarWhereUniqueInput = Prisma.AtLeast<{
  id?: bigint | number
  AND?: Prisma.ProfileAvatarWhereInput | Prisma.ProfileAvatarWhereInput[]
  OR?: Prisma.ProfileAvatarWhereInput[]
  NOT?: Prisma.ProfileAvatarWhereInput | Prisma.ProfileAvatarWhereInput[]
  createdAt?: Prisma.DateTimeFilter<"ProfileAvatar"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ProfileAvatar"> | Date | string
  avatar?: Prisma.BytesFilter<"ProfileAvatar"> | runtime.Bytes
  profile?: Prisma.XOR<Prisma.ProfileNullableScalarRelationFilter, Prisma.ProfileWhereInput> | null
}, "id">

export type ProfileAvatarOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  avatar?: Prisma.SortOrder
  _count?: Prisma.ProfileAvatarCountOrderByAggregateInput
  _avg?: Prisma.ProfileAvatarAvgOrderByAggregateInput
  _max?: Prisma.ProfileAvatarMaxOrderByAggregateInput
  _min?: Prisma.ProfileAvatarMinOrderByAggregateInput
  _sum?: Prisma.ProfileAvatarSumOrderByAggregateInput
}

export type ProfileAvatarScalarWhereWithAggregatesInput = {
  AND?: Prisma.ProfileAvatarScalarWhereWithAggregatesInput | Prisma.ProfileAvatarScalarWhereWithAggregatesInput[]
  OR?: Prisma.ProfileAvatarScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ProfileAvatarScalarWhereWithAggregatesInput | Prisma.ProfileAvatarScalarWhereWithAggregatesInput[]
  id?: Prisma.BigIntWithAggregatesFilter<"ProfileAvatar"> | bigint | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ProfileAvatar"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"ProfileAvatar"> | Date | string
  avatar?: Prisma.BytesWithAggregatesFilter<"ProfileAvatar"> | runtime.Bytes
}

export type ProfileAvatarCreateInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  avatar: runtime.Bytes
  profile?: Prisma.ProfileCreateNestedOneWithoutAvatarInput
}

export type ProfileAvatarUncheckedCreateInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  avatar: runtime.Bytes
  profile?: Prisma.ProfileUncheckedCreateNestedOneWithoutAvatarInput
}

export type ProfileAvatarUpdateInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  avatar?: Prisma.BytesFieldUpdateOperationsInput | runtime.Bytes
  profile?: Prisma.ProfileUpdateOneWithoutAvatarNestedInput
}

export type ProfileAvatarUncheckedUpdateInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  avatar?: Prisma.BytesFieldUpdateOperationsInput | runtime.Bytes
  profile?: Prisma.ProfileUncheckedUpdateOneWithoutAvatarNestedInput
}

export type ProfileAvatarCreateManyInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  avatar: runtime.Bytes
}

export type ProfileAvatarUpdateManyMutationInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  avatar?: Prisma.BytesFieldUpdateOperationsInput | runtime.Bytes
}

export type ProfileAvatarUncheckedUpdateManyInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  avatar?: Prisma.BytesFieldUpdateOperationsInput | runtime.Bytes
}

export type ProfileAvatarNullableScalarRelationFilter = {
  is?: Prisma.ProfileAvatarWhereInput | null
  isNot?: Prisma.ProfileAvatarWhereInput | null
}

export type ProfileAvatarCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  avatar?: Prisma.SortOrder
}

export type ProfileAvatarAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type ProfileAvatarMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  avatar?: Prisma.SortOrder
}

export type ProfileAvatarMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  avatar?: Prisma.SortOrder
}

export type ProfileAvatarSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type ProfileAvatarCreateNestedOneWithoutProfileInput = {
  create?: Prisma.XOR<Prisma.ProfileAvatarCreateWithoutProfileInput, Prisma.ProfileAvatarUncheckedCreateWithoutProfileInput>
  connectOrCreate?: Prisma.ProfileAvatarCreateOrConnectWithoutProfileInput
  connect?: Prisma.ProfileAvatarWhereUniqueInput
}

export type ProfileAvatarUpdateOneWithoutProfileNestedInput = {
  create?: Prisma.XOR<Prisma.ProfileAvatarCreateWithoutProfileInput, Prisma.ProfileAvatarUncheckedCreateWithoutProfileInput>
  connectOrCreate?: Prisma.ProfileAvatarCreateOrConnectWithoutProfileInput
  upsert?: Prisma.ProfileAvatarUpsertWithoutProfileInput
  disconnect?: Prisma.ProfileAvatarWhereInput | boolean
  delete?: Prisma.ProfileAvatarWhereInput | boolean
  connect?: Prisma.ProfileAvatarWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ProfileAvatarUpdateToOneWithWhereWithoutProfileInput, Prisma.ProfileAvatarUpdateWithoutProfileInput>, Prisma.ProfileAvatarUncheckedUpdateWithoutProfileInput>
}

export type ProfileAvatarCreateWithoutProfileInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  avatar: runtime.Bytes
}

export type ProfileAvatarUncheckedCreateWithoutProfileInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  avatar: runtime.Bytes
}

export type ProfileAvatarCreateOrConnectWithoutProfileInput = {
  where: Prisma.ProfileAvatarWhereUniqueInput
  create: Prisma.XOR<Prisma.ProfileAvatarCreateWithoutProfileInput, Prisma.ProfileAvatarUncheckedCreateWithoutProfileInput>
}

export type ProfileAvatarUpsertWithoutProfileInput = {
  update: Prisma.XOR<Prisma.ProfileAvatarUpdateWithoutProfileInput, Prisma.ProfileAvatarUncheckedUpdateWithoutProfileInput>
  create: Prisma.XOR<Prisma.ProfileAvatarCreateWithoutProfileInput, Prisma.ProfileAvatarUncheckedCreateWithoutProfileInput>
  where?: Prisma.ProfileAvatarWhereInput
}

export type ProfileAvatarUpdateToOneWithWhereWithoutProfileInput = {
  where?: Prisma.ProfileAvatarWhereInput
  data: Prisma.XOR<Prisma.ProfileAvatarUpdateWithoutProfileInput, Prisma.ProfileAvatarUncheckedUpdateWithoutProfileInput>
}

export type ProfileAvatarUpdateWithoutProfileInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  avatar?: Prisma.BytesFieldUpdateOperationsInput | runtime.Bytes
}

export type ProfileAvatarUncheckedUpdateWithoutProfileInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  avatar?: Prisma.BytesFieldUpdateOperationsInput | runtime.Bytes
}



export type ProfileAvatarSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  avatar?: boolean
  profile?: boolean | Prisma.ProfileAvatar$profileArgs<ExtArgs>
}, ExtArgs["result"]["profileAvatar"]>

export type ProfileAvatarSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  avatar?: boolean
}, ExtArgs["result"]["profileAvatar"]>

export type ProfileAvatarSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  avatar?: boolean
}, ExtArgs["result"]["profileAvatar"]>

export type ProfileAvatarSelectScalar = {
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  avatar?: boolean
}

export type ProfileAvatarOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "avatar", ExtArgs["result"]["profileAvatar"]>
export type ProfileAvatarInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  profile?: boolean | Prisma.ProfileAvatar$profileArgs<ExtArgs>
}
export type ProfileAvatarIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type ProfileAvatarIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $ProfileAvatarPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ProfileAvatar"
  objects: {
    profile: Prisma.$ProfilePayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: bigint
    createdAt: Date
    updatedAt: Date
    avatar: runtime.Bytes
  }, ExtArgs["result"]["profileAvatar"]>
  composites: {}
}

export type ProfileAvatarGetPayload<S extends boolean | null | undefined | ProfileAvatarDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ProfileAvatarPayload, S>

export type ProfileAvatarCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ProfileAvatarFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ProfileAvatarCountAggregateInputType | true
  }

export interface ProfileAvatarDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProfileAvatar'], meta: { name: 'ProfileAvatar' } }
  /**
   * Find zero or one ProfileAvatar that matches the filter.
   * @param {ProfileAvatarFindUniqueArgs} args - Arguments to find a ProfileAvatar
   * @example
   * // Get one ProfileAvatar
   * const profileAvatar = await prisma.profileAvatar.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ProfileAvatarFindUniqueArgs>(args: Prisma.SelectSubset<T, ProfileAvatarFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ProfileAvatarClient<runtime.Types.Result.GetResult<Prisma.$ProfileAvatarPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ProfileAvatar that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ProfileAvatarFindUniqueOrThrowArgs} args - Arguments to find a ProfileAvatar
   * @example
   * // Get one ProfileAvatar
   * const profileAvatar = await prisma.profileAvatar.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ProfileAvatarFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ProfileAvatarFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProfileAvatarClient<runtime.Types.Result.GetResult<Prisma.$ProfileAvatarPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProfileAvatar that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProfileAvatarFindFirstArgs} args - Arguments to find a ProfileAvatar
   * @example
   * // Get one ProfileAvatar
   * const profileAvatar = await prisma.profileAvatar.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ProfileAvatarFindFirstArgs>(args?: Prisma.SelectSubset<T, ProfileAvatarFindFirstArgs<ExtArgs>>): Prisma.Prisma__ProfileAvatarClient<runtime.Types.Result.GetResult<Prisma.$ProfileAvatarPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProfileAvatar that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProfileAvatarFindFirstOrThrowArgs} args - Arguments to find a ProfileAvatar
   * @example
   * // Get one ProfileAvatar
   * const profileAvatar = await prisma.profileAvatar.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ProfileAvatarFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ProfileAvatarFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProfileAvatarClient<runtime.Types.Result.GetResult<Prisma.$ProfileAvatarPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ProfileAvatars that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProfileAvatarFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ProfileAvatars
   * const profileAvatars = await prisma.profileAvatar.findMany()
   * 
   * // Get first 10 ProfileAvatars
   * const profileAvatars = await prisma.profileAvatar.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const profileAvatarWithIdOnly = await prisma.profileAvatar.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ProfileAvatarFindManyArgs>(args?: Prisma.SelectSubset<T, ProfileAvatarFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProfileAvatarPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ProfileAvatar.
   * @param {ProfileAvatarCreateArgs} args - Arguments to create a ProfileAvatar.
   * @example
   * // Create one ProfileAvatar
   * const ProfileAvatar = await prisma.profileAvatar.create({
   *   data: {
   *     // ... data to create a ProfileAvatar
   *   }
   * })
   * 
   */
  create<T extends ProfileAvatarCreateArgs>(args: Prisma.SelectSubset<T, ProfileAvatarCreateArgs<ExtArgs>>): Prisma.Prisma__ProfileAvatarClient<runtime.Types.Result.GetResult<Prisma.$ProfileAvatarPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ProfileAvatars.
   * @param {ProfileAvatarCreateManyArgs} args - Arguments to create many ProfileAvatars.
   * @example
   * // Create many ProfileAvatars
   * const profileAvatar = await prisma.profileAvatar.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ProfileAvatarCreateManyArgs>(args?: Prisma.SelectSubset<T, ProfileAvatarCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ProfileAvatars and returns the data saved in the database.
   * @param {ProfileAvatarCreateManyAndReturnArgs} args - Arguments to create many ProfileAvatars.
   * @example
   * // Create many ProfileAvatars
   * const profileAvatar = await prisma.profileAvatar.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ProfileAvatars and only return the `id`
   * const profileAvatarWithIdOnly = await prisma.profileAvatar.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ProfileAvatarCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ProfileAvatarCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProfileAvatarPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ProfileAvatar.
   * @param {ProfileAvatarDeleteArgs} args - Arguments to delete one ProfileAvatar.
   * @example
   * // Delete one ProfileAvatar
   * const ProfileAvatar = await prisma.profileAvatar.delete({
   *   where: {
   *     // ... filter to delete one ProfileAvatar
   *   }
   * })
   * 
   */
  delete<T extends ProfileAvatarDeleteArgs>(args: Prisma.SelectSubset<T, ProfileAvatarDeleteArgs<ExtArgs>>): Prisma.Prisma__ProfileAvatarClient<runtime.Types.Result.GetResult<Prisma.$ProfileAvatarPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ProfileAvatar.
   * @param {ProfileAvatarUpdateArgs} args - Arguments to update one ProfileAvatar.
   * @example
   * // Update one ProfileAvatar
   * const profileAvatar = await prisma.profileAvatar.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ProfileAvatarUpdateArgs>(args: Prisma.SelectSubset<T, ProfileAvatarUpdateArgs<ExtArgs>>): Prisma.Prisma__ProfileAvatarClient<runtime.Types.Result.GetResult<Prisma.$ProfileAvatarPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ProfileAvatars.
   * @param {ProfileAvatarDeleteManyArgs} args - Arguments to filter ProfileAvatars to delete.
   * @example
   * // Delete a few ProfileAvatars
   * const { count } = await prisma.profileAvatar.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ProfileAvatarDeleteManyArgs>(args?: Prisma.SelectSubset<T, ProfileAvatarDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProfileAvatars.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProfileAvatarUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ProfileAvatars
   * const profileAvatar = await prisma.profileAvatar.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ProfileAvatarUpdateManyArgs>(args: Prisma.SelectSubset<T, ProfileAvatarUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProfileAvatars and returns the data updated in the database.
   * @param {ProfileAvatarUpdateManyAndReturnArgs} args - Arguments to update many ProfileAvatars.
   * @example
   * // Update many ProfileAvatars
   * const profileAvatar = await prisma.profileAvatar.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ProfileAvatars and only return the `id`
   * const profileAvatarWithIdOnly = await prisma.profileAvatar.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ProfileAvatarUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ProfileAvatarUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProfileAvatarPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ProfileAvatar.
   * @param {ProfileAvatarUpsertArgs} args - Arguments to update or create a ProfileAvatar.
   * @example
   * // Update or create a ProfileAvatar
   * const profileAvatar = await prisma.profileAvatar.upsert({
   *   create: {
   *     // ... data to create a ProfileAvatar
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ProfileAvatar we want to update
   *   }
   * })
   */
  upsert<T extends ProfileAvatarUpsertArgs>(args: Prisma.SelectSubset<T, ProfileAvatarUpsertArgs<ExtArgs>>): Prisma.Prisma__ProfileAvatarClient<runtime.Types.Result.GetResult<Prisma.$ProfileAvatarPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ProfileAvatars.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProfileAvatarCountArgs} args - Arguments to filter ProfileAvatars to count.
   * @example
   * // Count the number of ProfileAvatars
   * const count = await prisma.profileAvatar.count({
   *   where: {
   *     // ... the filter for the ProfileAvatars we want to count
   *   }
   * })
  **/
  count<T extends ProfileAvatarCountArgs>(
    args?: Prisma.Subset<T, ProfileAvatarCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ProfileAvatarCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ProfileAvatar.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProfileAvatarAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ProfileAvatarAggregateArgs>(args: Prisma.Subset<T, ProfileAvatarAggregateArgs>): Prisma.PrismaPromise<GetProfileAvatarAggregateType<T>>

  /**
   * Group by ProfileAvatar.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProfileAvatarGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ProfileAvatarGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ProfileAvatarGroupByArgs['orderBy'] }
      : { orderBy?: ProfileAvatarGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ProfileAvatarGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfileAvatarGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ProfileAvatar model
 */
readonly fields: ProfileAvatarFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ProfileAvatar.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ProfileAvatarClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  profile<T extends Prisma.ProfileAvatar$profileArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProfileAvatar$profileArgs<ExtArgs>>): Prisma.Prisma__ProfileClient<runtime.Types.Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ProfileAvatar model
 */
export interface ProfileAvatarFieldRefs {
  readonly id: Prisma.FieldRef<"ProfileAvatar", 'BigInt'>
  readonly createdAt: Prisma.FieldRef<"ProfileAvatar", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"ProfileAvatar", 'DateTime'>
  readonly avatar: Prisma.FieldRef<"ProfileAvatar", 'Bytes'>
}
    

// Custom InputTypes
/**
 * ProfileAvatar findUnique
 */
export type ProfileAvatarFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProfileAvatar
   */
  select?: Prisma.ProfileAvatarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProfileAvatar
   */
  omit?: Prisma.ProfileAvatarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProfileAvatarInclude<ExtArgs> | null
  /**
   * Filter, which ProfileAvatar to fetch.
   */
  where: Prisma.ProfileAvatarWhereUniqueInput
}

/**
 * ProfileAvatar findUniqueOrThrow
 */
export type ProfileAvatarFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProfileAvatar
   */
  select?: Prisma.ProfileAvatarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProfileAvatar
   */
  omit?: Prisma.ProfileAvatarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProfileAvatarInclude<ExtArgs> | null
  /**
   * Filter, which ProfileAvatar to fetch.
   */
  where: Prisma.ProfileAvatarWhereUniqueInput
}

/**
 * ProfileAvatar findFirst
 */
export type ProfileAvatarFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProfileAvatar
   */
  select?: Prisma.ProfileAvatarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProfileAvatar
   */
  omit?: Prisma.ProfileAvatarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProfileAvatarInclude<ExtArgs> | null
  /**
   * Filter, which ProfileAvatar to fetch.
   */
  where?: Prisma.ProfileAvatarWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProfileAvatars to fetch.
   */
  orderBy?: Prisma.ProfileAvatarOrderByWithRelationInput | Prisma.ProfileAvatarOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProfileAvatars.
   */
  cursor?: Prisma.ProfileAvatarWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProfileAvatars from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProfileAvatars.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProfileAvatars.
   */
  distinct?: Prisma.ProfileAvatarScalarFieldEnum | Prisma.ProfileAvatarScalarFieldEnum[]
}

/**
 * ProfileAvatar findFirstOrThrow
 */
export type ProfileAvatarFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProfileAvatar
   */
  select?: Prisma.ProfileAvatarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProfileAvatar
   */
  omit?: Prisma.ProfileAvatarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProfileAvatarInclude<ExtArgs> | null
  /**
   * Filter, which ProfileAvatar to fetch.
   */
  where?: Prisma.ProfileAvatarWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProfileAvatars to fetch.
   */
  orderBy?: Prisma.ProfileAvatarOrderByWithRelationInput | Prisma.ProfileAvatarOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProfileAvatars.
   */
  cursor?: Prisma.ProfileAvatarWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProfileAvatars from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProfileAvatars.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProfileAvatars.
   */
  distinct?: Prisma.ProfileAvatarScalarFieldEnum | Prisma.ProfileAvatarScalarFieldEnum[]
}

/**
 * ProfileAvatar findMany
 */
export type ProfileAvatarFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProfileAvatar
   */
  select?: Prisma.ProfileAvatarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProfileAvatar
   */
  omit?: Prisma.ProfileAvatarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProfileAvatarInclude<ExtArgs> | null
  /**
   * Filter, which ProfileAvatars to fetch.
   */
  where?: Prisma.ProfileAvatarWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProfileAvatars to fetch.
   */
  orderBy?: Prisma.ProfileAvatarOrderByWithRelationInput | Prisma.ProfileAvatarOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ProfileAvatars.
   */
  cursor?: Prisma.ProfileAvatarWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProfileAvatars from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProfileAvatars.
   */
  skip?: number
  distinct?: Prisma.ProfileAvatarScalarFieldEnum | Prisma.ProfileAvatarScalarFieldEnum[]
}

/**
 * ProfileAvatar create
 */
export type ProfileAvatarCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProfileAvatar
   */
  select?: Prisma.ProfileAvatarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProfileAvatar
   */
  omit?: Prisma.ProfileAvatarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProfileAvatarInclude<ExtArgs> | null
  /**
   * The data needed to create a ProfileAvatar.
   */
  data: Prisma.XOR<Prisma.ProfileAvatarCreateInput, Prisma.ProfileAvatarUncheckedCreateInput>
}

/**
 * ProfileAvatar createMany
 */
export type ProfileAvatarCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ProfileAvatars.
   */
  data: Prisma.ProfileAvatarCreateManyInput | Prisma.ProfileAvatarCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ProfileAvatar createManyAndReturn
 */
export type ProfileAvatarCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProfileAvatar
   */
  select?: Prisma.ProfileAvatarSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProfileAvatar
   */
  omit?: Prisma.ProfileAvatarOmit<ExtArgs> | null
  /**
   * The data used to create many ProfileAvatars.
   */
  data: Prisma.ProfileAvatarCreateManyInput | Prisma.ProfileAvatarCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ProfileAvatar update
 */
export type ProfileAvatarUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProfileAvatar
   */
  select?: Prisma.ProfileAvatarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProfileAvatar
   */
  omit?: Prisma.ProfileAvatarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProfileAvatarInclude<ExtArgs> | null
  /**
   * The data needed to update a ProfileAvatar.
   */
  data: Prisma.XOR<Prisma.ProfileAvatarUpdateInput, Prisma.ProfileAvatarUncheckedUpdateInput>
  /**
   * Choose, which ProfileAvatar to update.
   */
  where: Prisma.ProfileAvatarWhereUniqueInput
}

/**
 * ProfileAvatar updateMany
 */
export type ProfileAvatarUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ProfileAvatars.
   */
  data: Prisma.XOR<Prisma.ProfileAvatarUpdateManyMutationInput, Prisma.ProfileAvatarUncheckedUpdateManyInput>
  /**
   * Filter which ProfileAvatars to update
   */
  where?: Prisma.ProfileAvatarWhereInput
  /**
   * Limit how many ProfileAvatars to update.
   */
  limit?: number
}

/**
 * ProfileAvatar updateManyAndReturn
 */
export type ProfileAvatarUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProfileAvatar
   */
  select?: Prisma.ProfileAvatarSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProfileAvatar
   */
  omit?: Prisma.ProfileAvatarOmit<ExtArgs> | null
  /**
   * The data used to update ProfileAvatars.
   */
  data: Prisma.XOR<Prisma.ProfileAvatarUpdateManyMutationInput, Prisma.ProfileAvatarUncheckedUpdateManyInput>
  /**
   * Filter which ProfileAvatars to update
   */
  where?: Prisma.ProfileAvatarWhereInput
  /**
   * Limit how many ProfileAvatars to update.
   */
  limit?: number
}

/**
 * ProfileAvatar upsert
 */
export type ProfileAvatarUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProfileAvatar
   */
  select?: Prisma.ProfileAvatarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProfileAvatar
   */
  omit?: Prisma.ProfileAvatarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProfileAvatarInclude<ExtArgs> | null
  /**
   * The filter to search for the ProfileAvatar to update in case it exists.
   */
  where: Prisma.ProfileAvatarWhereUniqueInput
  /**
   * In case the ProfileAvatar found by the `where` argument doesn't exist, create a new ProfileAvatar with this data.
   */
  create: Prisma.XOR<Prisma.ProfileAvatarCreateInput, Prisma.ProfileAvatarUncheckedCreateInput>
  /**
   * In case the ProfileAvatar was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ProfileAvatarUpdateInput, Prisma.ProfileAvatarUncheckedUpdateInput>
}

/**
 * ProfileAvatar delete
 */
export type ProfileAvatarDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProfileAvatar
   */
  select?: Prisma.ProfileAvatarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProfileAvatar
   */
  omit?: Prisma.ProfileAvatarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProfileAvatarInclude<ExtArgs> | null
  /**
   * Filter which ProfileAvatar to delete.
   */
  where: Prisma.ProfileAvatarWhereUniqueInput
}

/**
 * ProfileAvatar deleteMany
 */
export type ProfileAvatarDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProfileAvatars to delete
   */
  where?: Prisma.ProfileAvatarWhereInput
  /**
   * Limit how many ProfileAvatars to delete.
   */
  limit?: number
}

/**
 * ProfileAvatar.profile
 */
export type ProfileAvatar$profileArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Profile
   */
  select?: Prisma.ProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Profile
   */
  omit?: Prisma.ProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProfileInclude<ExtArgs> | null
  where?: Prisma.ProfileWhereInput
}

/**
 * ProfileAvatar without action
 */
export type ProfileAvatarDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProfileAvatar
   */
  select?: Prisma.ProfileAvatarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProfileAvatar
   */
  omit?: Prisma.ProfileAvatarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProfileAvatarInclude<ExtArgs> | null
}
