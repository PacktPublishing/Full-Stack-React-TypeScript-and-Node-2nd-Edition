
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `WorkImage` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model WorkImage
 * 
 */
export type WorkImageModel = runtime.Types.Result.DefaultSelection<Prisma.$WorkImagePayload>

export type AggregateWorkImage = {
  _count: WorkImageCountAggregateOutputType | null
  _avg: WorkImageAvgAggregateOutputType | null
  _sum: WorkImageSumAggregateOutputType | null
  _min: WorkImageMinAggregateOutputType | null
  _max: WorkImageMaxAggregateOutputType | null
}

export type WorkImageAvgAggregateOutputType = {
  id: number | null
  workId: number | null
}

export type WorkImageSumAggregateOutputType = {
  id: bigint | null
  workId: bigint | null
}

export type WorkImageMinAggregateOutputType = {
  id: bigint | null
  createdAt: Date | null
  updatedAt: Date | null
  imagePlaceholder: string | null
  image: runtime.Bytes | null
  workId: bigint | null
}

export type WorkImageMaxAggregateOutputType = {
  id: bigint | null
  createdAt: Date | null
  updatedAt: Date | null
  imagePlaceholder: string | null
  image: runtime.Bytes | null
  workId: bigint | null
}

export type WorkImageCountAggregateOutputType = {
  id: number
  createdAt: number
  updatedAt: number
  imagePlaceholder: number
  image: number
  workId: number
  _all: number
}


export type WorkImageAvgAggregateInputType = {
  id?: true
  workId?: true
}

export type WorkImageSumAggregateInputType = {
  id?: true
  workId?: true
}

export type WorkImageMinAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  imagePlaceholder?: true
  image?: true
  workId?: true
}

export type WorkImageMaxAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  imagePlaceholder?: true
  image?: true
  workId?: true
}

export type WorkImageCountAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  imagePlaceholder?: true
  image?: true
  workId?: true
  _all?: true
}

export type WorkImageAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which WorkImage to aggregate.
   */
  where?: Prisma.WorkImageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WorkImages to fetch.
   */
  orderBy?: Prisma.WorkImageOrderByWithRelationInput | Prisma.WorkImageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.WorkImageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WorkImages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WorkImages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned WorkImages
  **/
  _count?: true | WorkImageCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: WorkImageAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: WorkImageSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: WorkImageMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: WorkImageMaxAggregateInputType
}

export type GetWorkImageAggregateType<T extends WorkImageAggregateArgs> = {
      [P in keyof T & keyof AggregateWorkImage]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateWorkImage[P]>
    : Prisma.GetScalarType<T[P], AggregateWorkImage[P]>
}




export type WorkImageGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.WorkImageWhereInput
  orderBy?: Prisma.WorkImageOrderByWithAggregationInput | Prisma.WorkImageOrderByWithAggregationInput[]
  by: Prisma.WorkImageScalarFieldEnum[] | Prisma.WorkImageScalarFieldEnum
  having?: Prisma.WorkImageScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: WorkImageCountAggregateInputType | true
  _avg?: WorkImageAvgAggregateInputType
  _sum?: WorkImageSumAggregateInputType
  _min?: WorkImageMinAggregateInputType
  _max?: WorkImageMaxAggregateInputType
}

export type WorkImageGroupByOutputType = {
  id: bigint
  createdAt: Date
  updatedAt: Date
  imagePlaceholder: string
  image: runtime.Bytes
  workId: bigint
  _count: WorkImageCountAggregateOutputType | null
  _avg: WorkImageAvgAggregateOutputType | null
  _sum: WorkImageSumAggregateOutputType | null
  _min: WorkImageMinAggregateOutputType | null
  _max: WorkImageMaxAggregateOutputType | null
}

type GetWorkImageGroupByPayload<T extends WorkImageGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<WorkImageGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof WorkImageGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], WorkImageGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], WorkImageGroupByOutputType[P]>
      }
    >
  >



export type WorkImageWhereInput = {
  AND?: Prisma.WorkImageWhereInput | Prisma.WorkImageWhereInput[]
  OR?: Prisma.WorkImageWhereInput[]
  NOT?: Prisma.WorkImageWhereInput | Prisma.WorkImageWhereInput[]
  id?: Prisma.BigIntFilter<"WorkImage"> | bigint | number
  createdAt?: Prisma.DateTimeFilter<"WorkImage"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"WorkImage"> | Date | string
  imagePlaceholder?: Prisma.StringFilter<"WorkImage"> | string
  image?: Prisma.BytesFilter<"WorkImage"> | runtime.Bytes
  workId?: Prisma.BigIntFilter<"WorkImage"> | bigint | number
  work?: Prisma.XOR<Prisma.WorkScalarRelationFilter, Prisma.WorkWhereInput>
}

export type WorkImageOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  imagePlaceholder?: Prisma.SortOrder
  image?: Prisma.SortOrder
  workId?: Prisma.SortOrder
  work?: Prisma.WorkOrderByWithRelationInput
}

export type WorkImageWhereUniqueInput = Prisma.AtLeast<{
  id?: bigint | number
  AND?: Prisma.WorkImageWhereInput | Prisma.WorkImageWhereInput[]
  OR?: Prisma.WorkImageWhereInput[]
  NOT?: Prisma.WorkImageWhereInput | Prisma.WorkImageWhereInput[]
  createdAt?: Prisma.DateTimeFilter<"WorkImage"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"WorkImage"> | Date | string
  imagePlaceholder?: Prisma.StringFilter<"WorkImage"> | string
  image?: Prisma.BytesFilter<"WorkImage"> | runtime.Bytes
  workId?: Prisma.BigIntFilter<"WorkImage"> | bigint | number
  work?: Prisma.XOR<Prisma.WorkScalarRelationFilter, Prisma.WorkWhereInput>
}, "id">

export type WorkImageOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  imagePlaceholder?: Prisma.SortOrder
  image?: Prisma.SortOrder
  workId?: Prisma.SortOrder
  _count?: Prisma.WorkImageCountOrderByAggregateInput
  _avg?: Prisma.WorkImageAvgOrderByAggregateInput
  _max?: Prisma.WorkImageMaxOrderByAggregateInput
  _min?: Prisma.WorkImageMinOrderByAggregateInput
  _sum?: Prisma.WorkImageSumOrderByAggregateInput
}

export type WorkImageScalarWhereWithAggregatesInput = {
  AND?: Prisma.WorkImageScalarWhereWithAggregatesInput | Prisma.WorkImageScalarWhereWithAggregatesInput[]
  OR?: Prisma.WorkImageScalarWhereWithAggregatesInput[]
  NOT?: Prisma.WorkImageScalarWhereWithAggregatesInput | Prisma.WorkImageScalarWhereWithAggregatesInput[]
  id?: Prisma.BigIntWithAggregatesFilter<"WorkImage"> | bigint | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"WorkImage"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"WorkImage"> | Date | string
  imagePlaceholder?: Prisma.StringWithAggregatesFilter<"WorkImage"> | string
  image?: Prisma.BytesWithAggregatesFilter<"WorkImage"> | runtime.Bytes
  workId?: Prisma.BigIntWithAggregatesFilter<"WorkImage"> | bigint | number
}

export type WorkImageCreateInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  imagePlaceholder: string
  image: runtime.Bytes
  work: Prisma.WorkCreateNestedOneWithoutWorkImagesInput
}

export type WorkImageUncheckedCreateInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  imagePlaceholder: string
  image: runtime.Bytes
  workId: bigint | number
}

export type WorkImageUpdateInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  imagePlaceholder?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.BytesFieldUpdateOperationsInput | runtime.Bytes
  work?: Prisma.WorkUpdateOneRequiredWithoutWorkImagesNestedInput
}

export type WorkImageUncheckedUpdateInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  imagePlaceholder?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.BytesFieldUpdateOperationsInput | runtime.Bytes
  workId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
}

export type WorkImageCreateManyInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  imagePlaceholder: string
  image: runtime.Bytes
  workId: bigint | number
}

export type WorkImageUpdateManyMutationInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  imagePlaceholder?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.BytesFieldUpdateOperationsInput | runtime.Bytes
}

export type WorkImageUncheckedUpdateManyInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  imagePlaceholder?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.BytesFieldUpdateOperationsInput | runtime.Bytes
  workId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
}

export type WorkImageListRelationFilter = {
  every?: Prisma.WorkImageWhereInput
  some?: Prisma.WorkImageWhereInput
  none?: Prisma.WorkImageWhereInput
}

export type WorkImageOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type WorkImageCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  imagePlaceholder?: Prisma.SortOrder
  image?: Prisma.SortOrder
  workId?: Prisma.SortOrder
}

export type WorkImageAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  workId?: Prisma.SortOrder
}

export type WorkImageMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  imagePlaceholder?: Prisma.SortOrder
  image?: Prisma.SortOrder
  workId?: Prisma.SortOrder
}

export type WorkImageMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  imagePlaceholder?: Prisma.SortOrder
  image?: Prisma.SortOrder
  workId?: Prisma.SortOrder
}

export type WorkImageSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  workId?: Prisma.SortOrder
}

export type WorkImageCreateNestedManyWithoutWorkInput = {
  create?: Prisma.XOR<Prisma.WorkImageCreateWithoutWorkInput, Prisma.WorkImageUncheckedCreateWithoutWorkInput> | Prisma.WorkImageCreateWithoutWorkInput[] | Prisma.WorkImageUncheckedCreateWithoutWorkInput[]
  connectOrCreate?: Prisma.WorkImageCreateOrConnectWithoutWorkInput | Prisma.WorkImageCreateOrConnectWithoutWorkInput[]
  createMany?: Prisma.WorkImageCreateManyWorkInputEnvelope
  connect?: Prisma.WorkImageWhereUniqueInput | Prisma.WorkImageWhereUniqueInput[]
}

export type WorkImageUncheckedCreateNestedManyWithoutWorkInput = {
  create?: Prisma.XOR<Prisma.WorkImageCreateWithoutWorkInput, Prisma.WorkImageUncheckedCreateWithoutWorkInput> | Prisma.WorkImageCreateWithoutWorkInput[] | Prisma.WorkImageUncheckedCreateWithoutWorkInput[]
  connectOrCreate?: Prisma.WorkImageCreateOrConnectWithoutWorkInput | Prisma.WorkImageCreateOrConnectWithoutWorkInput[]
  createMany?: Prisma.WorkImageCreateManyWorkInputEnvelope
  connect?: Prisma.WorkImageWhereUniqueInput | Prisma.WorkImageWhereUniqueInput[]
}

export type WorkImageUpdateManyWithoutWorkNestedInput = {
  create?: Prisma.XOR<Prisma.WorkImageCreateWithoutWorkInput, Prisma.WorkImageUncheckedCreateWithoutWorkInput> | Prisma.WorkImageCreateWithoutWorkInput[] | Prisma.WorkImageUncheckedCreateWithoutWorkInput[]
  connectOrCreate?: Prisma.WorkImageCreateOrConnectWithoutWorkInput | Prisma.WorkImageCreateOrConnectWithoutWorkInput[]
  upsert?: Prisma.WorkImageUpsertWithWhereUniqueWithoutWorkInput | Prisma.WorkImageUpsertWithWhereUniqueWithoutWorkInput[]
  createMany?: Prisma.WorkImageCreateManyWorkInputEnvelope
  set?: Prisma.WorkImageWhereUniqueInput | Prisma.WorkImageWhereUniqueInput[]
  disconnect?: Prisma.WorkImageWhereUniqueInput | Prisma.WorkImageWhereUniqueInput[]
  delete?: Prisma.WorkImageWhereUniqueInput | Prisma.WorkImageWhereUniqueInput[]
  connect?: Prisma.WorkImageWhereUniqueInput | Prisma.WorkImageWhereUniqueInput[]
  update?: Prisma.WorkImageUpdateWithWhereUniqueWithoutWorkInput | Prisma.WorkImageUpdateWithWhereUniqueWithoutWorkInput[]
  updateMany?: Prisma.WorkImageUpdateManyWithWhereWithoutWorkInput | Prisma.WorkImageUpdateManyWithWhereWithoutWorkInput[]
  deleteMany?: Prisma.WorkImageScalarWhereInput | Prisma.WorkImageScalarWhereInput[]
}

export type WorkImageUncheckedUpdateManyWithoutWorkNestedInput = {
  create?: Prisma.XOR<Prisma.WorkImageCreateWithoutWorkInput, Prisma.WorkImageUncheckedCreateWithoutWorkInput> | Prisma.WorkImageCreateWithoutWorkInput[] | Prisma.WorkImageUncheckedCreateWithoutWorkInput[]
  connectOrCreate?: Prisma.WorkImageCreateOrConnectWithoutWorkInput | Prisma.WorkImageCreateOrConnectWithoutWorkInput[]
  upsert?: Prisma.WorkImageUpsertWithWhereUniqueWithoutWorkInput | Prisma.WorkImageUpsertWithWhereUniqueWithoutWorkInput[]
  createMany?: Prisma.WorkImageCreateManyWorkInputEnvelope
  set?: Prisma.WorkImageWhereUniqueInput | Prisma.WorkImageWhereUniqueInput[]
  disconnect?: Prisma.WorkImageWhereUniqueInput | Prisma.WorkImageWhereUniqueInput[]
  delete?: Prisma.WorkImageWhereUniqueInput | Prisma.WorkImageWhereUniqueInput[]
  connect?: Prisma.WorkImageWhereUniqueInput | Prisma.WorkImageWhereUniqueInput[]
  update?: Prisma.WorkImageUpdateWithWhereUniqueWithoutWorkInput | Prisma.WorkImageUpdateWithWhereUniqueWithoutWorkInput[]
  updateMany?: Prisma.WorkImageUpdateManyWithWhereWithoutWorkInput | Prisma.WorkImageUpdateManyWithWhereWithoutWorkInput[]
  deleteMany?: Prisma.WorkImageScalarWhereInput | Prisma.WorkImageScalarWhereInput[]
}

export type BytesFieldUpdateOperationsInput = {
  set?: runtime.Bytes
}

export type WorkImageCreateWithoutWorkInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  imagePlaceholder: string
  image: runtime.Bytes
}

export type WorkImageUncheckedCreateWithoutWorkInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  imagePlaceholder: string
  image: runtime.Bytes
}

export type WorkImageCreateOrConnectWithoutWorkInput = {
  where: Prisma.WorkImageWhereUniqueInput
  create: Prisma.XOR<Prisma.WorkImageCreateWithoutWorkInput, Prisma.WorkImageUncheckedCreateWithoutWorkInput>
}

export type WorkImageCreateManyWorkInputEnvelope = {
  data: Prisma.WorkImageCreateManyWorkInput | Prisma.WorkImageCreateManyWorkInput[]
  skipDuplicates?: boolean
}

export type WorkImageUpsertWithWhereUniqueWithoutWorkInput = {
  where: Prisma.WorkImageWhereUniqueInput
  update: Prisma.XOR<Prisma.WorkImageUpdateWithoutWorkInput, Prisma.WorkImageUncheckedUpdateWithoutWorkInput>
  create: Prisma.XOR<Prisma.WorkImageCreateWithoutWorkInput, Prisma.WorkImageUncheckedCreateWithoutWorkInput>
}

export type WorkImageUpdateWithWhereUniqueWithoutWorkInput = {
  where: Prisma.WorkImageWhereUniqueInput
  data: Prisma.XOR<Prisma.WorkImageUpdateWithoutWorkInput, Prisma.WorkImageUncheckedUpdateWithoutWorkInput>
}

export type WorkImageUpdateManyWithWhereWithoutWorkInput = {
  where: Prisma.WorkImageScalarWhereInput
  data: Prisma.XOR<Prisma.WorkImageUpdateManyMutationInput, Prisma.WorkImageUncheckedUpdateManyWithoutWorkInput>
}

export type WorkImageScalarWhereInput = {
  AND?: Prisma.WorkImageScalarWhereInput | Prisma.WorkImageScalarWhereInput[]
  OR?: Prisma.WorkImageScalarWhereInput[]
  NOT?: Prisma.WorkImageScalarWhereInput | Prisma.WorkImageScalarWhereInput[]
  id?: Prisma.BigIntFilter<"WorkImage"> | bigint | number
  createdAt?: Prisma.DateTimeFilter<"WorkImage"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"WorkImage"> | Date | string
  imagePlaceholder?: Prisma.StringFilter<"WorkImage"> | string
  image?: Prisma.BytesFilter<"WorkImage"> | runtime.Bytes
  workId?: Prisma.BigIntFilter<"WorkImage"> | bigint | number
}

export type WorkImageCreateManyWorkInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  imagePlaceholder: string
  image: runtime.Bytes
}

export type WorkImageUpdateWithoutWorkInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  imagePlaceholder?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.BytesFieldUpdateOperationsInput | runtime.Bytes
}

export type WorkImageUncheckedUpdateWithoutWorkInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  imagePlaceholder?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.BytesFieldUpdateOperationsInput | runtime.Bytes
}

export type WorkImageUncheckedUpdateManyWithoutWorkInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  imagePlaceholder?: Prisma.StringFieldUpdateOperationsInput | string
  image?: Prisma.BytesFieldUpdateOperationsInput | runtime.Bytes
}



export type WorkImageSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  imagePlaceholder?: boolean
  image?: boolean
  workId?: boolean
  work?: boolean | Prisma.WorkDefaultArgs<ExtArgs>
}, ExtArgs["result"]["workImage"]>

export type WorkImageSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  imagePlaceholder?: boolean
  image?: boolean
  workId?: boolean
  work?: boolean | Prisma.WorkDefaultArgs<ExtArgs>
}, ExtArgs["result"]["workImage"]>

export type WorkImageSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  imagePlaceholder?: boolean
  image?: boolean
  workId?: boolean
  work?: boolean | Prisma.WorkDefaultArgs<ExtArgs>
}, ExtArgs["result"]["workImage"]>

export type WorkImageSelectScalar = {
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  imagePlaceholder?: boolean
  image?: boolean
  workId?: boolean
}

export type WorkImageOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "imagePlaceholder" | "image" | "workId", ExtArgs["result"]["workImage"]>
export type WorkImageInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  work?: boolean | Prisma.WorkDefaultArgs<ExtArgs>
}
export type WorkImageIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  work?: boolean | Prisma.WorkDefaultArgs<ExtArgs>
}
export type WorkImageIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  work?: boolean | Prisma.WorkDefaultArgs<ExtArgs>
}

export type $WorkImagePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "WorkImage"
  objects: {
    work: Prisma.$WorkPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: bigint
    createdAt: Date
    updatedAt: Date
    imagePlaceholder: string
    image: runtime.Bytes
    workId: bigint
  }, ExtArgs["result"]["workImage"]>
  composites: {}
}

export type WorkImageGetPayload<S extends boolean | null | undefined | WorkImageDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$WorkImagePayload, S>

export type WorkImageCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<WorkImageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: WorkImageCountAggregateInputType | true
  }

export interface WorkImageDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkImage'], meta: { name: 'WorkImage' } }
  /**
   * Find zero or one WorkImage that matches the filter.
   * @param {WorkImageFindUniqueArgs} args - Arguments to find a WorkImage
   * @example
   * // Get one WorkImage
   * const workImage = await prisma.workImage.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends WorkImageFindUniqueArgs>(args: Prisma.SelectSubset<T, WorkImageFindUniqueArgs<ExtArgs>>): Prisma.Prisma__WorkImageClient<runtime.Types.Result.GetResult<Prisma.$WorkImagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one WorkImage that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {WorkImageFindUniqueOrThrowArgs} args - Arguments to find a WorkImage
   * @example
   * // Get one WorkImage
   * const workImage = await prisma.workImage.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends WorkImageFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, WorkImageFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__WorkImageClient<runtime.Types.Result.GetResult<Prisma.$WorkImagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first WorkImage that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkImageFindFirstArgs} args - Arguments to find a WorkImage
   * @example
   * // Get one WorkImage
   * const workImage = await prisma.workImage.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends WorkImageFindFirstArgs>(args?: Prisma.SelectSubset<T, WorkImageFindFirstArgs<ExtArgs>>): Prisma.Prisma__WorkImageClient<runtime.Types.Result.GetResult<Prisma.$WorkImagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first WorkImage that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkImageFindFirstOrThrowArgs} args - Arguments to find a WorkImage
   * @example
   * // Get one WorkImage
   * const workImage = await prisma.workImage.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends WorkImageFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, WorkImageFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__WorkImageClient<runtime.Types.Result.GetResult<Prisma.$WorkImagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more WorkImages that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkImageFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all WorkImages
   * const workImages = await prisma.workImage.findMany()
   * 
   * // Get first 10 WorkImages
   * const workImages = await prisma.workImage.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const workImageWithIdOnly = await prisma.workImage.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends WorkImageFindManyArgs>(args?: Prisma.SelectSubset<T, WorkImageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WorkImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a WorkImage.
   * @param {WorkImageCreateArgs} args - Arguments to create a WorkImage.
   * @example
   * // Create one WorkImage
   * const WorkImage = await prisma.workImage.create({
   *   data: {
   *     // ... data to create a WorkImage
   *   }
   * })
   * 
   */
  create<T extends WorkImageCreateArgs>(args: Prisma.SelectSubset<T, WorkImageCreateArgs<ExtArgs>>): Prisma.Prisma__WorkImageClient<runtime.Types.Result.GetResult<Prisma.$WorkImagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many WorkImages.
   * @param {WorkImageCreateManyArgs} args - Arguments to create many WorkImages.
   * @example
   * // Create many WorkImages
   * const workImage = await prisma.workImage.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends WorkImageCreateManyArgs>(args?: Prisma.SelectSubset<T, WorkImageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many WorkImages and returns the data saved in the database.
   * @param {WorkImageCreateManyAndReturnArgs} args - Arguments to create many WorkImages.
   * @example
   * // Create many WorkImages
   * const workImage = await prisma.workImage.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many WorkImages and only return the `id`
   * const workImageWithIdOnly = await prisma.workImage.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends WorkImageCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, WorkImageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WorkImagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a WorkImage.
   * @param {WorkImageDeleteArgs} args - Arguments to delete one WorkImage.
   * @example
   * // Delete one WorkImage
   * const WorkImage = await prisma.workImage.delete({
   *   where: {
   *     // ... filter to delete one WorkImage
   *   }
   * })
   * 
   */
  delete<T extends WorkImageDeleteArgs>(args: Prisma.SelectSubset<T, WorkImageDeleteArgs<ExtArgs>>): Prisma.Prisma__WorkImageClient<runtime.Types.Result.GetResult<Prisma.$WorkImagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one WorkImage.
   * @param {WorkImageUpdateArgs} args - Arguments to update one WorkImage.
   * @example
   * // Update one WorkImage
   * const workImage = await prisma.workImage.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends WorkImageUpdateArgs>(args: Prisma.SelectSubset<T, WorkImageUpdateArgs<ExtArgs>>): Prisma.Prisma__WorkImageClient<runtime.Types.Result.GetResult<Prisma.$WorkImagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more WorkImages.
   * @param {WorkImageDeleteManyArgs} args - Arguments to filter WorkImages to delete.
   * @example
   * // Delete a few WorkImages
   * const { count } = await prisma.workImage.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends WorkImageDeleteManyArgs>(args?: Prisma.SelectSubset<T, WorkImageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more WorkImages.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkImageUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many WorkImages
   * const workImage = await prisma.workImage.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends WorkImageUpdateManyArgs>(args: Prisma.SelectSubset<T, WorkImageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more WorkImages and returns the data updated in the database.
   * @param {WorkImageUpdateManyAndReturnArgs} args - Arguments to update many WorkImages.
   * @example
   * // Update many WorkImages
   * const workImage = await prisma.workImage.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more WorkImages and only return the `id`
   * const workImageWithIdOnly = await prisma.workImage.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends WorkImageUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, WorkImageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WorkImagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one WorkImage.
   * @param {WorkImageUpsertArgs} args - Arguments to update or create a WorkImage.
   * @example
   * // Update or create a WorkImage
   * const workImage = await prisma.workImage.upsert({
   *   create: {
   *     // ... data to create a WorkImage
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the WorkImage we want to update
   *   }
   * })
   */
  upsert<T extends WorkImageUpsertArgs>(args: Prisma.SelectSubset<T, WorkImageUpsertArgs<ExtArgs>>): Prisma.Prisma__WorkImageClient<runtime.Types.Result.GetResult<Prisma.$WorkImagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of WorkImages.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkImageCountArgs} args - Arguments to filter WorkImages to count.
   * @example
   * // Count the number of WorkImages
   * const count = await prisma.workImage.count({
   *   where: {
   *     // ... the filter for the WorkImages we want to count
   *   }
   * })
  **/
  count<T extends WorkImageCountArgs>(
    args?: Prisma.Subset<T, WorkImageCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], WorkImageCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a WorkImage.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends WorkImageAggregateArgs>(args: Prisma.Subset<T, WorkImageAggregateArgs>): Prisma.PrismaPromise<GetWorkImageAggregateType<T>>

  /**
   * Group by WorkImage.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkImageGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends WorkImageGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: WorkImageGroupByArgs['orderBy'] }
      : { orderBy?: WorkImageGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, WorkImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkImageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the WorkImage model
 */
readonly fields: WorkImageFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for WorkImage.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__WorkImageClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  work<T extends Prisma.WorkDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.WorkDefaultArgs<ExtArgs>>): Prisma.Prisma__WorkClient<runtime.Types.Result.GetResult<Prisma.$WorkPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the WorkImage model
 */
export interface WorkImageFieldRefs {
  readonly id: Prisma.FieldRef<"WorkImage", 'BigInt'>
  readonly createdAt: Prisma.FieldRef<"WorkImage", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"WorkImage", 'DateTime'>
  readonly imagePlaceholder: Prisma.FieldRef<"WorkImage", 'String'>
  readonly image: Prisma.FieldRef<"WorkImage", 'Bytes'>
  readonly workId: Prisma.FieldRef<"WorkImage", 'BigInt'>
}
    

// Custom InputTypes
/**
 * WorkImage findUnique
 */
export type WorkImageFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkImage
   */
  select?: Prisma.WorkImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkImage
   */
  omit?: Prisma.WorkImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkImageInclude<ExtArgs> | null
  /**
   * Filter, which WorkImage to fetch.
   */
  where: Prisma.WorkImageWhereUniqueInput
}

/**
 * WorkImage findUniqueOrThrow
 */
export type WorkImageFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkImage
   */
  select?: Prisma.WorkImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkImage
   */
  omit?: Prisma.WorkImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkImageInclude<ExtArgs> | null
  /**
   * Filter, which WorkImage to fetch.
   */
  where: Prisma.WorkImageWhereUniqueInput
}

/**
 * WorkImage findFirst
 */
export type WorkImageFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkImage
   */
  select?: Prisma.WorkImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkImage
   */
  omit?: Prisma.WorkImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkImageInclude<ExtArgs> | null
  /**
   * Filter, which WorkImage to fetch.
   */
  where?: Prisma.WorkImageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WorkImages to fetch.
   */
  orderBy?: Prisma.WorkImageOrderByWithRelationInput | Prisma.WorkImageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for WorkImages.
   */
  cursor?: Prisma.WorkImageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WorkImages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WorkImages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of WorkImages.
   */
  distinct?: Prisma.WorkImageScalarFieldEnum | Prisma.WorkImageScalarFieldEnum[]
}

/**
 * WorkImage findFirstOrThrow
 */
export type WorkImageFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkImage
   */
  select?: Prisma.WorkImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkImage
   */
  omit?: Prisma.WorkImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkImageInclude<ExtArgs> | null
  /**
   * Filter, which WorkImage to fetch.
   */
  where?: Prisma.WorkImageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WorkImages to fetch.
   */
  orderBy?: Prisma.WorkImageOrderByWithRelationInput | Prisma.WorkImageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for WorkImages.
   */
  cursor?: Prisma.WorkImageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WorkImages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WorkImages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of WorkImages.
   */
  distinct?: Prisma.WorkImageScalarFieldEnum | Prisma.WorkImageScalarFieldEnum[]
}

/**
 * WorkImage findMany
 */
export type WorkImageFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkImage
   */
  select?: Prisma.WorkImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkImage
   */
  omit?: Prisma.WorkImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkImageInclude<ExtArgs> | null
  /**
   * Filter, which WorkImages to fetch.
   */
  where?: Prisma.WorkImageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WorkImages to fetch.
   */
  orderBy?: Prisma.WorkImageOrderByWithRelationInput | Prisma.WorkImageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing WorkImages.
   */
  cursor?: Prisma.WorkImageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WorkImages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WorkImages.
   */
  skip?: number
  distinct?: Prisma.WorkImageScalarFieldEnum | Prisma.WorkImageScalarFieldEnum[]
}

/**
 * WorkImage create
 */
export type WorkImageCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkImage
   */
  select?: Prisma.WorkImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkImage
   */
  omit?: Prisma.WorkImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkImageInclude<ExtArgs> | null
  /**
   * The data needed to create a WorkImage.
   */
  data: Prisma.XOR<Prisma.WorkImageCreateInput, Prisma.WorkImageUncheckedCreateInput>
}

/**
 * WorkImage createMany
 */
export type WorkImageCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many WorkImages.
   */
  data: Prisma.WorkImageCreateManyInput | Prisma.WorkImageCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * WorkImage createManyAndReturn
 */
export type WorkImageCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkImage
   */
  select?: Prisma.WorkImageSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the WorkImage
   */
  omit?: Prisma.WorkImageOmit<ExtArgs> | null
  /**
   * The data used to create many WorkImages.
   */
  data: Prisma.WorkImageCreateManyInput | Prisma.WorkImageCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkImageIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * WorkImage update
 */
export type WorkImageUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkImage
   */
  select?: Prisma.WorkImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkImage
   */
  omit?: Prisma.WorkImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkImageInclude<ExtArgs> | null
  /**
   * The data needed to update a WorkImage.
   */
  data: Prisma.XOR<Prisma.WorkImageUpdateInput, Prisma.WorkImageUncheckedUpdateInput>
  /**
   * Choose, which WorkImage to update.
   */
  where: Prisma.WorkImageWhereUniqueInput
}

/**
 * WorkImage updateMany
 */
export type WorkImageUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update WorkImages.
   */
  data: Prisma.XOR<Prisma.WorkImageUpdateManyMutationInput, Prisma.WorkImageUncheckedUpdateManyInput>
  /**
   * Filter which WorkImages to update
   */
  where?: Prisma.WorkImageWhereInput
  /**
   * Limit how many WorkImages to update.
   */
  limit?: number
}

/**
 * WorkImage updateManyAndReturn
 */
export type WorkImageUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkImage
   */
  select?: Prisma.WorkImageSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the WorkImage
   */
  omit?: Prisma.WorkImageOmit<ExtArgs> | null
  /**
   * The data used to update WorkImages.
   */
  data: Prisma.XOR<Prisma.WorkImageUpdateManyMutationInput, Prisma.WorkImageUncheckedUpdateManyInput>
  /**
   * Filter which WorkImages to update
   */
  where?: Prisma.WorkImageWhereInput
  /**
   * Limit how many WorkImages to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkImageIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * WorkImage upsert
 */
export type WorkImageUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkImage
   */
  select?: Prisma.WorkImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkImage
   */
  omit?: Prisma.WorkImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkImageInclude<ExtArgs> | null
  /**
   * The filter to search for the WorkImage to update in case it exists.
   */
  where: Prisma.WorkImageWhereUniqueInput
  /**
   * In case the WorkImage found by the `where` argument doesn't exist, create a new WorkImage with this data.
   */
  create: Prisma.XOR<Prisma.WorkImageCreateInput, Prisma.WorkImageUncheckedCreateInput>
  /**
   * In case the WorkImage was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.WorkImageUpdateInput, Prisma.WorkImageUncheckedUpdateInput>
}

/**
 * WorkImage delete
 */
export type WorkImageDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkImage
   */
  select?: Prisma.WorkImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkImage
   */
  omit?: Prisma.WorkImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkImageInclude<ExtArgs> | null
  /**
   * Filter which WorkImage to delete.
   */
  where: Prisma.WorkImageWhereUniqueInput
}

/**
 * WorkImage deleteMany
 */
export type WorkImageDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which WorkImages to delete
   */
  where?: Prisma.WorkImageWhereInput
  /**
   * Limit how many WorkImages to delete.
   */
  limit?: number
}

/**
 * WorkImage without action
 */
export type WorkImageDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkImage
   */
  select?: Prisma.WorkImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkImage
   */
  omit?: Prisma.WorkImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkImageInclude<ExtArgs> | null
}
