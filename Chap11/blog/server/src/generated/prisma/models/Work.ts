
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Work` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Work
 * 
 */
export type WorkModel = runtime.Types.Result.DefaultSelection<Prisma.$WorkPayload>

export type AggregateWork = {
  _count: WorkCountAggregateOutputType | null
  _avg: WorkAvgAggregateOutputType | null
  _sum: WorkSumAggregateOutputType | null
  _min: WorkMinAggregateOutputType | null
  _max: WorkMaxAggregateOutputType | null
}

export type WorkAvgAggregateOutputType = {
  id: number | null
  authorId: number | null
}

export type WorkSumAggregateOutputType = {
  id: bigint | null
  authorId: bigint | null
}

export type WorkMinAggregateOutputType = {
  id: bigint | null
  createdAt: Date | null
  updatedAt: Date | null
  title: string | null
  content: string | null
  description: string | null
  authorId: bigint | null
}

export type WorkMaxAggregateOutputType = {
  id: bigint | null
  createdAt: Date | null
  updatedAt: Date | null
  title: string | null
  content: string | null
  description: string | null
  authorId: bigint | null
}

export type WorkCountAggregateOutputType = {
  id: number
  createdAt: number
  updatedAt: number
  title: number
  content: number
  description: number
  authorId: number
  _all: number
}


export type WorkAvgAggregateInputType = {
  id?: true
  authorId?: true
}

export type WorkSumAggregateInputType = {
  id?: true
  authorId?: true
}

export type WorkMinAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  title?: true
  content?: true
  description?: true
  authorId?: true
}

export type WorkMaxAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  title?: true
  content?: true
  description?: true
  authorId?: true
}

export type WorkCountAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  title?: true
  content?: true
  description?: true
  authorId?: true
  _all?: true
}

export type WorkAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Work to aggregate.
   */
  where?: Prisma.WorkWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Works to fetch.
   */
  orderBy?: Prisma.WorkOrderByWithRelationInput | Prisma.WorkOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.WorkWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Works from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Works.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Works
  **/
  _count?: true | WorkCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: WorkAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: WorkSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: WorkMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: WorkMaxAggregateInputType
}

export type GetWorkAggregateType<T extends WorkAggregateArgs> = {
      [P in keyof T & keyof AggregateWork]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateWork[P]>
    : Prisma.GetScalarType<T[P], AggregateWork[P]>
}




export type WorkGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.WorkWhereInput
  orderBy?: Prisma.WorkOrderByWithAggregationInput | Prisma.WorkOrderByWithAggregationInput[]
  by: Prisma.WorkScalarFieldEnum[] | Prisma.WorkScalarFieldEnum
  having?: Prisma.WorkScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: WorkCountAggregateInputType | true
  _avg?: WorkAvgAggregateInputType
  _sum?: WorkSumAggregateInputType
  _min?: WorkMinAggregateInputType
  _max?: WorkMaxAggregateInputType
}

export type WorkGroupByOutputType = {
  id: bigint
  createdAt: Date
  updatedAt: Date
  title: string
  content: string
  description: string
  authorId: bigint
  _count: WorkCountAggregateOutputType | null
  _avg: WorkAvgAggregateOutputType | null
  _sum: WorkSumAggregateOutputType | null
  _min: WorkMinAggregateOutputType | null
  _max: WorkMaxAggregateOutputType | null
}

type GetWorkGroupByPayload<T extends WorkGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<WorkGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof WorkGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], WorkGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], WorkGroupByOutputType[P]>
      }
    >
  >



export type WorkWhereInput = {
  AND?: Prisma.WorkWhereInput | Prisma.WorkWhereInput[]
  OR?: Prisma.WorkWhereInput[]
  NOT?: Prisma.WorkWhereInput | Prisma.WorkWhereInput[]
  id?: Prisma.BigIntFilter<"Work"> | bigint | number
  createdAt?: Prisma.DateTimeFilter<"Work"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Work"> | Date | string
  title?: Prisma.StringFilter<"Work"> | string
  content?: Prisma.StringFilter<"Work"> | string
  description?: Prisma.StringFilter<"Work"> | string
  authorId?: Prisma.BigIntFilter<"Work"> | bigint | number
  author?: Prisma.XOR<Prisma.ProfileScalarRelationFilter, Prisma.ProfileWhereInput>
  workImages?: Prisma.WorkImageListRelationFilter
  workTopics?: Prisma.WorkTopicListRelationFilter
  workLikes?: Prisma.WorkLikeListRelationFilter
  workResponses?: Prisma.WorkResponseListRelationFilter
}

export type WorkOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  title?: Prisma.SortOrder
  content?: Prisma.SortOrder
  description?: Prisma.SortOrder
  authorId?: Prisma.SortOrder
  author?: Prisma.ProfileOrderByWithRelationInput
  workImages?: Prisma.WorkImageOrderByRelationAggregateInput
  workTopics?: Prisma.WorkTopicOrderByRelationAggregateInput
  workLikes?: Prisma.WorkLikeOrderByRelationAggregateInput
  workResponses?: Prisma.WorkResponseOrderByRelationAggregateInput
}

export type WorkWhereUniqueInput = Prisma.AtLeast<{
  id?: bigint | number
  AND?: Prisma.WorkWhereInput | Prisma.WorkWhereInput[]
  OR?: Prisma.WorkWhereInput[]
  NOT?: Prisma.WorkWhereInput | Prisma.WorkWhereInput[]
  createdAt?: Prisma.DateTimeFilter<"Work"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Work"> | Date | string
  title?: Prisma.StringFilter<"Work"> | string
  content?: Prisma.StringFilter<"Work"> | string
  description?: Prisma.StringFilter<"Work"> | string
  authorId?: Prisma.BigIntFilter<"Work"> | bigint | number
  author?: Prisma.XOR<Prisma.ProfileScalarRelationFilter, Prisma.ProfileWhereInput>
  workImages?: Prisma.WorkImageListRelationFilter
  workTopics?: Prisma.WorkTopicListRelationFilter
  workLikes?: Prisma.WorkLikeListRelationFilter
  workResponses?: Prisma.WorkResponseListRelationFilter
}, "id">

export type WorkOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  title?: Prisma.SortOrder
  content?: Prisma.SortOrder
  description?: Prisma.SortOrder
  authorId?: Prisma.SortOrder
  _count?: Prisma.WorkCountOrderByAggregateInput
  _avg?: Prisma.WorkAvgOrderByAggregateInput
  _max?: Prisma.WorkMaxOrderByAggregateInput
  _min?: Prisma.WorkMinOrderByAggregateInput
  _sum?: Prisma.WorkSumOrderByAggregateInput
}

export type WorkScalarWhereWithAggregatesInput = {
  AND?: Prisma.WorkScalarWhereWithAggregatesInput | Prisma.WorkScalarWhereWithAggregatesInput[]
  OR?: Prisma.WorkScalarWhereWithAggregatesInput[]
  NOT?: Prisma.WorkScalarWhereWithAggregatesInput | Prisma.WorkScalarWhereWithAggregatesInput[]
  id?: Prisma.BigIntWithAggregatesFilter<"Work"> | bigint | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Work"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Work"> | Date | string
  title?: Prisma.StringWithAggregatesFilter<"Work"> | string
  content?: Prisma.StringWithAggregatesFilter<"Work"> | string
  description?: Prisma.StringWithAggregatesFilter<"Work"> | string
  authorId?: Prisma.BigIntWithAggregatesFilter<"Work"> | bigint | number
}

export type WorkCreateInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  title: string
  content: string
  description: string
  author: Prisma.ProfileCreateNestedOneWithoutWorksInput
  workImages?: Prisma.WorkImageCreateNestedManyWithoutWorkInput
  workTopics?: Prisma.WorkTopicCreateNestedManyWithoutWorkInput
  workLikes?: Prisma.WorkLikeCreateNestedManyWithoutWorkInput
  workResponses?: Prisma.WorkResponseCreateNestedManyWithoutWorkInput
}

export type WorkUncheckedCreateInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  title: string
  content: string
  description: string
  authorId: bigint | number
  workImages?: Prisma.WorkImageUncheckedCreateNestedManyWithoutWorkInput
  workTopics?: Prisma.WorkTopicUncheckedCreateNestedManyWithoutWorkInput
  workLikes?: Prisma.WorkLikeUncheckedCreateNestedManyWithoutWorkInput
  workResponses?: Prisma.WorkResponseUncheckedCreateNestedManyWithoutWorkInput
}

export type WorkUpdateInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  author?: Prisma.ProfileUpdateOneRequiredWithoutWorksNestedInput
  workImages?: Prisma.WorkImageUpdateManyWithoutWorkNestedInput
  workTopics?: Prisma.WorkTopicUpdateManyWithoutWorkNestedInput
  workLikes?: Prisma.WorkLikeUpdateManyWithoutWorkNestedInput
  workResponses?: Prisma.WorkResponseUpdateManyWithoutWorkNestedInput
}

export type WorkUncheckedUpdateInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  authorId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  workImages?: Prisma.WorkImageUncheckedUpdateManyWithoutWorkNestedInput
  workTopics?: Prisma.WorkTopicUncheckedUpdateManyWithoutWorkNestedInput
  workLikes?: Prisma.WorkLikeUncheckedUpdateManyWithoutWorkNestedInput
  workResponses?: Prisma.WorkResponseUncheckedUpdateManyWithoutWorkNestedInput
}

export type WorkCreateManyInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  title: string
  content: string
  description: string
  authorId: bigint | number
}

export type WorkUpdateManyMutationInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
}

export type WorkUncheckedUpdateManyInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  authorId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
}

export type WorkCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  title?: Prisma.SortOrder
  content?: Prisma.SortOrder
  description?: Prisma.SortOrder
  authorId?: Prisma.SortOrder
}

export type WorkAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  authorId?: Prisma.SortOrder
}

export type WorkMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  title?: Prisma.SortOrder
  content?: Prisma.SortOrder
  description?: Prisma.SortOrder
  authorId?: Prisma.SortOrder
}

export type WorkMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  title?: Prisma.SortOrder
  content?: Prisma.SortOrder
  description?: Prisma.SortOrder
  authorId?: Prisma.SortOrder
}

export type WorkSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  authorId?: Prisma.SortOrder
}

export type WorkScalarRelationFilter = {
  is?: Prisma.WorkWhereInput
  isNot?: Prisma.WorkWhereInput
}

export type WorkListRelationFilter = {
  every?: Prisma.WorkWhereInput
  some?: Prisma.WorkWhereInput
  none?: Prisma.WorkWhereInput
}

export type WorkOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type BigIntFieldUpdateOperationsInput = {
  set?: bigint | number
  increment?: bigint | number
  decrement?: bigint | number
  multiply?: bigint | number
  divide?: bigint | number
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type WorkCreateNestedOneWithoutWorkImagesInput = {
  create?: Prisma.XOR<Prisma.WorkCreateWithoutWorkImagesInput, Prisma.WorkUncheckedCreateWithoutWorkImagesInput>
  connectOrCreate?: Prisma.WorkCreateOrConnectWithoutWorkImagesInput
  connect?: Prisma.WorkWhereUniqueInput
}

export type WorkUpdateOneRequiredWithoutWorkImagesNestedInput = {
  create?: Prisma.XOR<Prisma.WorkCreateWithoutWorkImagesInput, Prisma.WorkUncheckedCreateWithoutWorkImagesInput>
  connectOrCreate?: Prisma.WorkCreateOrConnectWithoutWorkImagesInput
  upsert?: Prisma.WorkUpsertWithoutWorkImagesInput
  connect?: Prisma.WorkWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.WorkUpdateToOneWithWhereWithoutWorkImagesInput, Prisma.WorkUpdateWithoutWorkImagesInput>, Prisma.WorkUncheckedUpdateWithoutWorkImagesInput>
}

export type WorkCreateNestedManyWithoutAuthorInput = {
  create?: Prisma.XOR<Prisma.WorkCreateWithoutAuthorInput, Prisma.WorkUncheckedCreateWithoutAuthorInput> | Prisma.WorkCreateWithoutAuthorInput[] | Prisma.WorkUncheckedCreateWithoutAuthorInput[]
  connectOrCreate?: Prisma.WorkCreateOrConnectWithoutAuthorInput | Prisma.WorkCreateOrConnectWithoutAuthorInput[]
  createMany?: Prisma.WorkCreateManyAuthorInputEnvelope
  connect?: Prisma.WorkWhereUniqueInput | Prisma.WorkWhereUniqueInput[]
}

export type WorkUncheckedCreateNestedManyWithoutAuthorInput = {
  create?: Prisma.XOR<Prisma.WorkCreateWithoutAuthorInput, Prisma.WorkUncheckedCreateWithoutAuthorInput> | Prisma.WorkCreateWithoutAuthorInput[] | Prisma.WorkUncheckedCreateWithoutAuthorInput[]
  connectOrCreate?: Prisma.WorkCreateOrConnectWithoutAuthorInput | Prisma.WorkCreateOrConnectWithoutAuthorInput[]
  createMany?: Prisma.WorkCreateManyAuthorInputEnvelope
  connect?: Prisma.WorkWhereUniqueInput | Prisma.WorkWhereUniqueInput[]
}

export type WorkUpdateManyWithoutAuthorNestedInput = {
  create?: Prisma.XOR<Prisma.WorkCreateWithoutAuthorInput, Prisma.WorkUncheckedCreateWithoutAuthorInput> | Prisma.WorkCreateWithoutAuthorInput[] | Prisma.WorkUncheckedCreateWithoutAuthorInput[]
  connectOrCreate?: Prisma.WorkCreateOrConnectWithoutAuthorInput | Prisma.WorkCreateOrConnectWithoutAuthorInput[]
  upsert?: Prisma.WorkUpsertWithWhereUniqueWithoutAuthorInput | Prisma.WorkUpsertWithWhereUniqueWithoutAuthorInput[]
  createMany?: Prisma.WorkCreateManyAuthorInputEnvelope
  set?: Prisma.WorkWhereUniqueInput | Prisma.WorkWhereUniqueInput[]
  disconnect?: Prisma.WorkWhereUniqueInput | Prisma.WorkWhereUniqueInput[]
  delete?: Prisma.WorkWhereUniqueInput | Prisma.WorkWhereUniqueInput[]
  connect?: Prisma.WorkWhereUniqueInput | Prisma.WorkWhereUniqueInput[]
  update?: Prisma.WorkUpdateWithWhereUniqueWithoutAuthorInput | Prisma.WorkUpdateWithWhereUniqueWithoutAuthorInput[]
  updateMany?: Prisma.WorkUpdateManyWithWhereWithoutAuthorInput | Prisma.WorkUpdateManyWithWhereWithoutAuthorInput[]
  deleteMany?: Prisma.WorkScalarWhereInput | Prisma.WorkScalarWhereInput[]
}

export type WorkUncheckedUpdateManyWithoutAuthorNestedInput = {
  create?: Prisma.XOR<Prisma.WorkCreateWithoutAuthorInput, Prisma.WorkUncheckedCreateWithoutAuthorInput> | Prisma.WorkCreateWithoutAuthorInput[] | Prisma.WorkUncheckedCreateWithoutAuthorInput[]
  connectOrCreate?: Prisma.WorkCreateOrConnectWithoutAuthorInput | Prisma.WorkCreateOrConnectWithoutAuthorInput[]
  upsert?: Prisma.WorkUpsertWithWhereUniqueWithoutAuthorInput | Prisma.WorkUpsertWithWhereUniqueWithoutAuthorInput[]
  createMany?: Prisma.WorkCreateManyAuthorInputEnvelope
  set?: Prisma.WorkWhereUniqueInput | Prisma.WorkWhereUniqueInput[]
  disconnect?: Prisma.WorkWhereUniqueInput | Prisma.WorkWhereUniqueInput[]
  delete?: Prisma.WorkWhereUniqueInput | Prisma.WorkWhereUniqueInput[]
  connect?: Prisma.WorkWhereUniqueInput | Prisma.WorkWhereUniqueInput[]
  update?: Prisma.WorkUpdateWithWhereUniqueWithoutAuthorInput | Prisma.WorkUpdateWithWhereUniqueWithoutAuthorInput[]
  updateMany?: Prisma.WorkUpdateManyWithWhereWithoutAuthorInput | Prisma.WorkUpdateManyWithWhereWithoutAuthorInput[]
  deleteMany?: Prisma.WorkScalarWhereInput | Prisma.WorkScalarWhereInput[]
}

export type WorkCreateNestedOneWithoutWorkTopicsInput = {
  create?: Prisma.XOR<Prisma.WorkCreateWithoutWorkTopicsInput, Prisma.WorkUncheckedCreateWithoutWorkTopicsInput>
  connectOrCreate?: Prisma.WorkCreateOrConnectWithoutWorkTopicsInput
  connect?: Prisma.WorkWhereUniqueInput
}

export type WorkUpdateOneRequiredWithoutWorkTopicsNestedInput = {
  create?: Prisma.XOR<Prisma.WorkCreateWithoutWorkTopicsInput, Prisma.WorkUncheckedCreateWithoutWorkTopicsInput>
  connectOrCreate?: Prisma.WorkCreateOrConnectWithoutWorkTopicsInput
  upsert?: Prisma.WorkUpsertWithoutWorkTopicsInput
  connect?: Prisma.WorkWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.WorkUpdateToOneWithWhereWithoutWorkTopicsInput, Prisma.WorkUpdateWithoutWorkTopicsInput>, Prisma.WorkUncheckedUpdateWithoutWorkTopicsInput>
}

export type WorkCreateNestedOneWithoutWorkLikesInput = {
  create?: Prisma.XOR<Prisma.WorkCreateWithoutWorkLikesInput, Prisma.WorkUncheckedCreateWithoutWorkLikesInput>
  connectOrCreate?: Prisma.WorkCreateOrConnectWithoutWorkLikesInput
  connect?: Prisma.WorkWhereUniqueInput
}

export type WorkUpdateOneRequiredWithoutWorkLikesNestedInput = {
  create?: Prisma.XOR<Prisma.WorkCreateWithoutWorkLikesInput, Prisma.WorkUncheckedCreateWithoutWorkLikesInput>
  connectOrCreate?: Prisma.WorkCreateOrConnectWithoutWorkLikesInput
  upsert?: Prisma.WorkUpsertWithoutWorkLikesInput
  connect?: Prisma.WorkWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.WorkUpdateToOneWithWhereWithoutWorkLikesInput, Prisma.WorkUpdateWithoutWorkLikesInput>, Prisma.WorkUncheckedUpdateWithoutWorkLikesInput>
}

export type WorkCreateNestedOneWithoutWorkResponsesInput = {
  create?: Prisma.XOR<Prisma.WorkCreateWithoutWorkResponsesInput, Prisma.WorkUncheckedCreateWithoutWorkResponsesInput>
  connectOrCreate?: Prisma.WorkCreateOrConnectWithoutWorkResponsesInput
  connect?: Prisma.WorkWhereUniqueInput
}

export type WorkUpdateOneRequiredWithoutWorkResponsesNestedInput = {
  create?: Prisma.XOR<Prisma.WorkCreateWithoutWorkResponsesInput, Prisma.WorkUncheckedCreateWithoutWorkResponsesInput>
  connectOrCreate?: Prisma.WorkCreateOrConnectWithoutWorkResponsesInput
  upsert?: Prisma.WorkUpsertWithoutWorkResponsesInput
  connect?: Prisma.WorkWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.WorkUpdateToOneWithWhereWithoutWorkResponsesInput, Prisma.WorkUpdateWithoutWorkResponsesInput>, Prisma.WorkUncheckedUpdateWithoutWorkResponsesInput>
}

export type WorkCreateWithoutWorkImagesInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  title: string
  content: string
  description: string
  author: Prisma.ProfileCreateNestedOneWithoutWorksInput
  workTopics?: Prisma.WorkTopicCreateNestedManyWithoutWorkInput
  workLikes?: Prisma.WorkLikeCreateNestedManyWithoutWorkInput
  workResponses?: Prisma.WorkResponseCreateNestedManyWithoutWorkInput
}

export type WorkUncheckedCreateWithoutWorkImagesInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  title: string
  content: string
  description: string
  authorId: bigint | number
  workTopics?: Prisma.WorkTopicUncheckedCreateNestedManyWithoutWorkInput
  workLikes?: Prisma.WorkLikeUncheckedCreateNestedManyWithoutWorkInput
  workResponses?: Prisma.WorkResponseUncheckedCreateNestedManyWithoutWorkInput
}

export type WorkCreateOrConnectWithoutWorkImagesInput = {
  where: Prisma.WorkWhereUniqueInput
  create: Prisma.XOR<Prisma.WorkCreateWithoutWorkImagesInput, Prisma.WorkUncheckedCreateWithoutWorkImagesInput>
}

export type WorkUpsertWithoutWorkImagesInput = {
  update: Prisma.XOR<Prisma.WorkUpdateWithoutWorkImagesInput, Prisma.WorkUncheckedUpdateWithoutWorkImagesInput>
  create: Prisma.XOR<Prisma.WorkCreateWithoutWorkImagesInput, Prisma.WorkUncheckedCreateWithoutWorkImagesInput>
  where?: Prisma.WorkWhereInput
}

export type WorkUpdateToOneWithWhereWithoutWorkImagesInput = {
  where?: Prisma.WorkWhereInput
  data: Prisma.XOR<Prisma.WorkUpdateWithoutWorkImagesInput, Prisma.WorkUncheckedUpdateWithoutWorkImagesInput>
}

export type WorkUpdateWithoutWorkImagesInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  author?: Prisma.ProfileUpdateOneRequiredWithoutWorksNestedInput
  workTopics?: Prisma.WorkTopicUpdateManyWithoutWorkNestedInput
  workLikes?: Prisma.WorkLikeUpdateManyWithoutWorkNestedInput
  workResponses?: Prisma.WorkResponseUpdateManyWithoutWorkNestedInput
}

export type WorkUncheckedUpdateWithoutWorkImagesInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  authorId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  workTopics?: Prisma.WorkTopicUncheckedUpdateManyWithoutWorkNestedInput
  workLikes?: Prisma.WorkLikeUncheckedUpdateManyWithoutWorkNestedInput
  workResponses?: Prisma.WorkResponseUncheckedUpdateManyWithoutWorkNestedInput
}

export type WorkCreateWithoutAuthorInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  title: string
  content: string
  description: string
  workImages?: Prisma.WorkImageCreateNestedManyWithoutWorkInput
  workTopics?: Prisma.WorkTopicCreateNestedManyWithoutWorkInput
  workLikes?: Prisma.WorkLikeCreateNestedManyWithoutWorkInput
  workResponses?: Prisma.WorkResponseCreateNestedManyWithoutWorkInput
}

export type WorkUncheckedCreateWithoutAuthorInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  title: string
  content: string
  description: string
  workImages?: Prisma.WorkImageUncheckedCreateNestedManyWithoutWorkInput
  workTopics?: Prisma.WorkTopicUncheckedCreateNestedManyWithoutWorkInput
  workLikes?: Prisma.WorkLikeUncheckedCreateNestedManyWithoutWorkInput
  workResponses?: Prisma.WorkResponseUncheckedCreateNestedManyWithoutWorkInput
}

export type WorkCreateOrConnectWithoutAuthorInput = {
  where: Prisma.WorkWhereUniqueInput
  create: Prisma.XOR<Prisma.WorkCreateWithoutAuthorInput, Prisma.WorkUncheckedCreateWithoutAuthorInput>
}

export type WorkCreateManyAuthorInputEnvelope = {
  data: Prisma.WorkCreateManyAuthorInput | Prisma.WorkCreateManyAuthorInput[]
  skipDuplicates?: boolean
}

export type WorkUpsertWithWhereUniqueWithoutAuthorInput = {
  where: Prisma.WorkWhereUniqueInput
  update: Prisma.XOR<Prisma.WorkUpdateWithoutAuthorInput, Prisma.WorkUncheckedUpdateWithoutAuthorInput>
  create: Prisma.XOR<Prisma.WorkCreateWithoutAuthorInput, Prisma.WorkUncheckedCreateWithoutAuthorInput>
}

export type WorkUpdateWithWhereUniqueWithoutAuthorInput = {
  where: Prisma.WorkWhereUniqueInput
  data: Prisma.XOR<Prisma.WorkUpdateWithoutAuthorInput, Prisma.WorkUncheckedUpdateWithoutAuthorInput>
}

export type WorkUpdateManyWithWhereWithoutAuthorInput = {
  where: Prisma.WorkScalarWhereInput
  data: Prisma.XOR<Prisma.WorkUpdateManyMutationInput, Prisma.WorkUncheckedUpdateManyWithoutAuthorInput>
}

export type WorkScalarWhereInput = {
  AND?: Prisma.WorkScalarWhereInput | Prisma.WorkScalarWhereInput[]
  OR?: Prisma.WorkScalarWhereInput[]
  NOT?: Prisma.WorkScalarWhereInput | Prisma.WorkScalarWhereInput[]
  id?: Prisma.BigIntFilter<"Work"> | bigint | number
  createdAt?: Prisma.DateTimeFilter<"Work"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Work"> | Date | string
  title?: Prisma.StringFilter<"Work"> | string
  content?: Prisma.StringFilter<"Work"> | string
  description?: Prisma.StringFilter<"Work"> | string
  authorId?: Prisma.BigIntFilter<"Work"> | bigint | number
}

export type WorkCreateWithoutWorkTopicsInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  title: string
  content: string
  description: string
  author: Prisma.ProfileCreateNestedOneWithoutWorksInput
  workImages?: Prisma.WorkImageCreateNestedManyWithoutWorkInput
  workLikes?: Prisma.WorkLikeCreateNestedManyWithoutWorkInput
  workResponses?: Prisma.WorkResponseCreateNestedManyWithoutWorkInput
}

export type WorkUncheckedCreateWithoutWorkTopicsInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  title: string
  content: string
  description: string
  authorId: bigint | number
  workImages?: Prisma.WorkImageUncheckedCreateNestedManyWithoutWorkInput
  workLikes?: Prisma.WorkLikeUncheckedCreateNestedManyWithoutWorkInput
  workResponses?: Prisma.WorkResponseUncheckedCreateNestedManyWithoutWorkInput
}

export type WorkCreateOrConnectWithoutWorkTopicsInput = {
  where: Prisma.WorkWhereUniqueInput
  create: Prisma.XOR<Prisma.WorkCreateWithoutWorkTopicsInput, Prisma.WorkUncheckedCreateWithoutWorkTopicsInput>
}

export type WorkUpsertWithoutWorkTopicsInput = {
  update: Prisma.XOR<Prisma.WorkUpdateWithoutWorkTopicsInput, Prisma.WorkUncheckedUpdateWithoutWorkTopicsInput>
  create: Prisma.XOR<Prisma.WorkCreateWithoutWorkTopicsInput, Prisma.WorkUncheckedCreateWithoutWorkTopicsInput>
  where?: Prisma.WorkWhereInput
}

export type WorkUpdateToOneWithWhereWithoutWorkTopicsInput = {
  where?: Prisma.WorkWhereInput
  data: Prisma.XOR<Prisma.WorkUpdateWithoutWorkTopicsInput, Prisma.WorkUncheckedUpdateWithoutWorkTopicsInput>
}

export type WorkUpdateWithoutWorkTopicsInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  author?: Prisma.ProfileUpdateOneRequiredWithoutWorksNestedInput
  workImages?: Prisma.WorkImageUpdateManyWithoutWorkNestedInput
  workLikes?: Prisma.WorkLikeUpdateManyWithoutWorkNestedInput
  workResponses?: Prisma.WorkResponseUpdateManyWithoutWorkNestedInput
}

export type WorkUncheckedUpdateWithoutWorkTopicsInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  authorId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  workImages?: Prisma.WorkImageUncheckedUpdateManyWithoutWorkNestedInput
  workLikes?: Prisma.WorkLikeUncheckedUpdateManyWithoutWorkNestedInput
  workResponses?: Prisma.WorkResponseUncheckedUpdateManyWithoutWorkNestedInput
}

export type WorkCreateWithoutWorkLikesInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  title: string
  content: string
  description: string
  author: Prisma.ProfileCreateNestedOneWithoutWorksInput
  workImages?: Prisma.WorkImageCreateNestedManyWithoutWorkInput
  workTopics?: Prisma.WorkTopicCreateNestedManyWithoutWorkInput
  workResponses?: Prisma.WorkResponseCreateNestedManyWithoutWorkInput
}

export type WorkUncheckedCreateWithoutWorkLikesInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  title: string
  content: string
  description: string
  authorId: bigint | number
  workImages?: Prisma.WorkImageUncheckedCreateNestedManyWithoutWorkInput
  workTopics?: Prisma.WorkTopicUncheckedCreateNestedManyWithoutWorkInput
  workResponses?: Prisma.WorkResponseUncheckedCreateNestedManyWithoutWorkInput
}

export type WorkCreateOrConnectWithoutWorkLikesInput = {
  where: Prisma.WorkWhereUniqueInput
  create: Prisma.XOR<Prisma.WorkCreateWithoutWorkLikesInput, Prisma.WorkUncheckedCreateWithoutWorkLikesInput>
}

export type WorkUpsertWithoutWorkLikesInput = {
  update: Prisma.XOR<Prisma.WorkUpdateWithoutWorkLikesInput, Prisma.WorkUncheckedUpdateWithoutWorkLikesInput>
  create: Prisma.XOR<Prisma.WorkCreateWithoutWorkLikesInput, Prisma.WorkUncheckedCreateWithoutWorkLikesInput>
  where?: Prisma.WorkWhereInput
}

export type WorkUpdateToOneWithWhereWithoutWorkLikesInput = {
  where?: Prisma.WorkWhereInput
  data: Prisma.XOR<Prisma.WorkUpdateWithoutWorkLikesInput, Prisma.WorkUncheckedUpdateWithoutWorkLikesInput>
}

export type WorkUpdateWithoutWorkLikesInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  author?: Prisma.ProfileUpdateOneRequiredWithoutWorksNestedInput
  workImages?: Prisma.WorkImageUpdateManyWithoutWorkNestedInput
  workTopics?: Prisma.WorkTopicUpdateManyWithoutWorkNestedInput
  workResponses?: Prisma.WorkResponseUpdateManyWithoutWorkNestedInput
}

export type WorkUncheckedUpdateWithoutWorkLikesInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  authorId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  workImages?: Prisma.WorkImageUncheckedUpdateManyWithoutWorkNestedInput
  workTopics?: Prisma.WorkTopicUncheckedUpdateManyWithoutWorkNestedInput
  workResponses?: Prisma.WorkResponseUncheckedUpdateManyWithoutWorkNestedInput
}

export type WorkCreateWithoutWorkResponsesInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  title: string
  content: string
  description: string
  author: Prisma.ProfileCreateNestedOneWithoutWorksInput
  workImages?: Prisma.WorkImageCreateNestedManyWithoutWorkInput
  workTopics?: Prisma.WorkTopicCreateNestedManyWithoutWorkInput
  workLikes?: Prisma.WorkLikeCreateNestedManyWithoutWorkInput
}

export type WorkUncheckedCreateWithoutWorkResponsesInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  title: string
  content: string
  description: string
  authorId: bigint | number
  workImages?: Prisma.WorkImageUncheckedCreateNestedManyWithoutWorkInput
  workTopics?: Prisma.WorkTopicUncheckedCreateNestedManyWithoutWorkInput
  workLikes?: Prisma.WorkLikeUncheckedCreateNestedManyWithoutWorkInput
}

export type WorkCreateOrConnectWithoutWorkResponsesInput = {
  where: Prisma.WorkWhereUniqueInput
  create: Prisma.XOR<Prisma.WorkCreateWithoutWorkResponsesInput, Prisma.WorkUncheckedCreateWithoutWorkResponsesInput>
}

export type WorkUpsertWithoutWorkResponsesInput = {
  update: Prisma.XOR<Prisma.WorkUpdateWithoutWorkResponsesInput, Prisma.WorkUncheckedUpdateWithoutWorkResponsesInput>
  create: Prisma.XOR<Prisma.WorkCreateWithoutWorkResponsesInput, Prisma.WorkUncheckedCreateWithoutWorkResponsesInput>
  where?: Prisma.WorkWhereInput
}

export type WorkUpdateToOneWithWhereWithoutWorkResponsesInput = {
  where?: Prisma.WorkWhereInput
  data: Prisma.XOR<Prisma.WorkUpdateWithoutWorkResponsesInput, Prisma.WorkUncheckedUpdateWithoutWorkResponsesInput>
}

export type WorkUpdateWithoutWorkResponsesInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  author?: Prisma.ProfileUpdateOneRequiredWithoutWorksNestedInput
  workImages?: Prisma.WorkImageUpdateManyWithoutWorkNestedInput
  workTopics?: Prisma.WorkTopicUpdateManyWithoutWorkNestedInput
  workLikes?: Prisma.WorkLikeUpdateManyWithoutWorkNestedInput
}

export type WorkUncheckedUpdateWithoutWorkResponsesInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  authorId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  workImages?: Prisma.WorkImageUncheckedUpdateManyWithoutWorkNestedInput
  workTopics?: Prisma.WorkTopicUncheckedUpdateManyWithoutWorkNestedInput
  workLikes?: Prisma.WorkLikeUncheckedUpdateManyWithoutWorkNestedInput
}

export type WorkCreateManyAuthorInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  title: string
  content: string
  description: string
}

export type WorkUpdateWithoutAuthorInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  workImages?: Prisma.WorkImageUpdateManyWithoutWorkNestedInput
  workTopics?: Prisma.WorkTopicUpdateManyWithoutWorkNestedInput
  workLikes?: Prisma.WorkLikeUpdateManyWithoutWorkNestedInput
  workResponses?: Prisma.WorkResponseUpdateManyWithoutWorkNestedInput
}

export type WorkUncheckedUpdateWithoutAuthorInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  workImages?: Prisma.WorkImageUncheckedUpdateManyWithoutWorkNestedInput
  workTopics?: Prisma.WorkTopicUncheckedUpdateManyWithoutWorkNestedInput
  workLikes?: Prisma.WorkLikeUncheckedUpdateManyWithoutWorkNestedInput
  workResponses?: Prisma.WorkResponseUncheckedUpdateManyWithoutWorkNestedInput
}

export type WorkUncheckedUpdateManyWithoutAuthorInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type WorkCountOutputType
 */

export type WorkCountOutputType = {
  workImages: number
  workTopics: number
  workLikes: number
  workResponses: number
}

export type WorkCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  workImages?: boolean | WorkCountOutputTypeCountWorkImagesArgs
  workTopics?: boolean | WorkCountOutputTypeCountWorkTopicsArgs
  workLikes?: boolean | WorkCountOutputTypeCountWorkLikesArgs
  workResponses?: boolean | WorkCountOutputTypeCountWorkResponsesArgs
}

/**
 * WorkCountOutputType without action
 */
export type WorkCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkCountOutputType
   */
  select?: Prisma.WorkCountOutputTypeSelect<ExtArgs> | null
}

/**
 * WorkCountOutputType without action
 */
export type WorkCountOutputTypeCountWorkImagesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.WorkImageWhereInput
}

/**
 * WorkCountOutputType without action
 */
export type WorkCountOutputTypeCountWorkTopicsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.WorkTopicWhereInput
}

/**
 * WorkCountOutputType without action
 */
export type WorkCountOutputTypeCountWorkLikesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.WorkLikeWhereInput
}

/**
 * WorkCountOutputType without action
 */
export type WorkCountOutputTypeCountWorkResponsesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.WorkResponseWhereInput
}


export type WorkSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  title?: boolean
  content?: boolean
  description?: boolean
  authorId?: boolean
  author?: boolean | Prisma.ProfileDefaultArgs<ExtArgs>
  workImages?: boolean | Prisma.Work$workImagesArgs<ExtArgs>
  workTopics?: boolean | Prisma.Work$workTopicsArgs<ExtArgs>
  workLikes?: boolean | Prisma.Work$workLikesArgs<ExtArgs>
  workResponses?: boolean | Prisma.Work$workResponsesArgs<ExtArgs>
  _count?: boolean | Prisma.WorkCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["work"]>

export type WorkSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  title?: boolean
  content?: boolean
  description?: boolean
  authorId?: boolean
  author?: boolean | Prisma.ProfileDefaultArgs<ExtArgs>
}, ExtArgs["result"]["work"]>

export type WorkSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  title?: boolean
  content?: boolean
  description?: boolean
  authorId?: boolean
  author?: boolean | Prisma.ProfileDefaultArgs<ExtArgs>
}, ExtArgs["result"]["work"]>

export type WorkSelectScalar = {
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  title?: boolean
  content?: boolean
  description?: boolean
  authorId?: boolean
}

export type WorkOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "title" | "content" | "description" | "authorId", ExtArgs["result"]["work"]>
export type WorkInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  author?: boolean | Prisma.ProfileDefaultArgs<ExtArgs>
  workImages?: boolean | Prisma.Work$workImagesArgs<ExtArgs>
  workTopics?: boolean | Prisma.Work$workTopicsArgs<ExtArgs>
  workLikes?: boolean | Prisma.Work$workLikesArgs<ExtArgs>
  workResponses?: boolean | Prisma.Work$workResponsesArgs<ExtArgs>
  _count?: boolean | Prisma.WorkCountOutputTypeDefaultArgs<ExtArgs>
}
export type WorkIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  author?: boolean | Prisma.ProfileDefaultArgs<ExtArgs>
}
export type WorkIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  author?: boolean | Prisma.ProfileDefaultArgs<ExtArgs>
}

export type $WorkPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Work"
  objects: {
    author: Prisma.$ProfilePayload<ExtArgs>
    workImages: Prisma.$WorkImagePayload<ExtArgs>[]
    workTopics: Prisma.$WorkTopicPayload<ExtArgs>[]
    workLikes: Prisma.$WorkLikePayload<ExtArgs>[]
    workResponses: Prisma.$WorkResponsePayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: bigint
    createdAt: Date
    updatedAt: Date
    title: string
    content: string
    description: string
    authorId: bigint
  }, ExtArgs["result"]["work"]>
  composites: {}
}

export type WorkGetPayload<S extends boolean | null | undefined | WorkDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$WorkPayload, S>

export type WorkCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<WorkFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: WorkCountAggregateInputType | true
  }

export interface WorkDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Work'], meta: { name: 'Work' } }
  /**
   * Find zero or one Work that matches the filter.
   * @param {WorkFindUniqueArgs} args - Arguments to find a Work
   * @example
   * // Get one Work
   * const work = await prisma.work.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends WorkFindUniqueArgs>(args: Prisma.SelectSubset<T, WorkFindUniqueArgs<ExtArgs>>): Prisma.Prisma__WorkClient<runtime.Types.Result.GetResult<Prisma.$WorkPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Work that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {WorkFindUniqueOrThrowArgs} args - Arguments to find a Work
   * @example
   * // Get one Work
   * const work = await prisma.work.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends WorkFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, WorkFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__WorkClient<runtime.Types.Result.GetResult<Prisma.$WorkPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Work that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkFindFirstArgs} args - Arguments to find a Work
   * @example
   * // Get one Work
   * const work = await prisma.work.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends WorkFindFirstArgs>(args?: Prisma.SelectSubset<T, WorkFindFirstArgs<ExtArgs>>): Prisma.Prisma__WorkClient<runtime.Types.Result.GetResult<Prisma.$WorkPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Work that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkFindFirstOrThrowArgs} args - Arguments to find a Work
   * @example
   * // Get one Work
   * const work = await prisma.work.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends WorkFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, WorkFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__WorkClient<runtime.Types.Result.GetResult<Prisma.$WorkPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Works that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Works
   * const works = await prisma.work.findMany()
   * 
   * // Get first 10 Works
   * const works = await prisma.work.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const workWithIdOnly = await prisma.work.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends WorkFindManyArgs>(args?: Prisma.SelectSubset<T, WorkFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WorkPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Work.
   * @param {WorkCreateArgs} args - Arguments to create a Work.
   * @example
   * // Create one Work
   * const Work = await prisma.work.create({
   *   data: {
   *     // ... data to create a Work
   *   }
   * })
   * 
   */
  create<T extends WorkCreateArgs>(args: Prisma.SelectSubset<T, WorkCreateArgs<ExtArgs>>): Prisma.Prisma__WorkClient<runtime.Types.Result.GetResult<Prisma.$WorkPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Works.
   * @param {WorkCreateManyArgs} args - Arguments to create many Works.
   * @example
   * // Create many Works
   * const work = await prisma.work.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends WorkCreateManyArgs>(args?: Prisma.SelectSubset<T, WorkCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Works and returns the data saved in the database.
   * @param {WorkCreateManyAndReturnArgs} args - Arguments to create many Works.
   * @example
   * // Create many Works
   * const work = await prisma.work.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Works and only return the `id`
   * const workWithIdOnly = await prisma.work.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends WorkCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, WorkCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WorkPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Work.
   * @param {WorkDeleteArgs} args - Arguments to delete one Work.
   * @example
   * // Delete one Work
   * const Work = await prisma.work.delete({
   *   where: {
   *     // ... filter to delete one Work
   *   }
   * })
   * 
   */
  delete<T extends WorkDeleteArgs>(args: Prisma.SelectSubset<T, WorkDeleteArgs<ExtArgs>>): Prisma.Prisma__WorkClient<runtime.Types.Result.GetResult<Prisma.$WorkPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Work.
   * @param {WorkUpdateArgs} args - Arguments to update one Work.
   * @example
   * // Update one Work
   * const work = await prisma.work.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends WorkUpdateArgs>(args: Prisma.SelectSubset<T, WorkUpdateArgs<ExtArgs>>): Prisma.Prisma__WorkClient<runtime.Types.Result.GetResult<Prisma.$WorkPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Works.
   * @param {WorkDeleteManyArgs} args - Arguments to filter Works to delete.
   * @example
   * // Delete a few Works
   * const { count } = await prisma.work.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends WorkDeleteManyArgs>(args?: Prisma.SelectSubset<T, WorkDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Works.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Works
   * const work = await prisma.work.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends WorkUpdateManyArgs>(args: Prisma.SelectSubset<T, WorkUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Works and returns the data updated in the database.
   * @param {WorkUpdateManyAndReturnArgs} args - Arguments to update many Works.
   * @example
   * // Update many Works
   * const work = await prisma.work.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Works and only return the `id`
   * const workWithIdOnly = await prisma.work.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends WorkUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, WorkUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WorkPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Work.
   * @param {WorkUpsertArgs} args - Arguments to update or create a Work.
   * @example
   * // Update or create a Work
   * const work = await prisma.work.upsert({
   *   create: {
   *     // ... data to create a Work
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Work we want to update
   *   }
   * })
   */
  upsert<T extends WorkUpsertArgs>(args: Prisma.SelectSubset<T, WorkUpsertArgs<ExtArgs>>): Prisma.Prisma__WorkClient<runtime.Types.Result.GetResult<Prisma.$WorkPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Works.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkCountArgs} args - Arguments to filter Works to count.
   * @example
   * // Count the number of Works
   * const count = await prisma.work.count({
   *   where: {
   *     // ... the filter for the Works we want to count
   *   }
   * })
  **/
  count<T extends WorkCountArgs>(
    args?: Prisma.Subset<T, WorkCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], WorkCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Work.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends WorkAggregateArgs>(args: Prisma.Subset<T, WorkAggregateArgs>): Prisma.PrismaPromise<GetWorkAggregateType<T>>

  /**
   * Group by Work.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends WorkGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: WorkGroupByArgs['orderBy'] }
      : { orderBy?: WorkGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, WorkGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Work model
 */
readonly fields: WorkFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Work.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__WorkClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  author<T extends Prisma.ProfileDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProfileDefaultArgs<ExtArgs>>): Prisma.Prisma__ProfileClient<runtime.Types.Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  workImages<T extends Prisma.Work$workImagesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Work$workImagesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WorkImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  workTopics<T extends Prisma.Work$workTopicsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Work$workTopicsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WorkTopicPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  workLikes<T extends Prisma.Work$workLikesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Work$workLikesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WorkLikePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  workResponses<T extends Prisma.Work$workResponsesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Work$workResponsesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WorkResponsePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Work model
 */
export interface WorkFieldRefs {
  readonly id: Prisma.FieldRef<"Work", 'BigInt'>
  readonly createdAt: Prisma.FieldRef<"Work", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Work", 'DateTime'>
  readonly title: Prisma.FieldRef<"Work", 'String'>
  readonly content: Prisma.FieldRef<"Work", 'String'>
  readonly description: Prisma.FieldRef<"Work", 'String'>
  readonly authorId: Prisma.FieldRef<"Work", 'BigInt'>
}
    

// Custom InputTypes
/**
 * Work findUnique
 */
export type WorkFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Work
   */
  select?: Prisma.WorkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Work
   */
  omit?: Prisma.WorkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkInclude<ExtArgs> | null
  /**
   * Filter, which Work to fetch.
   */
  where: Prisma.WorkWhereUniqueInput
}

/**
 * Work findUniqueOrThrow
 */
export type WorkFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Work
   */
  select?: Prisma.WorkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Work
   */
  omit?: Prisma.WorkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkInclude<ExtArgs> | null
  /**
   * Filter, which Work to fetch.
   */
  where: Prisma.WorkWhereUniqueInput
}

/**
 * Work findFirst
 */
export type WorkFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Work
   */
  select?: Prisma.WorkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Work
   */
  omit?: Prisma.WorkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkInclude<ExtArgs> | null
  /**
   * Filter, which Work to fetch.
   */
  where?: Prisma.WorkWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Works to fetch.
   */
  orderBy?: Prisma.WorkOrderByWithRelationInput | Prisma.WorkOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Works.
   */
  cursor?: Prisma.WorkWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Works from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Works.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Works.
   */
  distinct?: Prisma.WorkScalarFieldEnum | Prisma.WorkScalarFieldEnum[]
}

/**
 * Work findFirstOrThrow
 */
export type WorkFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Work
   */
  select?: Prisma.WorkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Work
   */
  omit?: Prisma.WorkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkInclude<ExtArgs> | null
  /**
   * Filter, which Work to fetch.
   */
  where?: Prisma.WorkWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Works to fetch.
   */
  orderBy?: Prisma.WorkOrderByWithRelationInput | Prisma.WorkOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Works.
   */
  cursor?: Prisma.WorkWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Works from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Works.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Works.
   */
  distinct?: Prisma.WorkScalarFieldEnum | Prisma.WorkScalarFieldEnum[]
}

/**
 * Work findMany
 */
export type WorkFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Work
   */
  select?: Prisma.WorkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Work
   */
  omit?: Prisma.WorkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkInclude<ExtArgs> | null
  /**
   * Filter, which Works to fetch.
   */
  where?: Prisma.WorkWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Works to fetch.
   */
  orderBy?: Prisma.WorkOrderByWithRelationInput | Prisma.WorkOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Works.
   */
  cursor?: Prisma.WorkWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Works from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Works.
   */
  skip?: number
  distinct?: Prisma.WorkScalarFieldEnum | Prisma.WorkScalarFieldEnum[]
}

/**
 * Work create
 */
export type WorkCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Work
   */
  select?: Prisma.WorkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Work
   */
  omit?: Prisma.WorkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkInclude<ExtArgs> | null
  /**
   * The data needed to create a Work.
   */
  data: Prisma.XOR<Prisma.WorkCreateInput, Prisma.WorkUncheckedCreateInput>
}

/**
 * Work createMany
 */
export type WorkCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Works.
   */
  data: Prisma.WorkCreateManyInput | Prisma.WorkCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Work createManyAndReturn
 */
export type WorkCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Work
   */
  select?: Prisma.WorkSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Work
   */
  omit?: Prisma.WorkOmit<ExtArgs> | null
  /**
   * The data used to create many Works.
   */
  data: Prisma.WorkCreateManyInput | Prisma.WorkCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Work update
 */
export type WorkUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Work
   */
  select?: Prisma.WorkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Work
   */
  omit?: Prisma.WorkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkInclude<ExtArgs> | null
  /**
   * The data needed to update a Work.
   */
  data: Prisma.XOR<Prisma.WorkUpdateInput, Prisma.WorkUncheckedUpdateInput>
  /**
   * Choose, which Work to update.
   */
  where: Prisma.WorkWhereUniqueInput
}

/**
 * Work updateMany
 */
export type WorkUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Works.
   */
  data: Prisma.XOR<Prisma.WorkUpdateManyMutationInput, Prisma.WorkUncheckedUpdateManyInput>
  /**
   * Filter which Works to update
   */
  where?: Prisma.WorkWhereInput
  /**
   * Limit how many Works to update.
   */
  limit?: number
}

/**
 * Work updateManyAndReturn
 */
export type WorkUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Work
   */
  select?: Prisma.WorkSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Work
   */
  omit?: Prisma.WorkOmit<ExtArgs> | null
  /**
   * The data used to update Works.
   */
  data: Prisma.XOR<Prisma.WorkUpdateManyMutationInput, Prisma.WorkUncheckedUpdateManyInput>
  /**
   * Filter which Works to update
   */
  where?: Prisma.WorkWhereInput
  /**
   * Limit how many Works to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Work upsert
 */
export type WorkUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Work
   */
  select?: Prisma.WorkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Work
   */
  omit?: Prisma.WorkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkInclude<ExtArgs> | null
  /**
   * The filter to search for the Work to update in case it exists.
   */
  where: Prisma.WorkWhereUniqueInput
  /**
   * In case the Work found by the `where` argument doesn't exist, create a new Work with this data.
   */
  create: Prisma.XOR<Prisma.WorkCreateInput, Prisma.WorkUncheckedCreateInput>
  /**
   * In case the Work was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.WorkUpdateInput, Prisma.WorkUncheckedUpdateInput>
}

/**
 * Work delete
 */
export type WorkDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Work
   */
  select?: Prisma.WorkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Work
   */
  omit?: Prisma.WorkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkInclude<ExtArgs> | null
  /**
   * Filter which Work to delete.
   */
  where: Prisma.WorkWhereUniqueInput
}

/**
 * Work deleteMany
 */
export type WorkDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Works to delete
   */
  where?: Prisma.WorkWhereInput
  /**
   * Limit how many Works to delete.
   */
  limit?: number
}

/**
 * Work.workImages
 */
export type Work$workImagesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkImage
   */
  select?: Prisma.WorkImageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkImage
   */
  omit?: Prisma.WorkImageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkImageInclude<ExtArgs> | null
  where?: Prisma.WorkImageWhereInput
  orderBy?: Prisma.WorkImageOrderByWithRelationInput | Prisma.WorkImageOrderByWithRelationInput[]
  cursor?: Prisma.WorkImageWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.WorkImageScalarFieldEnum | Prisma.WorkImageScalarFieldEnum[]
}

/**
 * Work.workTopics
 */
export type Work$workTopicsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkTopic
   */
  select?: Prisma.WorkTopicSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkTopic
   */
  omit?: Prisma.WorkTopicOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkTopicInclude<ExtArgs> | null
  where?: Prisma.WorkTopicWhereInput
  orderBy?: Prisma.WorkTopicOrderByWithRelationInput | Prisma.WorkTopicOrderByWithRelationInput[]
  cursor?: Prisma.WorkTopicWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.WorkTopicScalarFieldEnum | Prisma.WorkTopicScalarFieldEnum[]
}

/**
 * Work.workLikes
 */
export type Work$workLikesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkLike
   */
  select?: Prisma.WorkLikeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkLike
   */
  omit?: Prisma.WorkLikeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkLikeInclude<ExtArgs> | null
  where?: Prisma.WorkLikeWhereInput
  orderBy?: Prisma.WorkLikeOrderByWithRelationInput | Prisma.WorkLikeOrderByWithRelationInput[]
  cursor?: Prisma.WorkLikeWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.WorkLikeScalarFieldEnum | Prisma.WorkLikeScalarFieldEnum[]
}

/**
 * Work.workResponses
 */
export type Work$workResponsesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkResponse
   */
  select?: Prisma.WorkResponseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkResponse
   */
  omit?: Prisma.WorkResponseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkResponseInclude<ExtArgs> | null
  where?: Prisma.WorkResponseWhereInput
  orderBy?: Prisma.WorkResponseOrderByWithRelationInput | Prisma.WorkResponseOrderByWithRelationInput[]
  cursor?: Prisma.WorkResponseWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.WorkResponseScalarFieldEnum | Prisma.WorkResponseScalarFieldEnum[]
}

/**
 * Work without action
 */
export type WorkDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Work
   */
  select?: Prisma.WorkSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Work
   */
  omit?: Prisma.WorkOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkInclude<ExtArgs> | null
}
