
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `WorkResponse` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model WorkResponse
 * 
 */
export type WorkResponseModel = runtime.Types.Result.DefaultSelection<Prisma.$WorkResponsePayload>

export type AggregateWorkResponse = {
  _count: WorkResponseCountAggregateOutputType | null
  _avg: WorkResponseAvgAggregateOutputType | null
  _sum: WorkResponseSumAggregateOutputType | null
  _min: WorkResponseMinAggregateOutputType | null
  _max: WorkResponseMaxAggregateOutputType | null
}

export type WorkResponseAvgAggregateOutputType = {
  id: number | null
  responderId: number | null
  workId: number | null
}

export type WorkResponseSumAggregateOutputType = {
  id: bigint | null
  responderId: bigint | null
  workId: bigint | null
}

export type WorkResponseMinAggregateOutputType = {
  id: bigint | null
  createdAt: Date | null
  updatedAt: Date | null
  response: string | null
  responderId: bigint | null
  workId: bigint | null
}

export type WorkResponseMaxAggregateOutputType = {
  id: bigint | null
  createdAt: Date | null
  updatedAt: Date | null
  response: string | null
  responderId: bigint | null
  workId: bigint | null
}

export type WorkResponseCountAggregateOutputType = {
  id: number
  createdAt: number
  updatedAt: number
  response: number
  responderId: number
  workId: number
  _all: number
}


export type WorkResponseAvgAggregateInputType = {
  id?: true
  responderId?: true
  workId?: true
}

export type WorkResponseSumAggregateInputType = {
  id?: true
  responderId?: true
  workId?: true
}

export type WorkResponseMinAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  response?: true
  responderId?: true
  workId?: true
}

export type WorkResponseMaxAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  response?: true
  responderId?: true
  workId?: true
}

export type WorkResponseCountAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  response?: true
  responderId?: true
  workId?: true
  _all?: true
}

export type WorkResponseAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which WorkResponse to aggregate.
   */
  where?: Prisma.WorkResponseWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WorkResponses to fetch.
   */
  orderBy?: Prisma.WorkResponseOrderByWithRelationInput | Prisma.WorkResponseOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.WorkResponseWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WorkResponses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WorkResponses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned WorkResponses
  **/
  _count?: true | WorkResponseCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: WorkResponseAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: WorkResponseSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: WorkResponseMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: WorkResponseMaxAggregateInputType
}

export type GetWorkResponseAggregateType<T extends WorkResponseAggregateArgs> = {
      [P in keyof T & keyof AggregateWorkResponse]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateWorkResponse[P]>
    : Prisma.GetScalarType<T[P], AggregateWorkResponse[P]>
}




export type WorkResponseGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.WorkResponseWhereInput
  orderBy?: Prisma.WorkResponseOrderByWithAggregationInput | Prisma.WorkResponseOrderByWithAggregationInput[]
  by: Prisma.WorkResponseScalarFieldEnum[] | Prisma.WorkResponseScalarFieldEnum
  having?: Prisma.WorkResponseScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: WorkResponseCountAggregateInputType | true
  _avg?: WorkResponseAvgAggregateInputType
  _sum?: WorkResponseSumAggregateInputType
  _min?: WorkResponseMinAggregateInputType
  _max?: WorkResponseMaxAggregateInputType
}

export type WorkResponseGroupByOutputType = {
  id: bigint
  createdAt: Date
  updatedAt: Date
  response: string
  responderId: bigint
  workId: bigint
  _count: WorkResponseCountAggregateOutputType | null
  _avg: WorkResponseAvgAggregateOutputType | null
  _sum: WorkResponseSumAggregateOutputType | null
  _min: WorkResponseMinAggregateOutputType | null
  _max: WorkResponseMaxAggregateOutputType | null
}

type GetWorkResponseGroupByPayload<T extends WorkResponseGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<WorkResponseGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof WorkResponseGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], WorkResponseGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], WorkResponseGroupByOutputType[P]>
      }
    >
  >



export type WorkResponseWhereInput = {
  AND?: Prisma.WorkResponseWhereInput | Prisma.WorkResponseWhereInput[]
  OR?: Prisma.WorkResponseWhereInput[]
  NOT?: Prisma.WorkResponseWhereInput | Prisma.WorkResponseWhereInput[]
  id?: Prisma.BigIntFilter<"WorkResponse"> | bigint | number
  createdAt?: Prisma.DateTimeFilter<"WorkResponse"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"WorkResponse"> | Date | string
  response?: Prisma.StringFilter<"WorkResponse"> | string
  responderId?: Prisma.BigIntFilter<"WorkResponse"> | bigint | number
  workId?: Prisma.BigIntFilter<"WorkResponse"> | bigint | number
  responder?: Prisma.XOR<Prisma.ProfileScalarRelationFilter, Prisma.ProfileWhereInput>
  work?: Prisma.XOR<Prisma.WorkScalarRelationFilter, Prisma.WorkWhereInput>
  workResponseLikes?: Prisma.WorkResponseLikeListRelationFilter
}

export type WorkResponseOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  response?: Prisma.SortOrder
  responderId?: Prisma.SortOrder
  workId?: Prisma.SortOrder
  responder?: Prisma.ProfileOrderByWithRelationInput
  work?: Prisma.WorkOrderByWithRelationInput
  workResponseLikes?: Prisma.WorkResponseLikeOrderByRelationAggregateInput
}

export type WorkResponseWhereUniqueInput = Prisma.AtLeast<{
  id?: bigint | number
  AND?: Prisma.WorkResponseWhereInput | Prisma.WorkResponseWhereInput[]
  OR?: Prisma.WorkResponseWhereInput[]
  NOT?: Prisma.WorkResponseWhereInput | Prisma.WorkResponseWhereInput[]
  createdAt?: Prisma.DateTimeFilter<"WorkResponse"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"WorkResponse"> | Date | string
  response?: Prisma.StringFilter<"WorkResponse"> | string
  responderId?: Prisma.BigIntFilter<"WorkResponse"> | bigint | number
  workId?: Prisma.BigIntFilter<"WorkResponse"> | bigint | number
  responder?: Prisma.XOR<Prisma.ProfileScalarRelationFilter, Prisma.ProfileWhereInput>
  work?: Prisma.XOR<Prisma.WorkScalarRelationFilter, Prisma.WorkWhereInput>
  workResponseLikes?: Prisma.WorkResponseLikeListRelationFilter
}, "id">

export type WorkResponseOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  response?: Prisma.SortOrder
  responderId?: Prisma.SortOrder
  workId?: Prisma.SortOrder
  _count?: Prisma.WorkResponseCountOrderByAggregateInput
  _avg?: Prisma.WorkResponseAvgOrderByAggregateInput
  _max?: Prisma.WorkResponseMaxOrderByAggregateInput
  _min?: Prisma.WorkResponseMinOrderByAggregateInput
  _sum?: Prisma.WorkResponseSumOrderByAggregateInput
}

export type WorkResponseScalarWhereWithAggregatesInput = {
  AND?: Prisma.WorkResponseScalarWhereWithAggregatesInput | Prisma.WorkResponseScalarWhereWithAggregatesInput[]
  OR?: Prisma.WorkResponseScalarWhereWithAggregatesInput[]
  NOT?: Prisma.WorkResponseScalarWhereWithAggregatesInput | Prisma.WorkResponseScalarWhereWithAggregatesInput[]
  id?: Prisma.BigIntWithAggregatesFilter<"WorkResponse"> | bigint | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"WorkResponse"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"WorkResponse"> | Date | string
  response?: Prisma.StringWithAggregatesFilter<"WorkResponse"> | string
  responderId?: Prisma.BigIntWithAggregatesFilter<"WorkResponse"> | bigint | number
  workId?: Prisma.BigIntWithAggregatesFilter<"WorkResponse"> | bigint | number
}

export type WorkResponseCreateInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  response: string
  responder: Prisma.ProfileCreateNestedOneWithoutWorkResponsesInput
  work: Prisma.WorkCreateNestedOneWithoutWorkResponsesInput
  workResponseLikes?: Prisma.WorkResponseLikeCreateNestedManyWithoutWorkResponseInput
}

export type WorkResponseUncheckedCreateInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  response: string
  responderId: bigint | number
  workId: bigint | number
  workResponseLikes?: Prisma.WorkResponseLikeUncheckedCreateNestedManyWithoutWorkResponseInput
}

export type WorkResponseUpdateInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  response?: Prisma.StringFieldUpdateOperationsInput | string
  responder?: Prisma.ProfileUpdateOneRequiredWithoutWorkResponsesNestedInput
  work?: Prisma.WorkUpdateOneRequiredWithoutWorkResponsesNestedInput
  workResponseLikes?: Prisma.WorkResponseLikeUpdateManyWithoutWorkResponseNestedInput
}

export type WorkResponseUncheckedUpdateInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  response?: Prisma.StringFieldUpdateOperationsInput | string
  responderId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  workId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  workResponseLikes?: Prisma.WorkResponseLikeUncheckedUpdateManyWithoutWorkResponseNestedInput
}

export type WorkResponseCreateManyInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  response: string
  responderId: bigint | number
  workId: bigint | number
}

export type WorkResponseUpdateManyMutationInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  response?: Prisma.StringFieldUpdateOperationsInput | string
}

export type WorkResponseUncheckedUpdateManyInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  response?: Prisma.StringFieldUpdateOperationsInput | string
  responderId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  workId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
}

export type WorkResponseListRelationFilter = {
  every?: Prisma.WorkResponseWhereInput
  some?: Prisma.WorkResponseWhereInput
  none?: Prisma.WorkResponseWhereInput
}

export type WorkResponseOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type WorkResponseCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  response?: Prisma.SortOrder
  responderId?: Prisma.SortOrder
  workId?: Prisma.SortOrder
}

export type WorkResponseAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  responderId?: Prisma.SortOrder
  workId?: Prisma.SortOrder
}

export type WorkResponseMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  response?: Prisma.SortOrder
  responderId?: Prisma.SortOrder
  workId?: Prisma.SortOrder
}

export type WorkResponseMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  response?: Prisma.SortOrder
  responderId?: Prisma.SortOrder
  workId?: Prisma.SortOrder
}

export type WorkResponseSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  responderId?: Prisma.SortOrder
  workId?: Prisma.SortOrder
}

export type WorkResponseScalarRelationFilter = {
  is?: Prisma.WorkResponseWhereInput
  isNot?: Prisma.WorkResponseWhereInput
}

export type WorkResponseCreateNestedManyWithoutWorkInput = {
  create?: Prisma.XOR<Prisma.WorkResponseCreateWithoutWorkInput, Prisma.WorkResponseUncheckedCreateWithoutWorkInput> | Prisma.WorkResponseCreateWithoutWorkInput[] | Prisma.WorkResponseUncheckedCreateWithoutWorkInput[]
  connectOrCreate?: Prisma.WorkResponseCreateOrConnectWithoutWorkInput | Prisma.WorkResponseCreateOrConnectWithoutWorkInput[]
  createMany?: Prisma.WorkResponseCreateManyWorkInputEnvelope
  connect?: Prisma.WorkResponseWhereUniqueInput | Prisma.WorkResponseWhereUniqueInput[]
}

export type WorkResponseUncheckedCreateNestedManyWithoutWorkInput = {
  create?: Prisma.XOR<Prisma.WorkResponseCreateWithoutWorkInput, Prisma.WorkResponseUncheckedCreateWithoutWorkInput> | Prisma.WorkResponseCreateWithoutWorkInput[] | Prisma.WorkResponseUncheckedCreateWithoutWorkInput[]
  connectOrCreate?: Prisma.WorkResponseCreateOrConnectWithoutWorkInput | Prisma.WorkResponseCreateOrConnectWithoutWorkInput[]
  createMany?: Prisma.WorkResponseCreateManyWorkInputEnvelope
  connect?: Prisma.WorkResponseWhereUniqueInput | Prisma.WorkResponseWhereUniqueInput[]
}

export type WorkResponseUpdateManyWithoutWorkNestedInput = {
  create?: Prisma.XOR<Prisma.WorkResponseCreateWithoutWorkInput, Prisma.WorkResponseUncheckedCreateWithoutWorkInput> | Prisma.WorkResponseCreateWithoutWorkInput[] | Prisma.WorkResponseUncheckedCreateWithoutWorkInput[]
  connectOrCreate?: Prisma.WorkResponseCreateOrConnectWithoutWorkInput | Prisma.WorkResponseCreateOrConnectWithoutWorkInput[]
  upsert?: Prisma.WorkResponseUpsertWithWhereUniqueWithoutWorkInput | Prisma.WorkResponseUpsertWithWhereUniqueWithoutWorkInput[]
  createMany?: Prisma.WorkResponseCreateManyWorkInputEnvelope
  set?: Prisma.WorkResponseWhereUniqueInput | Prisma.WorkResponseWhereUniqueInput[]
  disconnect?: Prisma.WorkResponseWhereUniqueInput | Prisma.WorkResponseWhereUniqueInput[]
  delete?: Prisma.WorkResponseWhereUniqueInput | Prisma.WorkResponseWhereUniqueInput[]
  connect?: Prisma.WorkResponseWhereUniqueInput | Prisma.WorkResponseWhereUniqueInput[]
  update?: Prisma.WorkResponseUpdateWithWhereUniqueWithoutWorkInput | Prisma.WorkResponseUpdateWithWhereUniqueWithoutWorkInput[]
  updateMany?: Prisma.WorkResponseUpdateManyWithWhereWithoutWorkInput | Prisma.WorkResponseUpdateManyWithWhereWithoutWorkInput[]
  deleteMany?: Prisma.WorkResponseScalarWhereInput | Prisma.WorkResponseScalarWhereInput[]
}

export type WorkResponseUncheckedUpdateManyWithoutWorkNestedInput = {
  create?: Prisma.XOR<Prisma.WorkResponseCreateWithoutWorkInput, Prisma.WorkResponseUncheckedCreateWithoutWorkInput> | Prisma.WorkResponseCreateWithoutWorkInput[] | Prisma.WorkResponseUncheckedCreateWithoutWorkInput[]
  connectOrCreate?: Prisma.WorkResponseCreateOrConnectWithoutWorkInput | Prisma.WorkResponseCreateOrConnectWithoutWorkInput[]
  upsert?: Prisma.WorkResponseUpsertWithWhereUniqueWithoutWorkInput | Prisma.WorkResponseUpsertWithWhereUniqueWithoutWorkInput[]
  createMany?: Prisma.WorkResponseCreateManyWorkInputEnvelope
  set?: Prisma.WorkResponseWhereUniqueInput | Prisma.WorkResponseWhereUniqueInput[]
  disconnect?: Prisma.WorkResponseWhereUniqueInput | Prisma.WorkResponseWhereUniqueInput[]
  delete?: Prisma.WorkResponseWhereUniqueInput | Prisma.WorkResponseWhereUniqueInput[]
  connect?: Prisma.WorkResponseWhereUniqueInput | Prisma.WorkResponseWhereUniqueInput[]
  update?: Prisma.WorkResponseUpdateWithWhereUniqueWithoutWorkInput | Prisma.WorkResponseUpdateWithWhereUniqueWithoutWorkInput[]
  updateMany?: Prisma.WorkResponseUpdateManyWithWhereWithoutWorkInput | Prisma.WorkResponseUpdateManyWithWhereWithoutWorkInput[]
  deleteMany?: Prisma.WorkResponseScalarWhereInput | Prisma.WorkResponseScalarWhereInput[]
}

export type WorkResponseCreateNestedManyWithoutResponderInput = {
  create?: Prisma.XOR<Prisma.WorkResponseCreateWithoutResponderInput, Prisma.WorkResponseUncheckedCreateWithoutResponderInput> | Prisma.WorkResponseCreateWithoutResponderInput[] | Prisma.WorkResponseUncheckedCreateWithoutResponderInput[]
  connectOrCreate?: Prisma.WorkResponseCreateOrConnectWithoutResponderInput | Prisma.WorkResponseCreateOrConnectWithoutResponderInput[]
  createMany?: Prisma.WorkResponseCreateManyResponderInputEnvelope
  connect?: Prisma.WorkResponseWhereUniqueInput | Prisma.WorkResponseWhereUniqueInput[]
}

export type WorkResponseUncheckedCreateNestedManyWithoutResponderInput = {
  create?: Prisma.XOR<Prisma.WorkResponseCreateWithoutResponderInput, Prisma.WorkResponseUncheckedCreateWithoutResponderInput> | Prisma.WorkResponseCreateWithoutResponderInput[] | Prisma.WorkResponseUncheckedCreateWithoutResponderInput[]
  connectOrCreate?: Prisma.WorkResponseCreateOrConnectWithoutResponderInput | Prisma.WorkResponseCreateOrConnectWithoutResponderInput[]
  createMany?: Prisma.WorkResponseCreateManyResponderInputEnvelope
  connect?: Prisma.WorkResponseWhereUniqueInput | Prisma.WorkResponseWhereUniqueInput[]
}

export type WorkResponseUpdateManyWithoutResponderNestedInput = {
  create?: Prisma.XOR<Prisma.WorkResponseCreateWithoutResponderInput, Prisma.WorkResponseUncheckedCreateWithoutResponderInput> | Prisma.WorkResponseCreateWithoutResponderInput[] | Prisma.WorkResponseUncheckedCreateWithoutResponderInput[]
  connectOrCreate?: Prisma.WorkResponseCreateOrConnectWithoutResponderInput | Prisma.WorkResponseCreateOrConnectWithoutResponderInput[]
  upsert?: Prisma.WorkResponseUpsertWithWhereUniqueWithoutResponderInput | Prisma.WorkResponseUpsertWithWhereUniqueWithoutResponderInput[]
  createMany?: Prisma.WorkResponseCreateManyResponderInputEnvelope
  set?: Prisma.WorkResponseWhereUniqueInput | Prisma.WorkResponseWhereUniqueInput[]
  disconnect?: Prisma.WorkResponseWhereUniqueInput | Prisma.WorkResponseWhereUniqueInput[]
  delete?: Prisma.WorkResponseWhereUniqueInput | Prisma.WorkResponseWhereUniqueInput[]
  connect?: Prisma.WorkResponseWhereUniqueInput | Prisma.WorkResponseWhereUniqueInput[]
  update?: Prisma.WorkResponseUpdateWithWhereUniqueWithoutResponderInput | Prisma.WorkResponseUpdateWithWhereUniqueWithoutResponderInput[]
  updateMany?: Prisma.WorkResponseUpdateManyWithWhereWithoutResponderInput | Prisma.WorkResponseUpdateManyWithWhereWithoutResponderInput[]
  deleteMany?: Prisma.WorkResponseScalarWhereInput | Prisma.WorkResponseScalarWhereInput[]
}

export type WorkResponseUncheckedUpdateManyWithoutResponderNestedInput = {
  create?: Prisma.XOR<Prisma.WorkResponseCreateWithoutResponderInput, Prisma.WorkResponseUncheckedCreateWithoutResponderInput> | Prisma.WorkResponseCreateWithoutResponderInput[] | Prisma.WorkResponseUncheckedCreateWithoutResponderInput[]
  connectOrCreate?: Prisma.WorkResponseCreateOrConnectWithoutResponderInput | Prisma.WorkResponseCreateOrConnectWithoutResponderInput[]
  upsert?: Prisma.WorkResponseUpsertWithWhereUniqueWithoutResponderInput | Prisma.WorkResponseUpsertWithWhereUniqueWithoutResponderInput[]
  createMany?: Prisma.WorkResponseCreateManyResponderInputEnvelope
  set?: Prisma.WorkResponseWhereUniqueInput | Prisma.WorkResponseWhereUniqueInput[]
  disconnect?: Prisma.WorkResponseWhereUniqueInput | Prisma.WorkResponseWhereUniqueInput[]
  delete?: Prisma.WorkResponseWhereUniqueInput | Prisma.WorkResponseWhereUniqueInput[]
  connect?: Prisma.WorkResponseWhereUniqueInput | Prisma.WorkResponseWhereUniqueInput[]
  update?: Prisma.WorkResponseUpdateWithWhereUniqueWithoutResponderInput | Prisma.WorkResponseUpdateWithWhereUniqueWithoutResponderInput[]
  updateMany?: Prisma.WorkResponseUpdateManyWithWhereWithoutResponderInput | Prisma.WorkResponseUpdateManyWithWhereWithoutResponderInput[]
  deleteMany?: Prisma.WorkResponseScalarWhereInput | Prisma.WorkResponseScalarWhereInput[]
}

export type WorkResponseCreateNestedOneWithoutWorkResponseLikesInput = {
  create?: Prisma.XOR<Prisma.WorkResponseCreateWithoutWorkResponseLikesInput, Prisma.WorkResponseUncheckedCreateWithoutWorkResponseLikesInput>
  connectOrCreate?: Prisma.WorkResponseCreateOrConnectWithoutWorkResponseLikesInput
  connect?: Prisma.WorkResponseWhereUniqueInput
}

export type WorkResponseUpdateOneRequiredWithoutWorkResponseLikesNestedInput = {
  create?: Prisma.XOR<Prisma.WorkResponseCreateWithoutWorkResponseLikesInput, Prisma.WorkResponseUncheckedCreateWithoutWorkResponseLikesInput>
  connectOrCreate?: Prisma.WorkResponseCreateOrConnectWithoutWorkResponseLikesInput
  upsert?: Prisma.WorkResponseUpsertWithoutWorkResponseLikesInput
  connect?: Prisma.WorkResponseWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.WorkResponseUpdateToOneWithWhereWithoutWorkResponseLikesInput, Prisma.WorkResponseUpdateWithoutWorkResponseLikesInput>, Prisma.WorkResponseUncheckedUpdateWithoutWorkResponseLikesInput>
}

export type WorkResponseCreateWithoutWorkInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  response: string
  responder: Prisma.ProfileCreateNestedOneWithoutWorkResponsesInput
  workResponseLikes?: Prisma.WorkResponseLikeCreateNestedManyWithoutWorkResponseInput
}

export type WorkResponseUncheckedCreateWithoutWorkInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  response: string
  responderId: bigint | number
  workResponseLikes?: Prisma.WorkResponseLikeUncheckedCreateNestedManyWithoutWorkResponseInput
}

export type WorkResponseCreateOrConnectWithoutWorkInput = {
  where: Prisma.WorkResponseWhereUniqueInput
  create: Prisma.XOR<Prisma.WorkResponseCreateWithoutWorkInput, Prisma.WorkResponseUncheckedCreateWithoutWorkInput>
}

export type WorkResponseCreateManyWorkInputEnvelope = {
  data: Prisma.WorkResponseCreateManyWorkInput | Prisma.WorkResponseCreateManyWorkInput[]
  skipDuplicates?: boolean
}

export type WorkResponseUpsertWithWhereUniqueWithoutWorkInput = {
  where: Prisma.WorkResponseWhereUniqueInput
  update: Prisma.XOR<Prisma.WorkResponseUpdateWithoutWorkInput, Prisma.WorkResponseUncheckedUpdateWithoutWorkInput>
  create: Prisma.XOR<Prisma.WorkResponseCreateWithoutWorkInput, Prisma.WorkResponseUncheckedCreateWithoutWorkInput>
}

export type WorkResponseUpdateWithWhereUniqueWithoutWorkInput = {
  where: Prisma.WorkResponseWhereUniqueInput
  data: Prisma.XOR<Prisma.WorkResponseUpdateWithoutWorkInput, Prisma.WorkResponseUncheckedUpdateWithoutWorkInput>
}

export type WorkResponseUpdateManyWithWhereWithoutWorkInput = {
  where: Prisma.WorkResponseScalarWhereInput
  data: Prisma.XOR<Prisma.WorkResponseUpdateManyMutationInput, Prisma.WorkResponseUncheckedUpdateManyWithoutWorkInput>
}

export type WorkResponseScalarWhereInput = {
  AND?: Prisma.WorkResponseScalarWhereInput | Prisma.WorkResponseScalarWhereInput[]
  OR?: Prisma.WorkResponseScalarWhereInput[]
  NOT?: Prisma.WorkResponseScalarWhereInput | Prisma.WorkResponseScalarWhereInput[]
  id?: Prisma.BigIntFilter<"WorkResponse"> | bigint | number
  createdAt?: Prisma.DateTimeFilter<"WorkResponse"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"WorkResponse"> | Date | string
  response?: Prisma.StringFilter<"WorkResponse"> | string
  responderId?: Prisma.BigIntFilter<"WorkResponse"> | bigint | number
  workId?: Prisma.BigIntFilter<"WorkResponse"> | bigint | number
}

export type WorkResponseCreateWithoutResponderInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  response: string
  work: Prisma.WorkCreateNestedOneWithoutWorkResponsesInput
  workResponseLikes?: Prisma.WorkResponseLikeCreateNestedManyWithoutWorkResponseInput
}

export type WorkResponseUncheckedCreateWithoutResponderInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  response: string
  workId: bigint | number
  workResponseLikes?: Prisma.WorkResponseLikeUncheckedCreateNestedManyWithoutWorkResponseInput
}

export type WorkResponseCreateOrConnectWithoutResponderInput = {
  where: Prisma.WorkResponseWhereUniqueInput
  create: Prisma.XOR<Prisma.WorkResponseCreateWithoutResponderInput, Prisma.WorkResponseUncheckedCreateWithoutResponderInput>
}

export type WorkResponseCreateManyResponderInputEnvelope = {
  data: Prisma.WorkResponseCreateManyResponderInput | Prisma.WorkResponseCreateManyResponderInput[]
  skipDuplicates?: boolean
}

export type WorkResponseUpsertWithWhereUniqueWithoutResponderInput = {
  where: Prisma.WorkResponseWhereUniqueInput
  update: Prisma.XOR<Prisma.WorkResponseUpdateWithoutResponderInput, Prisma.WorkResponseUncheckedUpdateWithoutResponderInput>
  create: Prisma.XOR<Prisma.WorkResponseCreateWithoutResponderInput, Prisma.WorkResponseUncheckedCreateWithoutResponderInput>
}

export type WorkResponseUpdateWithWhereUniqueWithoutResponderInput = {
  where: Prisma.WorkResponseWhereUniqueInput
  data: Prisma.XOR<Prisma.WorkResponseUpdateWithoutResponderInput, Prisma.WorkResponseUncheckedUpdateWithoutResponderInput>
}

export type WorkResponseUpdateManyWithWhereWithoutResponderInput = {
  where: Prisma.WorkResponseScalarWhereInput
  data: Prisma.XOR<Prisma.WorkResponseUpdateManyMutationInput, Prisma.WorkResponseUncheckedUpdateManyWithoutResponderInput>
}

export type WorkResponseCreateWithoutWorkResponseLikesInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  response: string
  responder: Prisma.ProfileCreateNestedOneWithoutWorkResponsesInput
  work: Prisma.WorkCreateNestedOneWithoutWorkResponsesInput
}

export type WorkResponseUncheckedCreateWithoutWorkResponseLikesInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  response: string
  responderId: bigint | number
  workId: bigint | number
}

export type WorkResponseCreateOrConnectWithoutWorkResponseLikesInput = {
  where: Prisma.WorkResponseWhereUniqueInput
  create: Prisma.XOR<Prisma.WorkResponseCreateWithoutWorkResponseLikesInput, Prisma.WorkResponseUncheckedCreateWithoutWorkResponseLikesInput>
}

export type WorkResponseUpsertWithoutWorkResponseLikesInput = {
  update: Prisma.XOR<Prisma.WorkResponseUpdateWithoutWorkResponseLikesInput, Prisma.WorkResponseUncheckedUpdateWithoutWorkResponseLikesInput>
  create: Prisma.XOR<Prisma.WorkResponseCreateWithoutWorkResponseLikesInput, Prisma.WorkResponseUncheckedCreateWithoutWorkResponseLikesInput>
  where?: Prisma.WorkResponseWhereInput
}

export type WorkResponseUpdateToOneWithWhereWithoutWorkResponseLikesInput = {
  where?: Prisma.WorkResponseWhereInput
  data: Prisma.XOR<Prisma.WorkResponseUpdateWithoutWorkResponseLikesInput, Prisma.WorkResponseUncheckedUpdateWithoutWorkResponseLikesInput>
}

export type WorkResponseUpdateWithoutWorkResponseLikesInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  response?: Prisma.StringFieldUpdateOperationsInput | string
  responder?: Prisma.ProfileUpdateOneRequiredWithoutWorkResponsesNestedInput
  work?: Prisma.WorkUpdateOneRequiredWithoutWorkResponsesNestedInput
}

export type WorkResponseUncheckedUpdateWithoutWorkResponseLikesInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  response?: Prisma.StringFieldUpdateOperationsInput | string
  responderId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  workId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
}

export type WorkResponseCreateManyWorkInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  response: string
  responderId: bigint | number
}

export type WorkResponseUpdateWithoutWorkInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  response?: Prisma.StringFieldUpdateOperationsInput | string
  responder?: Prisma.ProfileUpdateOneRequiredWithoutWorkResponsesNestedInput
  workResponseLikes?: Prisma.WorkResponseLikeUpdateManyWithoutWorkResponseNestedInput
}

export type WorkResponseUncheckedUpdateWithoutWorkInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  response?: Prisma.StringFieldUpdateOperationsInput | string
  responderId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  workResponseLikes?: Prisma.WorkResponseLikeUncheckedUpdateManyWithoutWorkResponseNestedInput
}

export type WorkResponseUncheckedUpdateManyWithoutWorkInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  response?: Prisma.StringFieldUpdateOperationsInput | string
  responderId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
}

export type WorkResponseCreateManyResponderInput = {
  id?: bigint | number
  createdAt?: Date | string
  updatedAt?: Date | string
  response: string
  workId: bigint | number
}

export type WorkResponseUpdateWithoutResponderInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  response?: Prisma.StringFieldUpdateOperationsInput | string
  work?: Prisma.WorkUpdateOneRequiredWithoutWorkResponsesNestedInput
  workResponseLikes?: Prisma.WorkResponseLikeUpdateManyWithoutWorkResponseNestedInput
}

export type WorkResponseUncheckedUpdateWithoutResponderInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  response?: Prisma.StringFieldUpdateOperationsInput | string
  workId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  workResponseLikes?: Prisma.WorkResponseLikeUncheckedUpdateManyWithoutWorkResponseNestedInput
}

export type WorkResponseUncheckedUpdateManyWithoutResponderInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  response?: Prisma.StringFieldUpdateOperationsInput | string
  workId?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
}


/**
 * Count Type WorkResponseCountOutputType
 */

export type WorkResponseCountOutputType = {
  workResponseLikes: number
}

export type WorkResponseCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  workResponseLikes?: boolean | WorkResponseCountOutputTypeCountWorkResponseLikesArgs
}

/**
 * WorkResponseCountOutputType without action
 */
export type WorkResponseCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkResponseCountOutputType
   */
  select?: Prisma.WorkResponseCountOutputTypeSelect<ExtArgs> | null
}

/**
 * WorkResponseCountOutputType without action
 */
export type WorkResponseCountOutputTypeCountWorkResponseLikesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.WorkResponseLikeWhereInput
}


export type WorkResponseSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  response?: boolean
  responderId?: boolean
  workId?: boolean
  responder?: boolean | Prisma.ProfileDefaultArgs<ExtArgs>
  work?: boolean | Prisma.WorkDefaultArgs<ExtArgs>
  workResponseLikes?: boolean | Prisma.WorkResponse$workResponseLikesArgs<ExtArgs>
  _count?: boolean | Prisma.WorkResponseCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["workResponse"]>

export type WorkResponseSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  response?: boolean
  responderId?: boolean
  workId?: boolean
  responder?: boolean | Prisma.ProfileDefaultArgs<ExtArgs>
  work?: boolean | Prisma.WorkDefaultArgs<ExtArgs>
}, ExtArgs["result"]["workResponse"]>

export type WorkResponseSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  response?: boolean
  responderId?: boolean
  workId?: boolean
  responder?: boolean | Prisma.ProfileDefaultArgs<ExtArgs>
  work?: boolean | Prisma.WorkDefaultArgs<ExtArgs>
}, ExtArgs["result"]["workResponse"]>

export type WorkResponseSelectScalar = {
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  response?: boolean
  responderId?: boolean
  workId?: boolean
}

export type WorkResponseOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "response" | "responderId" | "workId", ExtArgs["result"]["workResponse"]>
export type WorkResponseInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  responder?: boolean | Prisma.ProfileDefaultArgs<ExtArgs>
  work?: boolean | Prisma.WorkDefaultArgs<ExtArgs>
  workResponseLikes?: boolean | Prisma.WorkResponse$workResponseLikesArgs<ExtArgs>
  _count?: boolean | Prisma.WorkResponseCountOutputTypeDefaultArgs<ExtArgs>
}
export type WorkResponseIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  responder?: boolean | Prisma.ProfileDefaultArgs<ExtArgs>
  work?: boolean | Prisma.WorkDefaultArgs<ExtArgs>
}
export type WorkResponseIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  responder?: boolean | Prisma.ProfileDefaultArgs<ExtArgs>
  work?: boolean | Prisma.WorkDefaultArgs<ExtArgs>
}

export type $WorkResponsePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "WorkResponse"
  objects: {
    responder: Prisma.$ProfilePayload<ExtArgs>
    work: Prisma.$WorkPayload<ExtArgs>
    workResponseLikes: Prisma.$WorkResponseLikePayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: bigint
    createdAt: Date
    updatedAt: Date
    response: string
    responderId: bigint
    workId: bigint
  }, ExtArgs["result"]["workResponse"]>
  composites: {}
}

export type WorkResponseGetPayload<S extends boolean | null | undefined | WorkResponseDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$WorkResponsePayload, S>

export type WorkResponseCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<WorkResponseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: WorkResponseCountAggregateInputType | true
  }

export interface WorkResponseDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkResponse'], meta: { name: 'WorkResponse' } }
  /**
   * Find zero or one WorkResponse that matches the filter.
   * @param {WorkResponseFindUniqueArgs} args - Arguments to find a WorkResponse
   * @example
   * // Get one WorkResponse
   * const workResponse = await prisma.workResponse.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends WorkResponseFindUniqueArgs>(args: Prisma.SelectSubset<T, WorkResponseFindUniqueArgs<ExtArgs>>): Prisma.Prisma__WorkResponseClient<runtime.Types.Result.GetResult<Prisma.$WorkResponsePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one WorkResponse that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {WorkResponseFindUniqueOrThrowArgs} args - Arguments to find a WorkResponse
   * @example
   * // Get one WorkResponse
   * const workResponse = await prisma.workResponse.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends WorkResponseFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, WorkResponseFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__WorkResponseClient<runtime.Types.Result.GetResult<Prisma.$WorkResponsePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first WorkResponse that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkResponseFindFirstArgs} args - Arguments to find a WorkResponse
   * @example
   * // Get one WorkResponse
   * const workResponse = await prisma.workResponse.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends WorkResponseFindFirstArgs>(args?: Prisma.SelectSubset<T, WorkResponseFindFirstArgs<ExtArgs>>): Prisma.Prisma__WorkResponseClient<runtime.Types.Result.GetResult<Prisma.$WorkResponsePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first WorkResponse that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkResponseFindFirstOrThrowArgs} args - Arguments to find a WorkResponse
   * @example
   * // Get one WorkResponse
   * const workResponse = await prisma.workResponse.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends WorkResponseFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, WorkResponseFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__WorkResponseClient<runtime.Types.Result.GetResult<Prisma.$WorkResponsePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more WorkResponses that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkResponseFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all WorkResponses
   * const workResponses = await prisma.workResponse.findMany()
   * 
   * // Get first 10 WorkResponses
   * const workResponses = await prisma.workResponse.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const workResponseWithIdOnly = await prisma.workResponse.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends WorkResponseFindManyArgs>(args?: Prisma.SelectSubset<T, WorkResponseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WorkResponsePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a WorkResponse.
   * @param {WorkResponseCreateArgs} args - Arguments to create a WorkResponse.
   * @example
   * // Create one WorkResponse
   * const WorkResponse = await prisma.workResponse.create({
   *   data: {
   *     // ... data to create a WorkResponse
   *   }
   * })
   * 
   */
  create<T extends WorkResponseCreateArgs>(args: Prisma.SelectSubset<T, WorkResponseCreateArgs<ExtArgs>>): Prisma.Prisma__WorkResponseClient<runtime.Types.Result.GetResult<Prisma.$WorkResponsePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many WorkResponses.
   * @param {WorkResponseCreateManyArgs} args - Arguments to create many WorkResponses.
   * @example
   * // Create many WorkResponses
   * const workResponse = await prisma.workResponse.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends WorkResponseCreateManyArgs>(args?: Prisma.SelectSubset<T, WorkResponseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many WorkResponses and returns the data saved in the database.
   * @param {WorkResponseCreateManyAndReturnArgs} args - Arguments to create many WorkResponses.
   * @example
   * // Create many WorkResponses
   * const workResponse = await prisma.workResponse.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many WorkResponses and only return the `id`
   * const workResponseWithIdOnly = await prisma.workResponse.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends WorkResponseCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, WorkResponseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WorkResponsePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a WorkResponse.
   * @param {WorkResponseDeleteArgs} args - Arguments to delete one WorkResponse.
   * @example
   * // Delete one WorkResponse
   * const WorkResponse = await prisma.workResponse.delete({
   *   where: {
   *     // ... filter to delete one WorkResponse
   *   }
   * })
   * 
   */
  delete<T extends WorkResponseDeleteArgs>(args: Prisma.SelectSubset<T, WorkResponseDeleteArgs<ExtArgs>>): Prisma.Prisma__WorkResponseClient<runtime.Types.Result.GetResult<Prisma.$WorkResponsePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one WorkResponse.
   * @param {WorkResponseUpdateArgs} args - Arguments to update one WorkResponse.
   * @example
   * // Update one WorkResponse
   * const workResponse = await prisma.workResponse.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends WorkResponseUpdateArgs>(args: Prisma.SelectSubset<T, WorkResponseUpdateArgs<ExtArgs>>): Prisma.Prisma__WorkResponseClient<runtime.Types.Result.GetResult<Prisma.$WorkResponsePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more WorkResponses.
   * @param {WorkResponseDeleteManyArgs} args - Arguments to filter WorkResponses to delete.
   * @example
   * // Delete a few WorkResponses
   * const { count } = await prisma.workResponse.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends WorkResponseDeleteManyArgs>(args?: Prisma.SelectSubset<T, WorkResponseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more WorkResponses.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkResponseUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many WorkResponses
   * const workResponse = await prisma.workResponse.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends WorkResponseUpdateManyArgs>(args: Prisma.SelectSubset<T, WorkResponseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more WorkResponses and returns the data updated in the database.
   * @param {WorkResponseUpdateManyAndReturnArgs} args - Arguments to update many WorkResponses.
   * @example
   * // Update many WorkResponses
   * const workResponse = await prisma.workResponse.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more WorkResponses and only return the `id`
   * const workResponseWithIdOnly = await prisma.workResponse.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends WorkResponseUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, WorkResponseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WorkResponsePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one WorkResponse.
   * @param {WorkResponseUpsertArgs} args - Arguments to update or create a WorkResponse.
   * @example
   * // Update or create a WorkResponse
   * const workResponse = await prisma.workResponse.upsert({
   *   create: {
   *     // ... data to create a WorkResponse
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the WorkResponse we want to update
   *   }
   * })
   */
  upsert<T extends WorkResponseUpsertArgs>(args: Prisma.SelectSubset<T, WorkResponseUpsertArgs<ExtArgs>>): Prisma.Prisma__WorkResponseClient<runtime.Types.Result.GetResult<Prisma.$WorkResponsePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of WorkResponses.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkResponseCountArgs} args - Arguments to filter WorkResponses to count.
   * @example
   * // Count the number of WorkResponses
   * const count = await prisma.workResponse.count({
   *   where: {
   *     // ... the filter for the WorkResponses we want to count
   *   }
   * })
  **/
  count<T extends WorkResponseCountArgs>(
    args?: Prisma.Subset<T, WorkResponseCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], WorkResponseCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a WorkResponse.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkResponseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends WorkResponseAggregateArgs>(args: Prisma.Subset<T, WorkResponseAggregateArgs>): Prisma.PrismaPromise<GetWorkResponseAggregateType<T>>

  /**
   * Group by WorkResponse.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WorkResponseGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends WorkResponseGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: WorkResponseGroupByArgs['orderBy'] }
      : { orderBy?: WorkResponseGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, WorkResponseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkResponseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the WorkResponse model
 */
readonly fields: WorkResponseFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for WorkResponse.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__WorkResponseClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  responder<T extends Prisma.ProfileDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProfileDefaultArgs<ExtArgs>>): Prisma.Prisma__ProfileClient<runtime.Types.Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  work<T extends Prisma.WorkDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.WorkDefaultArgs<ExtArgs>>): Prisma.Prisma__WorkClient<runtime.Types.Result.GetResult<Prisma.$WorkPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  workResponseLikes<T extends Prisma.WorkResponse$workResponseLikesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.WorkResponse$workResponseLikesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WorkResponseLikePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the WorkResponse model
 */
export interface WorkResponseFieldRefs {
  readonly id: Prisma.FieldRef<"WorkResponse", 'BigInt'>
  readonly createdAt: Prisma.FieldRef<"WorkResponse", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"WorkResponse", 'DateTime'>
  readonly response: Prisma.FieldRef<"WorkResponse", 'String'>
  readonly responderId: Prisma.FieldRef<"WorkResponse", 'BigInt'>
  readonly workId: Prisma.FieldRef<"WorkResponse", 'BigInt'>
}
    

// Custom InputTypes
/**
 * WorkResponse findUnique
 */
export type WorkResponseFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkResponse
   */
  select?: Prisma.WorkResponseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkResponse
   */
  omit?: Prisma.WorkResponseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkResponseInclude<ExtArgs> | null
  /**
   * Filter, which WorkResponse to fetch.
   */
  where: Prisma.WorkResponseWhereUniqueInput
}

/**
 * WorkResponse findUniqueOrThrow
 */
export type WorkResponseFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkResponse
   */
  select?: Prisma.WorkResponseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkResponse
   */
  omit?: Prisma.WorkResponseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkResponseInclude<ExtArgs> | null
  /**
   * Filter, which WorkResponse to fetch.
   */
  where: Prisma.WorkResponseWhereUniqueInput
}

/**
 * WorkResponse findFirst
 */
export type WorkResponseFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkResponse
   */
  select?: Prisma.WorkResponseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkResponse
   */
  omit?: Prisma.WorkResponseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkResponseInclude<ExtArgs> | null
  /**
   * Filter, which WorkResponse to fetch.
   */
  where?: Prisma.WorkResponseWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WorkResponses to fetch.
   */
  orderBy?: Prisma.WorkResponseOrderByWithRelationInput | Prisma.WorkResponseOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for WorkResponses.
   */
  cursor?: Prisma.WorkResponseWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WorkResponses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WorkResponses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of WorkResponses.
   */
  distinct?: Prisma.WorkResponseScalarFieldEnum | Prisma.WorkResponseScalarFieldEnum[]
}

/**
 * WorkResponse findFirstOrThrow
 */
export type WorkResponseFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkResponse
   */
  select?: Prisma.WorkResponseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkResponse
   */
  omit?: Prisma.WorkResponseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkResponseInclude<ExtArgs> | null
  /**
   * Filter, which WorkResponse to fetch.
   */
  where?: Prisma.WorkResponseWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WorkResponses to fetch.
   */
  orderBy?: Prisma.WorkResponseOrderByWithRelationInput | Prisma.WorkResponseOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for WorkResponses.
   */
  cursor?: Prisma.WorkResponseWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WorkResponses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WorkResponses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of WorkResponses.
   */
  distinct?: Prisma.WorkResponseScalarFieldEnum | Prisma.WorkResponseScalarFieldEnum[]
}

/**
 * WorkResponse findMany
 */
export type WorkResponseFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkResponse
   */
  select?: Prisma.WorkResponseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkResponse
   */
  omit?: Prisma.WorkResponseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkResponseInclude<ExtArgs> | null
  /**
   * Filter, which WorkResponses to fetch.
   */
  where?: Prisma.WorkResponseWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WorkResponses to fetch.
   */
  orderBy?: Prisma.WorkResponseOrderByWithRelationInput | Prisma.WorkResponseOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing WorkResponses.
   */
  cursor?: Prisma.WorkResponseWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WorkResponses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WorkResponses.
   */
  skip?: number
  distinct?: Prisma.WorkResponseScalarFieldEnum | Prisma.WorkResponseScalarFieldEnum[]
}

/**
 * WorkResponse create
 */
export type WorkResponseCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkResponse
   */
  select?: Prisma.WorkResponseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkResponse
   */
  omit?: Prisma.WorkResponseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkResponseInclude<ExtArgs> | null
  /**
   * The data needed to create a WorkResponse.
   */
  data: Prisma.XOR<Prisma.WorkResponseCreateInput, Prisma.WorkResponseUncheckedCreateInput>
}

/**
 * WorkResponse createMany
 */
export type WorkResponseCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many WorkResponses.
   */
  data: Prisma.WorkResponseCreateManyInput | Prisma.WorkResponseCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * WorkResponse createManyAndReturn
 */
export type WorkResponseCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkResponse
   */
  select?: Prisma.WorkResponseSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the WorkResponse
   */
  omit?: Prisma.WorkResponseOmit<ExtArgs> | null
  /**
   * The data used to create many WorkResponses.
   */
  data: Prisma.WorkResponseCreateManyInput | Prisma.WorkResponseCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkResponseIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * WorkResponse update
 */
export type WorkResponseUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkResponse
   */
  select?: Prisma.WorkResponseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkResponse
   */
  omit?: Prisma.WorkResponseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkResponseInclude<ExtArgs> | null
  /**
   * The data needed to update a WorkResponse.
   */
  data: Prisma.XOR<Prisma.WorkResponseUpdateInput, Prisma.WorkResponseUncheckedUpdateInput>
  /**
   * Choose, which WorkResponse to update.
   */
  where: Prisma.WorkResponseWhereUniqueInput
}

/**
 * WorkResponse updateMany
 */
export type WorkResponseUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update WorkResponses.
   */
  data: Prisma.XOR<Prisma.WorkResponseUpdateManyMutationInput, Prisma.WorkResponseUncheckedUpdateManyInput>
  /**
   * Filter which WorkResponses to update
   */
  where?: Prisma.WorkResponseWhereInput
  /**
   * Limit how many WorkResponses to update.
   */
  limit?: number
}

/**
 * WorkResponse updateManyAndReturn
 */
export type WorkResponseUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkResponse
   */
  select?: Prisma.WorkResponseSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the WorkResponse
   */
  omit?: Prisma.WorkResponseOmit<ExtArgs> | null
  /**
   * The data used to update WorkResponses.
   */
  data: Prisma.XOR<Prisma.WorkResponseUpdateManyMutationInput, Prisma.WorkResponseUncheckedUpdateManyInput>
  /**
   * Filter which WorkResponses to update
   */
  where?: Prisma.WorkResponseWhereInput
  /**
   * Limit how many WorkResponses to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkResponseIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * WorkResponse upsert
 */
export type WorkResponseUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkResponse
   */
  select?: Prisma.WorkResponseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkResponse
   */
  omit?: Prisma.WorkResponseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkResponseInclude<ExtArgs> | null
  /**
   * The filter to search for the WorkResponse to update in case it exists.
   */
  where: Prisma.WorkResponseWhereUniqueInput
  /**
   * In case the WorkResponse found by the `where` argument doesn't exist, create a new WorkResponse with this data.
   */
  create: Prisma.XOR<Prisma.WorkResponseCreateInput, Prisma.WorkResponseUncheckedCreateInput>
  /**
   * In case the WorkResponse was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.WorkResponseUpdateInput, Prisma.WorkResponseUncheckedUpdateInput>
}

/**
 * WorkResponse delete
 */
export type WorkResponseDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkResponse
   */
  select?: Prisma.WorkResponseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkResponse
   */
  omit?: Prisma.WorkResponseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkResponseInclude<ExtArgs> | null
  /**
   * Filter which WorkResponse to delete.
   */
  where: Prisma.WorkResponseWhereUniqueInput
}

/**
 * WorkResponse deleteMany
 */
export type WorkResponseDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which WorkResponses to delete
   */
  where?: Prisma.WorkResponseWhereInput
  /**
   * Limit how many WorkResponses to delete.
   */
  limit?: number
}

/**
 * WorkResponse.workResponseLikes
 */
export type WorkResponse$workResponseLikesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkResponseLike
   */
  select?: Prisma.WorkResponseLikeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkResponseLike
   */
  omit?: Prisma.WorkResponseLikeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkResponseLikeInclude<ExtArgs> | null
  where?: Prisma.WorkResponseLikeWhereInput
  orderBy?: Prisma.WorkResponseLikeOrderByWithRelationInput | Prisma.WorkResponseLikeOrderByWithRelationInput[]
  cursor?: Prisma.WorkResponseLikeWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.WorkResponseLikeScalarFieldEnum | Prisma.WorkResponseLikeScalarFieldEnum[]
}

/**
 * WorkResponse without action
 */
export type WorkResponseDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WorkResponse
   */
  select?: Prisma.WorkResponseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WorkResponse
   */
  omit?: Prisma.WorkResponseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WorkResponseInclude<ExtArgs> | null
}
